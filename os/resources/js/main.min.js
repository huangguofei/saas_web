(function($, w, d) {
	/* 
	 * jQuery扩展 
	 * 
	 * */

	//权限判断
	var CURRAUTHS = localStorage["_CURRAUTHS"] == undefined ? "" : JSON.parse(localStorage["_CURRAUTHS"]);

	if(!CURRAUTHS) {
		$("a[role-auth],input[role-auth],button[role-auth]").attr("disabled", "disabled").removeAttr("onclick");
	} else {
		$("a[role-auth],input[role-auth],button[role-auth]").each(function() {
			var authArr = $(this).attr("role-auth").split('|');
			var cVal = CURRAUTHS[authArr[0]];
			if(!cVal || cVal.indexOf(authArr[1]) < 0) {
				$(this).removeAttr("onclick").click(function() {
					$.showErrorGritter("无权限操作该数据。");
				}).attr("disabled", "disabled");
			}
		});
	}
	//扩展number的replace
	Number.prototype.replace=function(arg1,arg2){
		if(typeof(arg1)=="string"){
			return ((this).toString()).replace(arg1,arg2);
		}else{
			return ((this).toString()).replace(new RegExp(arg1),arg2);
		}
		
	}
	
	$(document).on("keydown","form",function(e){
		if(e.keyCode==13) e.preventDefault();
	});

	//CompanyId
	w.COMPANYID = "01E3D2AF-CA22-3320-73F7-9FBAEC75F018";
	//全局token
	w.OSTOKEN = "";
	//全局token类型
	w.OSTOKENTYPE = "";
	w.OSAPIBASEURL = "http://api.saas.com";
	//API主域
	w.BASEAPIURL = "http://api.saas.com";
	//OS API域（运营）
	w.OSAPIURL = OSAPIBASEURL+"/os";
	//BS API域（业务）
	w.BSAPIURL = BASEAPIURL+"/saas";
	//IM Server
	w.WSSERVER="192.168.1.252";
	//IM Port
	w.WSPORT="8012";
	//SAAS API
	w.SAASAPIS = {
		//运营
		OS: {
			//日志
			logs: OSAPIURL + "/logs",
			//版本
			editions: OSAPIURL + "/saas_editions",
			edition: {
				//版本状态
				status: OSAPIURL + "/saas_editions/sale_status",
				//版本标签
				tags: OSAPIURL + "/saas_editions/tags"
			},
			//企业
			companies: OSAPIURL + "/company",
			company: {
				operate_logs: OSAPIURL + "/company/{id}/operate_logs",
				handler_logs: OSAPIURL + "/company/{id}/handler_logs",
				//备注
				remark: OSAPIURL + "/company/{id}/remark",
				//停用/禁用
				status: OSAPIURL + "/company/{id}/status",
				//审核
				verify: OSAPIURL + "/company/{id}/profile_status"
			},
			//代码
			codes: OSAPIURL + "/codes",
			code: {
				class: OSAPIURL + "/codes/class"
			}
		},
		//业务
		BS: {
			//企业
			companies: BSAPIURL + "/company",
			company: {
				//企业模块
				modules: BSAPIURL + "/company/modules",
				//企业状态
				static_count: BSAPIURL + "/companies/01E3D2AF-CA22-3320-73F7-9FBAEC75F018/static_count",
				//企业状态
				status: BSAPIURL + "/company/verify_status",
				verify: {
					mobile: BSAPIURL + "/company/verify/mobile",
					email: BSAPIURL + "/company/verify/email",
					info: BSAPIURL + "/company/verify/company_info"
				},
				//角色
				roles: BSAPIURL + "/companies/roles",
				role: {
					//添加角色
					newrole: BSAPIURL + "/companies/roles/newrole",
					//启用、禁用
					status: BSAPIURL + "/companies/roles/status",
					//设置模块
					modules: BSAPIURL + "/companies/roles/{id}/modules"
				},
				//帐号
				accounts: BSAPIURL + "/companies/accounts",
				account: {
					//添加帐号
					newaccount: BSAPIURL + "/companies/accounts/new_account",
					//启用、停用
					status: BSAPIURL + "/companies/accounts/selected/status",
					//设置角色
					roles: BSAPIURL + "/companies/accounts/{id}/roles"
				},
				//部门
				departments: BSAPIURL + "/companies/01E3D2AF-CA22-3320-73F7-9FBAEC75F018/departments",
				department: {
					//直接子部门
					children: BSAPIURL + "/companies/departments/{id}/children",
					//子部门树
					tree_children: BSAPIURL + "/companies/departments/{id}/tree_children",
					//添加部门
					new_department: BSAPIURL + "/companies/01E3D2AF-CA22-3320-73F7-9FBAEC75F018/departments/new_department",
					//部门负责人
					managers: BSAPIURL + "/companies/01E3D2AF-CA22-3320-73F7-9FBAEC75F018/departments/{id}/managers"
				},
				//员工
				employees: BSAPIURL + "/companies/01E3D2AF-CA22-3320-73F7-9FBAEC75F018/employees",
				employee: {
					//新员工
					new_employee: BSAPIURL + "/companies/01E3D2AF-CA22-3320-73F7-9FBAEC75F018/employees/new_employee",
					//开通帐号
					accounts: BSAPIURL + "/companies/01E3D2AF-CA22-3320-73F7-9FBAEC75F018/employees/accounts",
					//员工档案
					profile: BSAPIURL + "/companies/employees/{id}/profile",
					profile_base: BSAPIURL + "/companies/01E3D2AF-CA22-3320-73F7-9FBAEC75F018/employees/{id}/profile_base",
					profile_contact: BSAPIURL + "/companies/01E3D2AF-CA22-3320-73F7-9FBAEC75F018/employees/{id}/profile_contact",
					//员工状态
					status: BSAPIURL + "/companies/01E3D2AF-CA22-3320-73F7-9FBAEC75F018/employees/{id}/status",
					//添加状态
					new_status: BSAPIURL + "/companies/01E3D2AF-CA22-3320-73F7-9FBAEC75F018/employees/{id}/status/new_status",
					//调整部门
					change_dept: BSAPIURL + "/companies/01E3D2AF-CA22-3320-73F7-9FBAEC75F018/department/{id}/employees",
					//地图定位
					map_location: BSAPIURL + "/companies/employees/{id}/map_location",
					//上传（导入）
					upload: BSAPIURL + "/companies/01E3D2AF-CA22-3320-73F7-9FBAEC75F018/employees/xls",
					//导入
					import: BSAPIURL + "/companies/01E3D2AF-CA22-3320-73F7-9FBAEC75F018/employees/import_employees"
				},
				//版本
				edition: {
					//企业拥有版本
					my_editions: BSAPIURL + "/companies/my_editions_with_orders",
					//版本购买
					new_edition: BSAPIURL + "/companies/my_editions/new_edition",
					//版本升级
					upgrade: BSAPIURL + "/companies/my_editions/{id}/upgrade",
					//版本续费
					renewals: BSAPIURL + "/companies/my_editions/{id}/renewals",
					//增加账户
					add_accounts: BSAPIURL + "/companies/my_editions/{id}/add_accounts",
					//订单
					orders: BSAPIURL + "/companies/edition_orders",
					order: {
						//状态
						status: BSAPIURL + "/companies/edition_orders/{id}/status",
						//支付
						payment: BSAPIURL + "/companies/edition_orders/{id}/payment",
						//支付凭证
						payment_voucher: BSAPIURL + "/companies/edition_orders/{id}/payment_voucher"
					}
				}
			},
			//帐号
			account: {
				//找回密码
				forgot: {
					step1: BSAPIURL + "/account/find_password/step1",
					step2: BSAPIURL + "/account/find_password/step2",
					step3: BSAPIURL + "/account/find_password/step3"
				},
				//修改密码
				password: BSAPIURL + "/accounts/password",
				//修改手机号码
				mobile: {
					step1: BSAPIURL + "/accounts/mobile_number/step1",
					step2: BSAPIURL + "/accounts/mobile_number/step2",
					step3: BSAPIURL + "/accounts/mobile_number/step3"
				},
				//安全信息
				security_info: BSAPIURL + "/accounts/security_info",
			},
			//个人信息
			employee: {
				//个人档案
				profile: BSAPIURL + "/employees/profile",
				//修改联系方式
				contact: BSAPIURL + "/employees/profile/contact_info",
				//修改头像
				photo: BSAPIURL + "/employees/profile/photo",
				//定位
				profileLocation: BSAPIURL + "/employees/profile/location"
			},
			//模块
			modules: BSAPIURL + "/modules",
			module: {
				sort: BSAPIURL + "/modules/sorts",
				status: BSAPIURL + "/modules/status"
			},
			//登录
			passport: BSAPIURL + "/passport",
			//上传
			upload: {
				//图片上传
				image: BSAPIURL + "/image",
				//文档
				document: BSAPIURL + "/document",
				//OS图片上传
				IMImage: BASEAPIURL+ "/im/image",
				//OS文档
				IMDocument: BASEAPIURL + "/im/document"
			},
			//版本
			edition: {
				//在售版本
				sale: BSAPIURL + "/on_sale_editions_with_modules"
			}
		},
		//公共
		BASE: {
			code: {
				//短信验证码
				sms: BASEAPIURL + "/mobile/sms_code",
				//邮件验证码
				email: BASEAPIURL + "/email/sms_code"
			},
			//图片验证码
			captcha: BASEAPIURL + "/captcha"
		}
	};
	/*
	 *ajax 扩展  
	 * */
	$.ajaxPost = function(url, data, successcallback, errorcallback) {
		$.ajaxBase("POST", url, data, successcallback, errorcallback);
	}
	$.ajaxPatch = function(url, data, successcallback, errorcallback) {
		$.ajaxBase("PATCH", url, data, successcallback, errorcallback);
	}
	$.ajaxGet = function(url, successcallback, errorcallback) {
		$.ajaxBase("GET", url, null, successcallback, errorcallback);
	}
	$.ajaxPut = function(url, data, successcallback, errorcallback) {
		$.ajaxBase("PUT", url, data, successcallback, errorcallback);
	}
	$.ajaxByAction = function(action, url, data, successcallback, errorcallback) {
		$.ajaxBase(action == "add" ? "POST" : "PUT", url, data, successcallback, errorcallback);
	}
	$.ajaxDelete = function(url, data, successcallback, errorcallback) {
		$.ajaxBase("DELETE", url, data, successcallback, errorcallback);
	}
	$.ajaxBase = function(type, url, data, successcallback, errorcallback) {
		//IE
		if(!$.support.cors)
			$.support.cors = true;

		if(type != "GET") {
			if(!data) {
				data = {
					action_type: type
				};
			} else {
				data["action_type"] = type;
			}
			data["_hash"] = OSTOKEN;
			data["_hash_type"] = OSTOKENTYPE;
		}
		//xhrFields: {
		//				withCredentials: true
		//			},
		//			crossDomain: true,
		$.ajax({
			type: (type == "GET" ? "GET" : "POST"),
			url: url,
			data: (!data || data.length == 0) ? "" : JSON.stringify(data),
			//contentType: (type == "GET" ? "text/plain" : "application/json"),
			dataType: "json",
			xhrFields: {
				withCredentials: true
			},
			crossDomain: true,
			success: function(response) {
				//保存SessionId
				sessionStorage["session_id"] = response.session_id;
				$.cookie("session_id", response.session_id);
				//fail
				if(response.code > 0) {
					$.processFailResponse(response);
				}
				if(successcallback)
					successcallback(response);

				//refresh token
				if(type != "GET")
					$.token();
			},
			error: function(XMLHttpRequest, textStatus, errorThrown) {
				if(errorcallback) {
					errorcallback(textStatus, errorThrown);
				} else {
					$.showErrorGritter("服务器返回错误：" + textStatus, {
						time: 3000,
						clear: false
					});
				}
				//refresh token
				if(type != "GET")
					$.token();
			}
		});
	};
	//加载城市数据
	$.loadCityData = function(successcallback) {
		var cacheCityData = JSON.parse(localStorage["_CITY"] || null);
		if(cacheCityData) {
			if(successcallback)
				successcallback(cacheCityData);
			return;
		}
		var cityClassId = 100;
		//get city data
		$.ajaxGet(OSAPIURL + "/codes?class_id=" + cityClassId, function(response) {
			if(response.code != 0) {
				$.showErrorGritter("获取城市数据失败：" + response.msg, {
					time: 3000
				});
			} else {
				var cityDistricts = {};
				var groupNames = ["A-G", "H-K", "L-S", "T-Z"];
				var groupCity = {};
				for(var i in groupNames) {
					groupCity[groupNames[i]] = [];
				}

				var cityData = response.data.class_lists;
				for(var i in cityData) {
					var city = cityData[i];
					if(city.code_tree_parent_id == cityClassId) {
						try {
							var groupName;
							var fix = city.code_short_name[0].toUpperCase();
							if(["A", "B", "C", "D", "E", "F", "G"].indexOf(fix) >= 0) {
								groupName = "A-G";
							}
							if(["H", "I", "J", "K"].indexOf(fix) >= 0) {
								groupName = "H-K";
							}
							if(["L", "M", "N", "O", "P", "Q", "R", "S"].indexOf(fix) >= 0) {
								groupName = "L-S";
							}
							if(["T", "U", "V", "W", "X", "Y", "Z"].indexOf(fix) >= 0) {
								groupName = "T-Z";
							}
							if(!groupName) {
								continue;
							}
							groupCity[groupName].push({
								code: city.code_tree_id,
								address: city.code_name
							});
						} catch(e) {}
					} else {
						if(!cityDistricts[city.code_tree_parent_id]) {
							cityDistricts[city.code_tree_parent_id] = {};
						}
						cityDistricts[city.code_tree_parent_id][city.code_tree_id] = city.code_name;
					}
				}
				for(var i in groupNames) {
					if(groupCity[groupNames[i]].length == 0) {
						delete groupCity[groupNames[i]];
					}
				}
				cityDistricts[86] = groupCity;
				cityDistricts["DataSource"] = cityData;

				localStorage["_CITY"] = JSON.stringify(cityDistricts);
				window.ChineseDistricts = cityDistricts;

				if(successcallback)
					successcallback(cityDistricts);
			}
		});
	};
	//加载行业列表
	$.loadHangyeData = function(successcallback) {
		var cacheHangyeData = JSON.parse(localStorage["_Hangye"] || null);
		if(cacheHangyeData) {
			if(successcallback)
				successcallback(cacheHangyeData);
			return;
		}
		var classId = 102;
		//get city data
		$.ajaxGet(OSAPIURL + "/codes?class_id=" + classId, function(response) {
			if(response.code != 0) {
				$.showErrorGritter("获取行业数据失败：" + response.msg, {
					time: 3000
				});
			} else {
				var hangyeData = response.data.class_lists;

				localStorage["_Hangye"] = JSON.stringify(hangyeData);

				if(successcallback)
					successcallback(hangyeData);
			}
		});
	};
	//加载企业性质列表
	$.loadQYXZData = function(successcallback) {
		var cacheHangyeData = JSON.parse(localStorage["_QYXZ"] || null);
		if(cacheHangyeData) {
			if(successcallback)
				successcallback(cacheHangyeData);
			return;
		}
		var classId = 103;
		//get city data
		$.ajaxGet(OSAPIURL + "/codes?class_id=" + classId, function(response) {
			if(response.code != 0) {
				$.showErrorGritter("获取行业数据失败：" + response.msg, {
					time: 3000
				});
			} else {
				var hangyeData = response.data.class_lists;

				localStorage["_QYXZ"] = JSON.stringify(hangyeData);

				if(successcallback)
					successcallback(hangyeData);
			}
		});
	};
	//加载资讯类型列表
	$.loadZXLXData = function(successcallback) {
		var cacheZXLXData = JSON.parse(localStorage["_ZXLX"] || null);
		if(cacheZXLXData) {
			if(successcallback)
				successcallback(cacheZXLXData);
			return;
		}
		var classId = 102103;
		//get city data
		$.ajaxGet(BSAPIURL + "/companies/" + COMPANYID + "/class/" + classId, function(response) {
			if(response.code != 0) {
				$.showErrorGritter("获取资讯类型数据失败：" + response.msg, {
					time: 3000
				});
			} else {
				var zxlxData = response.data.code_list;

				//localStorage["_ZXLX"] = JSON.stringify(zxlxData);

				if(successcallback)
					successcallback(zxlxData);
			}
		});
	};
	//处理response code > 0
	$.processFailResponse = function(response) {
		if(response.code == 100000004) {
			//无权限
			$.showErrorGritter("无权限访问该数据。", {
				time: 3000
			});
		} else if(response.code == 100000003 || response.code == 100000033) {
			//未登录 or 无任何权限
			var tipText = "您的登录已过期，请重新登录。";
			var waitTimes = 1000;
			if(response.code == 100000033) {
				tipText = "你的帐号无任何权限，请联系管理员。";
				waitTimes = 3000;
			}
			$.showErrorGritter(tipText, {
				time: 3000
			});
			setTimeout(function() {
				if(w.parent) {
					w.parent.location = "/login.html";
				} else {
					w.location = "/login.html";
				}
			}, waitTimes);
		}
	};
	//get token
	$.token = function() {
		if(!OSTOKENTYPE) {
			OSTOKENTYPE = $.uuid();
		}
		$.ajaxGet(OSAPIBASEURL + "/token?type=" + OSTOKENTYPE, function(response) {
			if(response.code != 0) {
				$.showErrorGritter("获取TOKEN失败：" + response.msg, {
					time: 3000
				});
			} else {
				OSTOKEN = response.data.hash;
			}
		});
	};
	//get guid
	$.uuid = function() {    
		return "xxxxxxxxxxxx4xxxyxxxxxxxxxxxxxxx".replace(/[xy]/g, function(c) {        
			var r = Math.random() * 16 | 0,
				v = c == "x" ? r : (r & 0x3 | 0x8);        
			return v.toString(16);    
		});
	};
	//当前时间
	$.timeNow = function() {
		return new Date();
	};
	//时间转换
	$.convertToDate = function(datestring) {
		if(!datestring) {
			return null;
		}
		if(!isNaN(datestring)) {
			return $.convertToDate4Unix(datestring);
		}
		var resDate = (new Date(datestring.replace(/[上,下,午,A,P,M,a,p,m]/g, "").replace(/[年,月,日]/g, "/")));
		if(resDate == "Invalid Date") {
			var isoExp = /^s*(d{4})-(dd)-(dd)s*$/,
				date = new Date(NaN),
				month,
				parts = isoExp.exec(datestring);

			if(parts) {
				month = +parts[2];
				date.setFullYear(parts[1], month - 1, parts[3]);
				if(month != date.getMonth() + 1) {
					date.setTime(NaN);
				}
			}
			return date;
		}
		return resDate;
	};
	//两个时间相差天数
	$.getDaysOfTimeDifference = function(largerTime, smallerTime, convertToInt) {
		var days = ($.convertToDate(largerTime).getTime() - $.convertToDate(smallerTime).getTime()) /
			(24 * 3600 * 1000);
		return convertToInt ? Math.floor(days) : days;
	};
	//空字段填充
	$.fillObjectEmptyField = function(source, val) {
		val = val || "-";
		if(typeof source == "object") {
			for(var p in source) {
				if(!source[p]) {
					source[p] = val;
				}
			}
		}
	};
	//复制对象
	$.cloneObject = function(sourceObj) {
		function MClone() {}
		MClone.prototype = sourceObj;
		var o = new MClone();
		for(var a in o) {
			if(typeof o[a] == "object") {
				o[a] = $.cloneObject(o[a]);
			}
		}
		return o;
	};
	//时间戳转换
	$.convertToDate4Unix = function(datestring) {
		if(datestring.length < 10) {
			return null;
		}
		return new Date(datestring * 1000);
	};
	//文件大小转中文
	$.converBytesToCN = function(bytes) {
		if(bytes === 0) return '0 B';
		var k = 1000,
			sizes = ['B', 'KB', 'MB', 'GB', 'TB', 'PB', 'EB', 'ZB', 'YB'],
			i = Math.floor(Math.log(bytes) / Math.log(k));
		return(bytes / Math.pow(k, i)).toPrecision(3) + ' ' + sizes[i];
	};
	//获取 url 参数值
	$.getQueryString = function(name) {
		var reg = new RegExp("(^|&)" + name + "=([^&]*)(&|$)");
		var r = w.location.search.substr(1).match(reg);
		if(r != null) return unescape(r[2]);
		return null;
	};
	//获取 url 参数对象
	$.getQueryObject = function(url) {
		url = url || w.location.href;
		var search = url.substring(url.lastIndexOf("?") + 1);
		var obj = {};
		var reg = /([^?&=]+)=([^?&=]*)/g;
		search.replace(reg, function(rs, $1, $2) {
			var name = decodeURIComponent($1);
			var val = decodeURIComponent($2);
			val = String(val);
			obj[name] = val;
			return rs;
		});
		return obj;
	};
	//对象转 url 参数
	$.toQueryString = function(obj, full) {
		if(!obj) {
			return "";
		}
		var resQS = "";
		for(p in obj) {
			if(p) {
				resQS += "&" + p + "=" + obj[p];
			}
		}
		if(!resQS) {
			return "";
		}
		return(full ? "?" : "") + resQS.substring(1);
	};
	//文件下载
	$.downloadFile = function(url, code, name) {
		console.log(arguments);
		if(code && name&&code!="undefined") {
			url = BASEAPIURL + "/file/download?path=" + encodeURIComponent(code) + "&filename=" + encodeURIComponent(name)+"&session_id="+sessionStorage["session_id"];
		}
		console.log(url);
		var iframe = document.createElement("iframe");
		iframe.src = url;
		iframe.setAttribute("name", "iframeForDownload");
		iframe.setAttribute("url", url);
		iframe.setAttribute("width", "0");
		iframe.setAttribute("height", "0");
		iframe.setAttribute("frameborder", 0);
		iframe.setAttribute("scrolling", "auto");
		if(iframe.attachEvent) {
			iframe.attachEvent("onload", function() {
				removeCurrDownloadIframe();
			});
		} else {
			iframe.onload = function() {
				removeCurrDownloadIframe();
			};
		}
		$("body").append(iframe);
		var removeCurrDownloadIframe = function() {
			setTimeout(function() {
				$("iframe[name='iframeForDownload']").remove();
			}, 100);
		};
	};
	//在线阅读
	$.onlineRead=function(fileName, path, container) {
		if(path=="undefined") {
			$.showErrorGritter("该文件不可预览!");
			return false;
		}
		$.showLoadingPop("正在加载...");
		if((fileName || container) && path) {
			path = encodeURIComponent(path);
			if(!container) {
				if($("body .online-preview-page").length == 0) {
					$("body").append("<div class=\"online-preview-page hide\"><iframe width = \"100%\" style=\"border:0;\"></iframe></div>");
				}
				var modalId = $.modal().showOfAuto(fileName + "在线预览", ".online-preview-page", function() {});
				$("#" + modalId + " iframe").attr("src", OSAPIBASEURL + "/file/view?path=" + path);
				$("#" + modalId + " iframe").ready(function() {
					$.hideLoadingPop();
				});
			} else {
				if(container.children("iframe").length == 0) {
					container.append("<iframe width = \"100%\" style=\"border:0;\" src=\"" + OSAPIBASEURL + "/file/view?path=" + path + "\"></iframe>");
				} else {
					container.children("iframe").attr("src", OSAPIBASEURL + "/file/view?path=" + path);
				}
				container.children("iframe").ready(function() {
					$.hideLoadingPop();
				});
			}
		} else {
			$.hideLoadingPop();
			$.showErrorGritter("文件预览失败!");
		}
	}
	//loading
	$.showLoadingPop = function(text) {
		if(!text) {
			text = "正在加载数据，请稍后...";
		}
		if($("#pnlLoadPop").length == 1) {
			$("#pnlLoadPop .tip").text(text);
		} else
			$("body").append("<div id='pnlLoadPop'><div class=\"modal-backdrop fade in \" style=\"opacity:.1;\"></div><div class=\"alert alert-info tip loading-tip \" role=\"alert\">" + text + "</div></div>");

		$("#pnlLoadPop").removeClass("hide");
	};
	$.hideLoadingPop = function() {
		$("#pnlLoadPop").addClass("hide");
	};
	//提示成功（绿色）
	$.showSuccessGritter = function(text, option) {
		var gOption = {
			time: 3000,
			class_name: "gritter-success"
		};
		if(option) {
			gOption = $.extend({}, gOption, option);
		}

		$.showGritter(text, gOption);
	};
	//提示错误（红色）
	$.showErrorGritter = function(text, option) {
		var gOption = {
			time: 5000,
			class_name: "gritter-error"
		};
		if(option) {
			gOption = $.extend({}, gOption, option);
		}

		$.showGritter(text, gOption);
	};
	//提示
	$.showGritter = function(text, option) {
		var gOption = {
			title: "",
			text: text,
			time: 3000,
			position: "top-right",
			class_name: "gritter-success",
			clear: true
		};
		if(option) {
			gOption = $.extend({}, gOption, option);
		}
		//clear
		if(gOption.clear) {
			$.clearGritter();
		}
		$.gritter.add(gOption);
	};
	//清空提示
	$.clearGritter = function() {
		$("#gritter-notice-wrapper").html("");
	};
	//模态框
	var modalIdNo = 0;
	$.modal = function(options) {
		options = options || {};
		var showFooter = options.showFooter == undefined ? true : options.showFooter;
		modalIdNo++;
		var modalId = "cModal" + modalIdNo;
		var modalDoc = $("<div id=\"" + modalId + "\" class=\"modal fade\" tabindex=\"-1\" role=\"dialog\"><div class=\"modal-dialog modal-sm\" style=\"margin-top:" + ($(document).height() / 4) + "px;\"></div></div>");
		var modalContentDoc = $("<div class=\"modal-content\"></div>");
		var modalHeaderDoc = $("<div class=\"modal-header\"><button type=\"button\" class=\"close\" data-dismiss=\"modal\" aria-label=\"Close\"><span aria-hidden=\"true\">&times;</span></button><h4 class=\"modal-title\">系统提示</h4></div>");
		var modalBodyDoc = $("<div class=\"modal-body\"></div>");
		$(modalContentDoc).append(modalHeaderDoc);
		$(modalContentDoc).append(modalBodyDoc);
		$(modalDoc).find(".modal-dialog").append(modalContentDoc);
		//$("body").append(modalDoc);
		//destroy
		$(modalDoc).on('hidden.bs.modal', function(e) {
			$(this).remove();

			if(options.closeCallback) {
				options.closeCallback.call(this, null);
			}
		});
		$(modalDoc).on('shown.bs.modal', function(e) {
			if(options.shownCallback) {
				options.shownCallback.call(this, modalId);
			}
		});

		modalDoc.alert = function(text) {
			$(this).find(".modal-body").text(text);
			$(this).modal('show');
			$("body").append(modalDoc);
		};
		modalDoc.confirm = function(text, okcallback, cancelcallback) {
			var modalFooterDoc = $("<div class=\"modal-footer\"></div>");
			var modelBtnOk = $("<button type=\"button\" class=\"btn btn-sm btn-primary\" data-dismiss=\"modal\"> &nbsp;&nbsp;<i class='fa fa-check'></i>&nbsp; 确 定&nbsp;&nbsp; </button>");
			$(modelBtnOk).click(function() {
				if(okcallback) {
					okcallback.call(this, null);
				}
			});
			$(modalFooterDoc).append(modelBtnOk);
			var modelBtnCancel = $("<button type=\"button\" class=\"btn btn-sm btn-default\" data-dismiss=\"modal\"> &nbsp;&nbsp;<i class='fa fa-times'></i>&nbsp; 取 消&nbsp;&nbsp; </button>");
			$(modelBtnCancel).click(function() {
				if(cancelcallback) {
					cancelcallback.call(this, null);
				}
			});
			$(modalFooterDoc).append(modelBtnCancel);
			$(this).find(".modal-content").append(modalFooterDoc);
			$(this).find(".modal-body").text(text);
			//remove header
			$(this).find(".modal-header").remove();

			$(this).modal({
				backdrop: "static",
				show: true
			});
			$("body").append(modalDoc);
		};
		modalDoc.show = function(title, contentContainer, okcallback, cancelcallback) {
			var modalFooterDoc = $("<div class=\"modal-footer\"></div>");
			var modelBtnOk = $("<button type=\"button\" class=\"btn btn-sm btn-primary\"> &nbsp;&nbsp;<i class='fa fa-check'></i>&nbsp; 确 定&nbsp;&nbsp; </button>");
			$(modelBtnOk).click(function() {
				if(okcallback) {
					okcallback.call(this, modalDoc);
				}
			});
			$(modalFooterDoc).append(modelBtnOk);
			var modelBtnCancel = $("<button type=\"button\" class=\"btn btn-sm btn-default\" data-dismiss=\"modal\"> &nbsp;&nbsp;<i class='fa fa-times'></i>&nbsp; 取 消&nbsp;&nbsp; </button>");
			$(modelBtnCancel).click(function() {
				if(cancelcallback) {
					cancelcallback.call(this, modalDoc);
				}
			});
			$(modalFooterDoc).append(modelBtnCancel);
			$(this).find(".modal-dialog").removeClass("modal-sm").addClass("modal-normal").attr("style", "");
			if(showFooter)
				$(this).find(".modal-content").append(modalFooterDoc);
			$(this).find(".modal-title").text(title);
			$(this).find(".modal-body").append($(contentContainer).html()).css("max-height", ($(window).height() - 170).toString() + "px").css("overflow", "auto");
			//remove header
			//$(this).find(".modal-header").remove();

			$(this).modal({
				backdrop: "static",
				show: true
			});
			$("body").append(modalDoc);

			inputLimit();

			return modalId;
		};
		modalDoc.showOfMini = function(title, contentContainer, okcallback, cancelcallback) {
			var modalFooterDoc = $("<div class=\"modal-footer\"></div>");
			var modelBtnOk = $("<button type=\"button\" class=\"btn btn-sm btn-primary\"> &nbsp;&nbsp;<i class='fa fa-check'></i>&nbsp; 确 定&nbsp;&nbsp; </button>");
			$(modelBtnOk).click(function() {
				if(okcallback) {
					okcallback.call(this, modalDoc);
				}
			});
			$(modalFooterDoc).append(modelBtnOk);
			var modelBtnCancel = $("<button type=\"button\" class=\"btn btn-sm btn-default\" data-dismiss=\"modal\"> &nbsp;&nbsp;<i class='fa fa-times'></i>&nbsp; 取 消&nbsp;&nbsp; </button>");
			$(modelBtnCancel).click(function() {
				if(cancelcallback) {
					cancelcallback.call(this, modalDoc);
				}
			});
			$(modalFooterDoc).append(modelBtnCancel);
			$(this).find(".modal-dialog").removeClass("modal-sm").addClass("modal-mini").attr("style", "").css("width", "420px");
			if(showFooter)
				$(this).find(".modal-content").append(modalFooterDoc);
			$(this).find(".modal-title").text(title);
			$(this).find(".modal-body").append($(contentContainer).html()).css("max-height", ($(window).height() - 170).toString() + "px").css("overflow", "auto");
			//remove header
			//$(this).find(".modal-header").remove();

			$(this).modal({
				backdrop: "static",
				show: true
			});
			$("body").append(modalDoc);

			inputLimit();

			return modalId;
		};
		modalDoc.showOfLarge = function(title, contentContainer, okcallback, cancelcallback) {
			var modalFooterDoc = $("<div class=\"modal-footer\"></div>");
			var modelBtnOk = $("<button type=\"button\" class=\"btn btn-sm btn-primary\"> &nbsp;&nbsp;<i class='fa fa-check'></i>&nbsp; 确 定&nbsp;&nbsp; </button>");
			$(modelBtnOk).click(function() {
				if(okcallback) {
					okcallback.call(this, modalDoc);
				}
			});
			$(modalFooterDoc).append(modelBtnOk);
			var modelBtnCancel = $("<button type=\"button\" class=\"btn btn-sm btn-default\" data-dismiss=\"modal\"> &nbsp;&nbsp;<i class='fa fa-times'></i>&nbsp; 取 消&nbsp;&nbsp; </button>");
			$(modelBtnCancel).click(function() {
				if(cancelcallback) {
					cancelcallback.call(this, modalDoc);
				}
			});
			$(modalFooterDoc).append(modelBtnCancel);
			$(this).find(".modal-dialog").removeClass("modal-sm").addClass("modal-large").attr("style", "").css("width", "900px");
			if(showFooter)
				$(this).find(".modal-content").append(modalFooterDoc);
			$(this).find(".modal-title").text(title);
			$(this).find(".modal-body").append($(contentContainer).html()).css("max-height", ($(window).height() - 170).toString() + "px").css("overflow", "auto");
			//remove header
			//$(this).find(".modal-header").remove();

			$(this).modal({
				backdrop: "static",
				show: true
			});
			$("body").append(modalDoc);

			inputLimit();

			return modalId;
		};
		modalDoc.showOfAuto = function(title, contentContainer) {
			$(this).find(".modal-dialog").removeClass("modal-sm").addClass("modal-mini").attr("style", "").css({
				width: "auto",
				margin: "10px"
			});
			$(this).find(".modal-title").text(title);
			$(this).find(".modal-body").append($(contentContainer).html()).css("max-height", ($(window).height() - 65).toString() + "px").css("overflow", "auto");
			//remove header
			//$(this).find(".modal-header").remove();

			$(this).modal({
				backdrop: "static",
				show: true
			});
			$("body").append(modalDoc);

			inputLimit();

			if($("#" + modalId + " ul[role='tablist']").length > 0) {
				$("#" + modalId + " ul[role='tablist'] a[role='tab']").click(function() {
					$("#" + modalId + " div[role='tabpanel']").removeClass("active");
					$("#" + modalId + " div[role='tabpanel']#" + $(this).attr("aria-controls")).addClass("active");
				});
			}

			return modalId;
		};
		modalDoc.open = function(title, path) {
			$(this).find(".modal-dialog").removeClass("modal-sm");
			$(this).find(".modal-title").text(title + " （正在打开...）");
			$(this).find(".modal-body").append("<iframe frameborder=\"0\" width=\"100%\" height=\"500\" scrolling=\"auto\" src=\"" + path + "\"></iframe>");
			$(this).modal('show');
			$("body").append(modalDoc);
			var cModal = $(this);
			$(cModal).find(".modal-body iframe").on("load", function() {
				$(cModal).find(".modal-title").text(title);
			});
		};
		modalDoc.openOfAuto = function(title, path) {
			$(this).find(".modal-dialog").removeClass("modal-sm").attr("style", "").css({
				width: "auto",
				margin: 0
			});
			$(this).find(".modal-title").text(title);
			$(this).find(".modal-body").append("<iframe frameborder=\"0\" width=\"100%\" height=\"100%\" scrolling=\"auto\" src=\"" + path + "\"></iframe>");
			$(this).find(".modal-body").css("max-height", ($(window).height() - 170).toString() + "px").css("overflow", "auto");

			$(this).modal({
				backdrop: "static",
				show: true
			});
			$("body").append(modalDoc);

			return modalId;
		};

		return modalDoc;
	};

	/*
	 * cookie
	 * */
	var pluses = /\+/g;

	function encode(s) {
		return config.raw ? s : encodeURIComponent(s);
	}

	function decode(s) {
		return config.raw ? s : decodeURIComponent(s);
	}

	function stringifyCookieValue(value) {
		return encode(config.json ? JSON.stringify(value) : String(value));
	}

	function parseCookieValue(s) {
		if(s.indexOf('"') === 0) {
			// This is a quoted cookie as according to RFC2068, unescape...
			s = s.slice(1, -1).replace(/\\"/g, '"').replace(/\\\\/g, '\\');
		}

		try {
			// Replace server-side written pluses with spaces.
			// If we can't decode the cookie, ignore it, it's unusable.
			// If we can't parse the cookie, ignore it, it's unusable.
			s = decodeURIComponent(s.replace(pluses, ' '));
			return config.json ? JSON.parse(s) : s;
		} catch(e) {}
	}

	function read(s, converter) {
		var value = config.raw ? s : parseCookieValue(s);
		return $.isFunction(converter) ? converter(value) : value;
	}

	var config = $.cookie = function(key, value, options) {

		// Write

		if(value !== undefined && !$.isFunction(value)) {
			options = $.extend({}, config.defaults, options);

			if(typeof options.expires === 'number') {
				var days = options.expires,
					t = options.expires = new Date();
				t.setTime(+t + days * 864e+5);
			}

			return(document.cookie = [
				encode(key), '=', stringifyCookieValue(value),
				options.expires ? '; expires=' + options.expires.toUTCString() : '', // use expires attribute, max-age is not supported by IE
				options.path ? '; path=' + options.path : '',
				options.domain ? '; domain=' + options.domain : '',
				options.secure ? '; secure' : ''
			].join(''));
		}

		// Read

		var result = key ? undefined : {};

		// To prevent the for loop in the first place assign an empty array
		// in case there are no cookies at all. Also prevents odd result when
		// calling $.cookie().
		var cookies = document.cookie ? document.cookie.split('; ') : [];

		for(var i = 0, l = cookies.length; i < l; i++) {
			var parts = cookies[i].split('=');
			var name = decode(parts.shift());
			var cookie = parts.join('=');

			if(key && key === name) {
				// If second argument (value) is a function it's a converter...
				result = read(cookie, value);
				break;
			}

			// Prevent storing a cookie that we couldn't decode.
			if(!key && (cookie = read(cookie)) !== undefined) {
				result[name] = cookie;
			}
		}

		return result;
	};

	config.defaults = {};

	$.removeCookie = function(key, options) {
		if($.cookie(key) === undefined) {
			return false;
		}

		// Must not alter options, thus extending a fresh object...
		$.cookie(key, '', $.extend({}, options, {
			expires: -1
		}));
		return !$.cookie(key);
	};
	/*
	 * Local store
	 * */
	$.getLocalData = function(key) {
		return $.cookie(key);
	};
	$.setLocalData = function(key, value, options) {
		return $.cookie(key, value, options);
	};
	$.removeLocalData = function(key) {
		return $.removeCookie(key);
	};

	/*
	 * function
	 * */

	//uploader
	$.fn.initUploader = function(options) {
		var upContainer = options.up_container;
		var filters = {};
		if(options.url.indexOf("image") >= 0) {
			filters = {
				max_file_size: '10mb',
				mime_types: [{
					title: "Image files",
					extensions: "jpg,gif,png,bmp,jpeg"
				}]
			}
		} else {
			filters = {
				max_file_size: '10mb',
				mime_types: [{
					title: "Image files",
					extensions: "jpg,gif,png,bmp,jpeg"
				}, {
					title: "Office",
					extensions: "doc,docx,ppt,pptx,xlsx,xls,pdf,7z,zip,txt,rar"
				}]
			}
		}
		var uploader = new plupload.Uploader({
			runtimes: 'html5,flash,silverlight,html4',
			browse_button: $(this).selector.substr(1), // you can pass an id...
			//container: document.getElementById('container'),
			url: options.url,
			multi_selection: false,
			file_data_name: options.fileName || "file",
			flash_swf_url: '../resources/upload/Moxie.swf',
			silverlight_xap_url: '../resources/upload/Moxie.xap',
			multipart_params: {
				session_id: $.cookie("session_id")
			},
			filters: filters,
			init: {
				PostInit: function() {},
				FilesAdded: function(up, files) {
					if(files.length == 0) {
						return;
					}
					if(options.FilesAdded) {
						if(!options.FilesAdded(up, files)) {
							return false;
						}
					}

					for(var i in files) {
						var mFile = files[i];
						$(upContainer).append("<div class=\"file\" file-id=\"" + mFile.id + "\"><h6>" + mFile.name + " 上传中<span class='percent'></span>...</h6><span class=\"close\" file-id=\"" + mFile.id + "\">&times;</span></div>");
						$(upContainer).append("<div class=\"progress\" file-id=\"" + mFile.id + "\"><div class=\"progress-bar progress-bar-striped active\" role=\"progressbar\" aria-valuenow=\"0\" aria-valuemin=\"0\" aria-valuemax=\"100\" style=\"width: 0%\"><span class=\"sr-only\"></span></div></div>");
					}
					$(upContainer).find(".close").click(function() {
						var divOfTheFile = $("div[file-id='" + $(this).attr("file-id") + "']");
						divOfTheFile.fadeOut(500, null, function() {
							divOfTheFile.remove();
						});
					});
					uploader.start();

					//plupload.formatSize(file.size)
				},
				FileUploaded: function(up, file, response) {
					$("div[file-id='" + file.id + "'] h6").text("上传完成");
					setTimeout(function() {
						$("div[file-id='" + file.id + "']").remove();
					}, 1000);

					if(options.FileUploaded) {
						options.FileUploaded(up, file, response);
					}
				},
				UploadProgress: function(up, file) {
					$("div[file-id='" + file.id + "'] .percent").text("(" + file.percent + "%)");
					$("div[file-id='" + file.id + "'] .progress-bar").css("width", file.percent + "%");

					if(options.UploadProgress) {
						options.UploadProgress(up, file);
					}
				},
				Error: function(up, err) {
					//err.message  err.code
					if(options.Error) {
						options.Error(up, err);
					}
				}
			}
		});
		uploader.init();
	};

	/*
	 * 标签式查询
	 * */
	$.initSearchControls4TagMode = function(options) {
		var defOptions = {
			auto: false,
			url: "",
			grid: "",
			container: ".search",
			key_name: "key",
			key_placeholder: "输入关键字查询"
		};
		options.key_name = options.keyName || options.key_name;
		options.key_placeholder = options.keyPlaceholder || options.key_placeholder;
		options = $.extend({}, defOptions, options);
		//$(options.container).empty();
		//search key
		var searchKeyContainer = $("<div class=\"form-inline\"></div>");
		//keyword
		searchKeyContainer.append("<input class=\"form-control form-control-search\" type=\"search\" placeholder=\"" + options.key_placeholder + "\" /> ");
		//search button
		searchKeyContainer.append("<button type=\"button\" class=\"btn btn-default btn-search\" role-auth=\"os/roles|get\"><i class=\"fa fa-search\"></i> 查 询</button>");
		$(options.container).append(searchKeyContainer);
		//crumbs
		var crumbContainer = $("<div class=\"form-inline form-inline-new form-crumb\"></div>");
		//tags
		var tagsDom = $("<ol class=\"breadcrumb tags\"></ol>");
		//collapse button
		tagsDom.append("<li class=\"collapse\"><button type=\"button\" class=\"btn btn-default btn-sm btn-collapse\"><span>收起筛选</span> <i class=\"fa fa-chevron-up\"></i></button></li>");
		//title
		tagsDom.append("<li class=\"title\">筛选 <i class=\"fa fa-angle-right\"></i></li> ");

		//clear button
		tagsDom.append("<li class='tag-clear'><button type=\"button\" class=\"btn btn-default btn-sm btn-clear\"><i class=\"fa fa-trash-o\"></i> 清除筛选</button></li>");
		crumbContainer.append(tagsDom);
		//groups
		var groupsDom = $("<div class=\"groups\"></div>");
		//条件列表
		if(options.groups && options.groups.length > 0) {
			for(var i in options.groups) {
				var groupData = options.groups[i];
				groupsDom.append("<hr>");
				var groupDom = $("<ol class=\"breadcrumb group\" tag='" + groupData.name + "'></ol>");
				groupDom.data("group", groupData);
				groupDom.append("<li class=\"title\">" + groupData.text + "：</li>");
				if(groupData.items && groupData.items.length > 0) {
					for(var j in groupData.items) {
						var groupItemData = groupData.items[j];
						groupDom.append("<li class=\"item\"><label><input type=\"checkbox\" key=\"" + groupItemData.key + "\" value=\"" + groupItemData.value + "\" /> " + groupItemData.key + "</label></li>");
					}
				}
				groupsDom.append(groupDom);
			}
		}
		crumbContainer.append(groupsDom);
		$(options.container).append(crumbContainer);

		var selectedTagsData = {};
		//条件选择
		$(options.container + " .group .item :checkbox").change(function() {
			//clear
			$(options.container + " .tags li.tag").remove();
			var selectTags = {};
			$(options.container + " .group .item :checkbox:checked").each(function() {
				var groupData = $(this).parent().parent().parent().data("group");
				if(groupData) {
					if(!selectTags[groupData.text]) {
						selectTags[groupData.text] = {
							items: [],
							name: groupData.name
						};
					}
					selectTags[groupData.text].items.push({
						key: $(this).attr("key"),
						value: $(this).val()
					});
				}
			});
			selectedTagsData = {};
			for(var i in selectTags) {
				var tagData = selectTags[i];
				var tagText = i + "：";
				selectedTagsData[tagData.name] = [];
				for(var j in tagData.items) {
					if(j > 0) {
						tagText += "，";
					}
					tagText += tagData.items[j].key;
					selectedTagsData[tagData.name].push(tagData.items[j].value);
				}
				$(options.container + " .tags li.tag-clear").before(" <li class=\"tag\">" + tagText + " <i class=\"fa fa-close\" tag='" + tagData.name + "'></i></li>");
			}
			//init close
			initTagCloseEvent();
			//reset grid height
			setGridHeight();
			//change
			tagChangeCallback();
		});
		//收起
		var tmpWindowHeight = localStorage["_IFRAMEHEIGHT"] || $(window).height();
		var setGridHeight = function() {
			//122 = pager height 55 + table header 37 + body padding 10 + content margin-top 10;
			if(options.grid) {
				$(options.grid).jqGrid('setGridHeight', (tmpWindowHeight - $(".remark").outerHeight(true) - $(options.container).outerHeight(true) - 125) + "px");
			}
		};
		$(options.container + " .btn-collapse").click(function() {
			$(options.container + " .groups").toggle();
			if($(this).find("i.fa").hasClass("fa-chevron-up")) {
				$(this).find("i.fa").removeClass("fa-chevron-up").addClass("fa-chevron-down");
				$(this).find("span").text("显示筛选");
			} else {
				$(this).find("i.fa").removeClass("fa-chevron-down").addClass("fa-chevron-up");
				$(this).find("span").text("收起筛选");
			}
			//set height
			setGridHeight();
		});
		//清除条件
		$(options.container + " .btn-clear").click(function() {
			//remove tag
			$(options.container + " .tags li.tag").remove();
			//clear checked
			$(options.container + " .group .item :checkbox").removeAttr("checked");
			//reload
			tagChangeCallback();
		});
		//删除条件
		var initTagCloseEvent = function() {
			$(options.container + " .tags .tag .fa-close").click(function() {
				//remove tag
				$(this).parent().remove();
				$(options.container + " .group[tag='" + $(this).attr("tag") + "'] :checkbox").removeAttr("checked");
				//reset grid height
				setGridHeight();
				//reload
				tagChangeCallback();
			});
		};
		//查询
		$(options.container + " .btn-search").click(function() {
			tagChangeCallback();
		});
		//重新加载数据
		var tagChangeCallback = function() {
			var selectTags = {};
			$(options.container + " .group .item :checkbox:checked").each(function() {
				var groupData = $(this).parent().parent().parent().data("group");
				if(groupData) {
					if(!selectTags[groupData.name]) {
						selectTags[groupData.name] = [];
					}
					selectTags[groupData.name].push($(this).val());
				}
			});
			//keyword
			selectTags[options.key_name] = $(options.container + " .form-control-search").val();
			//alert(JSON.stringify(selectTags));
			if(options.beforeReloadGrid) {
				options.beforeReloadGrid(selectTags);
			}
			if(options.auto) {
				$(options.grid).jqGrid('setGridParam', {
					page: 1,
					url: options.url + $.toQueryString(selectTags, true)
				}).trigger("reloadGrid", {});
			}
			if(options.onChange) {
				options.onChange(selectTags);
			}
		};

		//reset grid height
		setGridHeight();
	};

	/*
	 * 添加页面备注信息
	 * */
	if(w.self != w.top) {
		var moduleId = $.getQueryObject().mid;
		if(moduleId) {
			var descDatas = JSON.parse(localStorage["_PAGEDESC"] || "{}");
			if(descDatas) {
				var descData = descDatas[moduleId];
				if(descData) {
					descData.icon && $(".page-container>.remark>.fa").removeClass("fa-list-ol").addClass(descData.icon);
					descData.desc && $(".page-container>.remark>span").text(descData.desc);
				}
			}
		}
	}

	/*
	 * 录入限制
	 * */
	inputLimit();
}(jQuery, window, document));

/*
 * Function extend
 * */
// 对Date的扩展，将 Date 转化为指定格式的String
// 月(M)、日(d)、小时(h)、分(m)、秒(s)、季度(q) 可以用 1-2 个占位符， 
// 年(y)可以用 1-4 个占位符，毫秒(S)只能用 1 个占位符(是 1-3 位的数字) 
// 例子： 
// (new Date()).Format("yyyy-MM-dd hh:mm:ss.S") ==> 2006-07-02 08:09:04.423 
// (new Date()).Format("yyyy-M-d h:m:s.S")      ==> 2006-7-2 8:9:4.18 
Date.prototype.Format = function(fmt) {
	if(!this) {
		return '';
	}

	var o = {
		"M+": this.getMonth() + 1, //月份 
		"d+": this.getDate(), //日 
		"h+": this.getHours(), //小时 
		"m+": this.getMinutes(), //分 
		"s+": this.getSeconds(), //秒 
		"q+": Math.floor((this.getMonth() + 3) / 3), //季度 
		"w": "日一二三四五六".charAt(this.getDay()), //星期
		"S": this.getMilliseconds() //毫秒 
	};
	if(/(y+)/.test(fmt)) fmt = fmt.replace(RegExp.$1, (this.getFullYear() + "").substr(4 - RegExp.$1.length));
	for(var k in o)
		if(new RegExp("(" + k + ")").test(fmt)) fmt = fmt.replace(RegExp.$1, (RegExp.$1.length == 1) ? (o[k]) : (("00" + o[k]).substr(("" + o[k]).length)));
	return fmt;
};
//数字转中文  仅支持0-9999
$.transNumberToChinese = function(number) {
	var chineseArr = ["零", "一", "二", "三", "四", "五", "六", "七", "八", "九"],
		chineseText = "";
	if(number > 9999) {
		throw new Error("超出最大范围");
		return false;
	} else if(number < 0) {
		throw new Error("小于最小范围");
		return false;
	} else {
		var qian = parseInt(number / 1000),
			bai = parseInt(number / 100) > 10 ? parseInt(number / 100) % 10 : parseInt(number / 100),
			shi = parseInt(number / 10) > 10 ? parseInt(number / 10) % 10 : parseInt(number / 10);
		if(qian) {
			chineseText = chineseArr[qian] + "千" + chineseArr[bai] + "百" + chineseArr[shi] + "十" + (!chineseArr[number % 10] ? "" : chineseArr[number % 10]);
			return chineseText;
		}
		if(!qian && bai) {
			chineseText = chineseArr[bai] + "百" + chineseArr[shi] + "十" + (!chineseArr[number % 10] ? "" : chineseArr[number % 10]);
			return chineseText;
		}
		if(!qian && !bai && shi) {
			chineseText = chineseArr[shi] + "十" + (!chineseArr[number % 10] ? "" : chineseArr[number % 10]);
			return chineseText;
		} else {
			chineseText = chineseArr[number % 10];
			return chineseText;
		}
	}
}
//获取时间戳
Date.prototype.getTimestamp = function() {
	return Math.round(this.getTime() / 1000);
};
//时间戳转日期
function changeDate(dateStr, isChange) {
	//console.log(dateStr)
	if(!dateStr) return "";
	var date = "";
	isChange == "" ? false : isChange;
	dateStr=dateStr.toString();
	var newTime = $.timeNow().Format("yyyy-MM-dd");
	if(dateStr.indexOf("/")>=0||dateStr.indexOf("-")>=0) {
		var d=new Date(dateStr.replace(/-/g,"/"));
	} else {
		var d = new Date(parseFloat(dateStr) * 1000); //根据时间戳生成的时间对象
	}
	var year = d.getFullYear();
	var month = (d.getMonth() + 1) > 9 ? (d.getMonth() + 1) : "0" + (d.getMonth() + 1);
	var _date = d.getDate() > 9 ? d.getDate() : "0" + d.getDate();
	var min = d.getMinutes() > 9 ? d.getMinutes() : "0" + d.getMinutes();
	var sec = d.getSeconds() > 9 ? d.getSeconds() : "0" + d.getSeconds();
	date = year + "-" + month + "-" + _date + " " + (d.getHours() > 9 ? d.getHours() : "0" + d.getHours()) + ":" + min + ":" + sec;
	//console.log(date)
	return date;

};
Date.prototype.addDay = function(value) {
	return new Date(this.setDate(this.getDate() + value));
}
Date.prototype.addMonth = function(value) {
	return new Date(this.setMonth(this.getMonth() + value));
}
Date.prototype.addHour = function(value) {
	return new Date(this.setHours(this.getHours() + value));
}

//IE8 Array indexOf 
if(!Array.prototype.indexOf) {
	Array.prototype.indexOf = function(elt) {
		var len = this.length >>> 0;
		var from = Number(arguments[1]) || 0;
		from = (from < 0) ? Math.ceil(from) : Math.floor(from);
		if(from < 0)
			from += len;
		for(; from < len; from++) {
			if(from in this &&
				this[from] === elt)
				return from;
		}
		return -1;
	};
}
/*
*  方法:Array.remove(val)
*  功能:根据元素值删除数组元素.
*  参数:元素值
*  返回:在原数组上修改数组
Array.prototype.indexOf = function (val) {
    for (var i = 0; i < this.length; i++) {
        if (this[i] == val) {
            return i;
        }
    }
    return -1;
};
Array.prototype.remove = function (val) {
    var index = this.indexOf(val);
    if (index > -1) {
        this.splice(index, 1);
    }
};
*/

function removeArray(source, val) {
	var index = -1;
	for(var i = 0; i < source.length; i++) {
		if(source[i] == val) {
			index = i;
			break;
		}
	}
	if(index >= 0) {
		source.splice(index, 1);
	}
}

function getIndexOfArray(source, fieldName, val) {
	var index = -1;
	for(var i = 0; i < source.length; i++) {
		var model = source[i];
		if(model[fieldName] == val) {
			index = i;
			break;
		}
	}
	return index;
}

function removeArrayByField(source, fieldName, val) {
	var index = getIndexOfArray(source, fieldName, val);
	if(index >= 0) {
		source.splice(index, 1);
	}
}

//url 参数
function GetQueryString(name) {
	var reg = new RegExp("(^|&)" + name + "=([^&]*)(&|$)");
	var r = window.location.search.substr(1).match(reg);
	if(r != null) return unescape(r[2]);
	return null;
}

//默认图片设置
var defImgPath = "/Resources/Images/def.jpg";

function SetDefImg(obj) {
	$(obj).attr("src", defImgPath);
}

//自定义Ajax提交
var currAjaxIsPosting = false;

function CustomAjax(url, data, successcallback, btn) {
	if(currAjaxIsPosting) {
		return;
	}
	var oldBtnValue = $(btn).val();

	$(btn).val("提交中...");

	currAjaxIsPosting = true;
	$.ajax({
		type: 'POST',
		url: url,
		data: data,
		success: function(response) {
			currAjaxIsPosting = false;
			$(btn).val(oldBtnValue);
			if(successcallback)
				successcallback(response);
		},
		error: function(XMLHttpRequest, textStatus, errorThrown) {
			$(btn).val(oldBtnValue);
			currAjaxIsPosting = false;
			alert("错误代码：" + textStatus);
		}
	});
}

/*
 * 录入限制
 * */
function inputLimit() {
	$("input[data-type]").keyup(function() {
		//光标
		var pos = getTxtCursorPosition($(this)[0]);

		var cObj = this;
		//type
		var typeVal = $(cObj).attr("data-type");
		var typeValArr = typeVal.split("|");
		var type = typeValArr[0];
		var isInt = type == "int";
		var isFloat = type == "float";
		if(!isInt && !isFloat) {
			return false;
		}
		//		var maxVal = typeValArr[1],
		//			minVal = typeValArr[2],
		var pointLength = parseInt(typeValArr[1]);
		if(!pointLength || isNaN(pointLength)) {
			pointLength = 2;
		}
		//value
		var oval = $(cObj).attr("oval");
		var cval = $(cObj).val().replace(/e/g, "").replace(/\s/g, "");
		if(isInt)
			cval = cval.replace(".", "");
		if(!oval && isNaN(cval)) {
			$(cObj).val("");
			//光标
			setTxtCursorPosition($(this)[0], pos - 1);
			return false;
		}
		if(oval && !cval) {
			$(cObj).val("");
			$(cObj).attr("oval", "");
			//光标
			setTxtCursorPosition($(this)[0], pos - 1);
			return false;
		}
		if(oval && (!cval || isNaN(cval))) {
			$(cObj).val(oval);
			//光标
			setTxtCursorPosition($(this)[0], pos - 1);
			return false;
		}
		//fix
		if(isFloat) {
			cval = (cval).replace(/^(.*\..{2}).*$/, "$1");
		}
		$(cObj).val(cval);
		$(cObj).attr("oval", cval);
		//光标
		setTxtCursorPosition($(this)[0], pos);
		//for IE bug
		$(this).trigger("change");
	});
	$("input[data-type]").each(function() {
		$(this).attr("oval", $(this).val());
	});
};

////计算两个时间相差的天数
$.getTwoDaysDistance = function(beforeDay, afterDay) {
	var distance = ((new Date(changeDate(afterDay.replace(/-/g,"/")))).getDate()) - ((new Date(changeDate(beforeDay.replace(/-/g,"/")))).getDate());
	return distance;
};

function getTxtCursorPosition(dom) {
	var oTxt1 = dom;
	var cursurPosition = -1;
	if(oTxt1.selectionStart) { //非IE浏览器
		cursurPosition = oTxt1.selectionStart;
	} else { //IE
		var range = document.selection.createRange();
		range.moveStart("character", -oTxt1.value.length);
		cursurPosition = range.text.length;
	}
	return cursurPosition;
}

function setTxtCursorPosition(dom, i) {
	var oTxt1 = dom;
	var cursurPosition = -1;
	if(oTxt1.selectionStart) { //非IE浏览器
		oTxt1.selectionStart = i;
		oTxt1.selectionEnd = i;
	} else { //IE
		var range = oTxt1.createTextRange();
		range.move("character", i);
		range.select();
	}
}

//Grid Pager icons replace
function updatePagerIcons(table, pager, count) {
	table = "#gbox_" + table.substring(1);
	$(table + " " + pager + "_center td[dir='ltr']:first .s-count").remove();
	$(table + " " + pager + "_center td[dir='ltr']:first").append("<span class='s-count'>，" + count + " 条</span>");
	if($(table).attr("icon-ok") != "1") {
		var replacement = {
			'ui-icon-seek-first': 'fa fa-angle-double-left bigger-140',
			'ui-icon-seek-prev': 'fa fa-angle-left bigger-140',
			'ui-icon-seek-next': 'fa fa-angle-right bigger-140',
			'ui-icon-seek-end': 'fa fa-angle-double-right bigger-140'
		};
		$(table + ' .ui-pg-table:not(.navtable) > tbody > tr > .ui-pg-button > .ui-icon').each(function() {
			var icon = $(this);
			var $class = $.trim(icon.attr('class').replace('ui-icon', ''));
			if($class in replacement) icon.attr('class', 'ui-icon ' + replacement[$class]);
		});
		$(table + " " + pager + "_left").insertAfter($(table + " " + pager + "_center")).width(5);
		$(table + " " + pager + "_center select.ui-pg-selbox:first").addClass("hide");
		$(table).attr("icon-ok", "1");
	}

}
//添加表格底部左侧菜单
function bindGridFooterLeftButtons(table, pager, footerBtnContainer) {
	var tableSelector = table.substring(1);
	table = "#gbox_" + tableSelector;
	if($(table).attr("f-btn-ok") != "1") {
		footerBtnContainer = footerBtnContainer || "#grid-footer-container";
		var gridfootercontainer = $(footerBtnContainer);
		if(gridfootercontainer) {
			$(gridfootercontainer).find("[show-on]").hide();
			$(table + " " + pager + "_right").append("<span class='lblSelectRowCount'><span>").append($(gridfootercontainer).html());
			$(gridfootercontainer).html("");
			$(table).attr("f-btn-ok", "1");
		}
	}
}

//表单输入验证
function inputValidation(container) {
	container = container || $("body");
	//tiptemplate = tiptemplate || "请录入{0}。";
	var inputRes = true;
	$(container).find("[nulltip]").each(function() {
		var resSet = setErrorLabelAfterInput4Validation(this);
		inputRes = inputRes ? resSet : false;
		$(this).unbind("blur").blur(function() {
			setErrorLabelAfterInput4Validation(this);
		});
	});
	return inputRes;
}
//表单输入验证
function inputValidateForGritter(container, positionclass) {
	container = container || "body";
	var inputRes = true;
	$(container + " [nulltip]," + container + " [valitype]").each(function() {
		var cValue = $(this).val();
		//ie
		if($(this).attr("placeholder") == cValue)
			cValue = null;
		if(!cValue) {
			var nulltip = $(this).attr("nulltip");
			$.clearGritter();
			$.showErrorGritter("{N} 不能为空，请输入。".replace(/{N}/g, nulltip), {
				time: 3000,
				position: positionclass
			});
			$(this).focus();

			inputRes = false;
			return false;
		} else {
			var valitype = $(this).attr("valitype");
			var tipTxt = "";
			if(valitype == "mobile") {
				inputRes = mobileValidate(cValue);
				tipTxt = "手机号码格式有误，请检查，<br>（如：13883000000）";
			} else if(valitype == "email") {
				inputRes = emailValidate(cValue);
				tipTxt = "邮箱格式有误，请检查，<br>（如：name@baidu.com）";
			} else if(valitype == "password") {
				var rangeArr = $(this).attr("valirange").split('-');
				if(cValue.length > parseInt(rangeArr[1]) || cValue.length < parseInt(rangeArr[0])) {
					inputRes = false;
				}
				tipTxt = $(this).attr("valitip");
			} else if(valitype == "url") {
				inputRes = urlValidate(cValue);
				tipTxt = "网络地址有误，请检查，<br>（如：http://t.cn）";
			} else if(valitype == "tel") {
				inputRes = telValidate(cValue);
				tipTxt = "电话号码有误，请检查，<br>（如：023-8666666、98988888）";
			}
			if(!inputRes) {
				$.clearGritter();
				$.showErrorGritter(tipTxt, {
					time: 3000,
					position: positionclass
				});
				$(this).focus();
				return false;
			}
		}
	});
	return inputRes;
}
//手机号码验证
function mobileValidate(mobile) {
	return /^(((13[0-9]{1})|(17[0-9]{1})|(15[0-9]{1})|(18[0-9]{1}))+\d{8})$/.test(mobile);
}
//号码验证
function telValidate(tel) {
	return /^\d{3,4}-?\d{7,8}$/.test(tel) || /^[0-9]{7,8}$/.test(tel);
}

//邮箱验证
function emailValidate(email) {
	return /^(\w-*\.*)+@(\w-?)+(\.\w{2,})+$/.test(email);
}
//网址
function urlValidate(url) {
	var reg = new RegExp();
	reg.compile("^[A-Za-z]+://[A-Za-z0-9-_]+\\.[A-Za-z0-9-_%&\?\/.=]+$");
	return reg.test(url);
}

function setErrorLabelAfterInput4Validation(obj) {
	var cValue = $(obj).val();
	var cTip = $(obj).attr("nulltip");
	var hasError = $(obj).parent().hasClass("has-error");
	if(!cValue) {
		if(!hasError) {
			$(obj).parent().addClass("has-error");
			$(obj).after("<span class=\"label-error\">请录入" + cTip + "</span>");
			//$.modal().alert(tiptemplate.replace("{0}", cTip));
		}

		//inputRes = false;
		return false;
	} else {
		if(hasError) {
			$(obj).parent().removeClass("has-error");
			$(obj).parent().find(".label-error").remove();
		}
	}

	return true;
}
/* Function end */
/*
 * Controller
 * */
function Model(value) {
	this._value = typeof value === 'undefined' ? '' : value;
	this._listeners = [];
}
Model.prototype.set = function(value) {
	var self = this;
	self._value = value;
	setTimeout(function() {
		self._listeners.forEach(function(listener) {
			listener.call(self, value);
		});
	});
};
Model.prototype.watch = function(listener) {
	this._listeners.push(listener);
};
Model.prototype.bind = function(node) {
	this.watch(function(value) {
		//设置值到页面     
		var tagName = node.tagName;
		if(tagName == "INPUT" || tagName == "SELECT") {
			var typeName = node.getAttribute("type");
			if(typeName == "checkbox") {
				node.checked = value;
			} else if(typeName == "radio") {
				var radioes = document.getElementsByName(node.name);
				for(var i = 0; i < radioes.length; i++) {
					radioes[i].checked = (radioes[i].value == value);
				}
			} else {
				node.value = value;
			}
		} else {
			node.innerHTML = value;
		}
	});

	//listen change event
	var mPrototype = this;
	if(node) {
		mPrototype._value = node.value;
		node.onchange = function() {
				var typeName = this.getAttribute("type");
				if(typeName == "checkbox") {
					mPrototype._value = this.checked;
				} else {
					mPrototype._value = this.value;
				}
			}
			//		node.addEventListener("change", function() {
			//			var typeName = this.getAttribute("type");
			//			if (typeName == "checkbox") {
			//				mPrototype._value = this.checked;
			//			} else
			//				mPrototype._value = this.value;
			//				
			//				alert(this.value);
			//		});
	}
};

function Controller(container, callback) {
	var models = {};
	var views = Array.prototype.slice.call(document.querySelectorAll((container || '') + ' [bind]'), 0);
	views.forEach(function(view) {
		var modelName = view.getAttribute('bind');
		(models[modelName] = models[modelName] || new Model()).bind(view);
	});
	if(callback)
		callback.call(this, models);

	//return JSON object
	this.getJSON = function() {
		var resJson = {};
		for(var p in models) {
			if(p.indexOf("__") == 0) {
				continue;
			}
			if(typeof(models[p]) == "object") {
				resJson[p] = models[p]._value;
			}
		}
		return resJson;
	};

	//set value
	this.set = function(model) {
		for(p in model) {
			if(!p || p == "") {
				continue;
			}
			if(!models[p]) {
				models[p] = models[p] || new Model();
			}
			models[p].set(model[p]);
		}
		return models;
	};
	//return models;
}
/* Controller end */

/* 
 * 右键菜单
 * Copyright Jacob Kelley
 * MIT License
 */

var context = context || (function() {

	var options = {
		fadeSpeed: 100,
		filter: function($obj) {
			// Modify $obj, Do not return
		},
		above: 'auto',
		preventDoubleContext: true,
		compress: false
	};

	function initialize(opts) {

		options = $.extend({}, options, opts);

		$(document).on('click', 'html', function() {
			$('.dropdown-context').fadeOut(options.fadeSpeed, function() {
				$('.dropdown-context').css({
					display: ''
				}).find('.drop-left').removeClass('drop-left');
			});
		});
		if(options.preventDoubleContext) {
			$(document).on('contextmenu', '.dropdown-context', function(e) {
				e.preventDefault();
			});
		}
		$(document).on('mouseenter', '.dropdown-submenu', function() {
			var $sub = $(this).find('.dropdown-context-sub:first'),
				subWidth = $sub.width(),
				subLeft = $sub.offset().left,
				collision = (subWidth + subLeft) > window.innerWidth;
			if(collision) {
				$sub.addClass('drop-left');
			}
		});

	}

	function updateOptions(opts) {
		options = $.extend({}, options, opts);
	}

	function buildMenu(data, id, subMenu) {
		var subClass = (subMenu) ? ' dropdown-context-sub' : '',
			compressed = options.compress ? ' compressed-context' : '',
			$menu = $('<ul class="dropdown-menu dropdown-context' + subClass + compressed + '" id="dropdown-' + id + '"></ul>');
		var i = 0,
			linkTarget = '';
		for(i; i < data.length; i++) {
			if(typeof data[i].divider !== 'undefined') {
				$menu.append('<li class="divider"></li>');
			} else if(typeof data[i].header !== 'undefined') {
				$menu.append('<li class="nav-header">' + data[i].header + '</li>');
			} else {
				if(typeof data[i].href == 'undefined') {
					data[i].href = 'javascript:;';
				}
				if(typeof data[i].target !== 'undefined') {
					linkTarget = ' target="' + data[i].target + '"';
				}
				if(typeof data[i].subMenu !== 'undefined') {
					$sub = ('<li class="dropdown-submenu"><a tabindex="-1" href="' + data[i].href + '">' + data[i].text + '</a></li>');
				} else {
					$sub = $('<li><a tabindex="-1" href="' + data[i].href + '"' + linkTarget + '>' + data[i].text + '</a></li>');
				}
				if(typeof data[i].action !== 'undefined') {
					var actiond = new Date(),
						actionID = 'event-' + actiond.getTime() * Math.floor(Math.random() * 100000),
						eventAction = data[i].action;
					$sub.find('a').attr('id', actionID);
					$('#' + actionID).addClass('context-event');
					$(document).on('click', '#' + actionID, eventAction);
				}
				$menu.append($sub);
				if(typeof data[i].subMenu != 'undefined') {
					var subMenuData = buildMenu(data[i].subMenu, id, true);
					$menu.find('li:last').append(subMenuData);
				}
			}
			if(typeof options.filter == 'function') {
				options.filter($menu.find('li:last'));
			}
		}
		return $menu;
	}

	function addContext(selector, data) {

		var d = new Date(),
			id = d.getTime(),
			$menu = buildMenu(data, id);

		$('body').append($menu);

		$(document).on('contextmenu', selector, function(e) {
			e.preventDefault();
			e.stopPropagation();

			$('.dropdown-context:not(.dropdown-context-sub)').hide();

			$dd = $('#dropdown-' + id);
			if(typeof options.above == 'boolean' && options.above) {
				$dd.addClass('dropdown-context-up').css({
					top: e.pageY - 20 - $('#dropdown-' + id).height(),
					left: e.pageX - 13
				}).fadeIn(options.fadeSpeed);
			} else if(typeof options.above == 'string' && options.above == 'auto') {
				$dd.removeClass('dropdown-context-up');
				var autoH = $dd.height() + 12;
				if((e.pageY + autoH) > $('html').height()) {
					$dd.addClass('dropdown-context-up').css({
						top: e.pageY - 20 - autoH,
						left: e.pageX - 13
					}).fadeIn(options.fadeSpeed);
				} else {
					$dd.css({
						top: e.pageY + 10,
						left: e.pageX - 13
					}).fadeIn(options.fadeSpeed);
				}
			}
		});
	}

	function destroyContext(selector) {
		$(document).off('contextmenu', selector).off('click', '.context-event');
	}

	return {
		init: initialize,
		settings: updateOptions,
		attach: addContext,
		destroy: destroyContext
	};
})();
//初始右键菜单
setTimeout(function() {
	try {
		if(self != top) {
			//初始右键菜单
			context.init({
				preventDoubleContext: false
			});
			context.settings({
				compress: true
			});

			context.attach('html', [{
				header: '功能菜单'
			}, {
				divider: true
			}, {
				text: '刷新页面',
				action: function(e) {
					e.preventDefault();
					location.reload();
				}
			}, {
				text: '关闭页面',
				action: function(e) {
					e.preventDefault();
					parent.closeCurrActiveTab();
				}
			}, {
				text: '禁用菜单',
				action: function(e) {
					e.preventDefault();
					context.destroy('html');
				}
			}]);
		}
	} catch(e) {}
}, 500);
//光标输入
function cursorInsertion(con, dom) {

}
//选择部门或者选择员工时,获取默认选择的数组
function getDefualtCheckedIdsArr(itemSelect,idAttr){
	var idsArr=[];
	$(itemSelect).each(function(){
		idsArr.push($(this).attr(idAttr));
	});
	return idsArr;
}
