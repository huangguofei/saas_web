$("html").css("height", "100%");
$(".page-container .content .left-menu").css("height", $("html").outerHeight(true));
$(".remark").addClass("hide");
(function($, w, d) {
	//控制所有textarea录入长度为500  没有maxlength属性的input录入长度为50
	$("textarea").each(function() {
		if(!$(this).attr("maxlength")) $(this).attr("maxlength", 500);
	});
	$("input[type='text']").each(function() {
		if(!$(this).attr("maxlength")) $(this).attr("maxlength", 50);
	});
	//控制type=number的input的maxlength属性
	$(document).on("keyup", "input[type='number']", function() {
		if(!$(this).attr("maxlength")) return;
		var maxlengthContr = parseInt($(this).attr("maxlength"));
		$(this).val($(this).val().substring(0, maxlengthContr));
		$(this).change();
	});
	$(document).on("keydown", "form input", function(e) {
		if(e.keyCode == 13) {
			e.preventDefault();
			e.stopPropagation();
		}
	});
	//扩展number的replace
	Number.prototype.replace = function(arg1, arg2) {
		if(typeof(arg1) == "string") {
			return((this).toString()).replace(arg1, arg2);
		} else {
			return((this).toString()).replace(new RegExp(arg1), arg2);
		}

	}
})(jQuery, window, document);
(function($, w, d) {
	/* 
	 * jQuery扩展 
	 * 
	 * */

	//权限判断
	var CURRAUTHS = localStorage["_CURRAUTHS"] == undefined ? "" : JSON.parse(localStorage["_CURRAUTHS"]);

	if(!CURRAUTHS) {
		$("a[role-auth],input[role-auth],button[role-auth]").attr("disabled", "disabled").removeAttr("onclick");
	} else {
		$("a[role-auth],input[role-auth],button[role-auth]").each(function() {
			var authArr = $(this).attr("role-auth").split('|');
			var cVal = CURRAUTHS[authArr[0]];
			if(!cVal || cVal.indexOf(authArr[1]) < 0) {
				$(this).removeAttr("onclick").click(function() {
					$.showErrorGritter("无权限操作该数据。");
				}).attr("disabled", "disabled");
			}
		});
	}

	w.TOP_HEIGHT = 120;
	//开启DEBUG
	w.DEBUG = true;
	//企业Id
	w.COMPANYID = "01E3D2AF-CA22-3320-73F7-9FBAEC75F018";
	//全局token
	w.OSTOKEN = "";
	//全局token类型
	w.OSTOKENTYPE = "";
	w.OSAPIBASEURL = "http://api.saas.com";
	//API主域
	w.BASEAPIURL = "http://api.saas.com";
	//OS API域（运营）
	w.OSAPIURL = OSAPIBASEURL + "/os";
	//BS API域（业务）
	w.BSAPIURL = BASEAPIURL + "/saas";
	//IM
	w.BSAPIURLIM = BASEAPIURL + "/im";
	//IM Server
	w.WSSERVER = "192.168.1.252";
	//IM Port
	w.WSPORT = "8012";
	//SAAS API
	w.SAASAPIS = {
		//运营
		OS: {
			//日志
			logs: OSAPIURL + "/logs",
			//版本
			editions: OSAPIURL + "/saas_editions",
			edition: {
				//版本状态
				status: OSAPIURL + "/saas_editions/sale_status",
				//版本标签
				tags: OSAPIURL + "/saas_editions/tags"
			},
			//企业
			companies: OSAPIURL + "/company",
			company: {
				operate_logs: OSAPIURL + "/company/{id}/operate_logs",
				handler_logs: OSAPIURL + "/company/{id}/handler_logs",
				//备注
				remark: OSAPIURL + "/company/{id}/remark",
				//停用/禁用
				status: OSAPIURL + "/company/{id}/status",
				//审核
				verify: OSAPIURL + "/company/{id}/profile_status"
			},
			//代码
			codes: OSAPIURL + "/codes",
			code: {
				class: OSAPIURL + "/codes/class"
			}
		},
		//业务
		BS: {
			//企业
			companies: BSAPIURL + "/company",
			company: {
				check_mobile: BSAPIURL + "/company/mobile/exist",
				//企业模块
				modules: BSAPIURL + "/company/modules",
				//企业状态
				static_count: BSAPIURL + "/companies/01E3D2AF-CA22-3320-73F7-9FBAEC75F018/static_count",
				//企业状态
				status: BSAPIURL + "/company/verify_status",
				verify: {
					mobile: BSAPIURL + "/company/verify/mobile",
					email: BSAPIURL + "/company/verify/email",
					info: BSAPIURL + "/company/verify/company_info"
				},
				//角色
				roles: BSAPIURL + "/companies/roles",
				role: {
					//添加角色
					newrole: BSAPIURL + "/companies/roles/newrole",
					//启用、禁用
					status: BSAPIURL + "/companies/roles/status",
					//设置模块
					modules: BSAPIURL + "/companies/roles/{id}/modules"
				},
				//帐号
				accounts: BSAPIURL + "/companies/accounts",
				account: {
					//添加帐号
					newaccount: BSAPIURL + "/companies/accounts/new_account",
					//启用、停用
					status: BSAPIURL + "/companies/accounts/selected/status",
					//设置角色
					roles: BSAPIURL + "/companies/accounts/{id}/roles"
				},
				//部门
				departments: BSAPIURL + "/companies/01E3D2AF-CA22-3320-73F7-9FBAEC75F018/departments",
				department: {
					//直接子部门
					children: BSAPIURL + "/companies/departments/{id}/children",
					//子部门树
					tree_children: BSAPIURL + "/companies/departments/{id}/tree_children",
					//添加部门
					new_department: BSAPIURL + "/companies/01E3D2AF-CA22-3320-73F7-9FBAEC75F018/departments/new_department",
					//部门负责人
					managers: BSAPIURL + "/companies/01E3D2AF-CA22-3320-73F7-9FBAEC75F018/departments/{id}/managers",
					//负责的部门
					responsible: BSAPIURL + "/companies/01E3D2AF-CA22-3320-73F7-9FBAEC75F018/sub_depa_with_self_depa",
					//修改部门名称
					edit_name: BSAPIURL + "/companies/01E3D2AF-CA22-3320-73F7-9FBAEC75F018/departments/{id}"
				},
				//员工
				employees: BSAPIURL + "/companies/01E3D2AF-CA22-3320-73F7-9FBAEC75F018/employees",
				employees_simple: BSAPIURL + "/companies/01E3D2AF-CA22-3320-73F7-9FBAEC75F018/employees/simple",
				employee: {
					//新员工
					new_employee: BSAPIURL + "/companies/01E3D2AF-CA22-3320-73F7-9FBAEC75F018/employees/new_employee",
					//开通帐号
					accounts: BSAPIURL + "/companies/01E3D2AF-CA22-3320-73F7-9FBAEC75F018/employees/accounts",
					//员工档案
					profile: BSAPIURL + "/companies/employees/{id}/profile",
					profile_base: BSAPIURL + "/companies/01E3D2AF-CA22-3320-73F7-9FBAEC75F018/employees/{id}/profile_base",
					profile_contact: BSAPIURL + "/companies/01E3D2AF-CA22-3320-73F7-9FBAEC75F018/employees/{id}/profile_contact",
					//员工状态
					status: BSAPIURL + "/companies/01E3D2AF-CA22-3320-73F7-9FBAEC75F018/employees/{id}/status",
					//添加状态
					new_status: BSAPIURL + "/companies/01E3D2AF-CA22-3320-73F7-9FBAEC75F018/employees/{id}/status/new_status",
					//调整部门
					change_dept: BSAPIURL + "/companies/01E3D2AF-CA22-3320-73F7-9FBAEC75F018/department/{id}/employees",
					//地图定位
					map_location: BSAPIURL + "/companies/employees/{id}/map_location",
					//上传（导入）
					upload: BSAPIURL + "/companies/01E3D2AF-CA22-3320-73F7-9FBAEC75F018/employees/xls",
					//导入
					import: BSAPIURL + "/companies/01E3D2AF-CA22-3320-73F7-9FBAEC75F018/employees/import_employees"
				},
				//版本
				edition: {
					//企业拥有版本
					my_editions: BSAPIURL + "/companies/my_editions_with_orders",
					//版本购买
					new_edition: BSAPIURL + "/companies/my_editions/new_edition",
					//版本升级
					upgrade: BSAPIURL + "/companies/my_editions/{id}/upgrade",
					//版本续费
					renewals: BSAPIURL + "/companies/my_editions/{id}/renewals",
					//增加账户
					add_accounts: BSAPIURL + "/companies/my_editions/{id}/add_accounts",
					//订单
					orders: BSAPIURL + "/companies/edition_orders",
					order: {
						//状态
						status: BSAPIURL + "/companies/edition_orders/{id}/status",
						//支付
						payment: BSAPIURL + "/companies/edition_orders/{id}/payment",
						//支付凭证
						payment_voucher: BSAPIURL + "/companies/edition_orders/{id}/payment_voucher"
					}
				}
			},
			//帐号
			account: {
				//找回密码
				forgot: {
					step1: BSAPIURL + "/account/find_password/step1",
					step2: BSAPIURL + "/account/find_password/step2",
					step3: BSAPIURL + "/account/find_password/step3"
				},
				//修改密码
				password: BSAPIURL + "/accounts/password",
				//修改手机号码
				mobile: {
					step1: BSAPIURL + "/accounts/mobile_number/step1",
					step2: BSAPIURL + "/accounts/mobile_number/step2",
					step3: BSAPIURL + "/accounts/mobile_number/step3"
				},
				//安全信息
				security_info: BSAPIURL + "/accounts/security_info",
			},
			//个人信息
			employee: {
				//个人档案
				profile: BSAPIURL + "/employees/profile",
				//修改联系方式
				contact: BSAPIURL + "/employees/profile/contact_info",
				//修改头像
				photo: BSAPIURL + "/employees/profile/photo",
				//定位
				profileLocation: BSAPIURL + "/employees/profile/location"
			},
			//模块
			modules: BSAPIURL + "/modules",
			module: {
				sort: BSAPIURL + "/modules/sort"
			},
			//登录
			passport: BSAPIURL + "/passport",
			//上传
			upload: {
				//图片上传
				image: BSAPIURL + "/image",
				//文档
				document: BSAPIURL + "/document",
				//OS图片上传
				osImage: BASEAPIURL + "/os/image",
				//OS文档
				osDocument: BASEAPIURL + "/os/document"
			}, //Im上传
			IMupload: {
				//图片上传
				image: BSAPIURLIM + "/image",
				//文档
				document: BSAPIURLIM + "/document",
				//OS图片上传
				osImage: BASEAPIURL + "/os/image",
				//OS文档
				osDocument: BASEAPIURL + "/os/document"
			},
			//版本
			edition: {
				//在售版本
				sale: BSAPIURL + "/on_sale_editions_with_modules"
			}
		},
		//公共
		BASE: {
			code: {
				//短信验证码
				sms: BASEAPIURL + "/mobile/sms_code",
				//邮件验证码
				email: BASEAPIURL + "/email/sms_code"
			},
			//图片验证码
			captcha: BASEAPIURL + "/captcha"
		}
	};
	/*
	 *ajax 扩展  
	 * */
	$.ajaxPost = function(url, data, successcallback, errorcallback) {
		$.ajaxBase("POST", url, data, successcallback, errorcallback);
	};
	$.ajaxPatch = function(url, data, successcallback, errorcallback) {
		$.ajaxBase("PATCH", url, data, successcallback, errorcallback);
	};
	$.ajaxGet = function(url, successcallback, errorcallback) {
		$.ajaxBase("GET", url, null, successcallback, errorcallback);
	};
	$.ajaxPut = function(url, data, successcallback, errorcallback) {
		$.ajaxBase("PUT", url, data, successcallback, errorcallback);
	};
	$.ajaxByAction = function(action, url, data, successcallback, errorcallback) {
		$.ajaxBase(action == "add" ? "POST" : "PUT", url, data, successcallback, errorcallback);
	};
	$.ajaxDelete = function(url, data, successcallback, errorcallback) {
		$.ajaxBase("DELETE", url, data, successcallback, errorcallback);
	};
	$.ajaxBase = function(type, url, data, successcallback, errorcallback) {
		//IE
		if(!$.support.cors)
			$.support.cors = true;

		//AJAX超时s，0-不超时
		var tmp_timeout = 30000;

		if(type != "GET") {
			if(!data) {
				data = {
					action_type: type
				};
			} else {
				data["action_type"] = type;
			}
			data["_hash"] = OSTOKEN;
			data["_hash_type"] = OSTOKENTYPE;

			if(data["timeout"] && !isNaN(data["timeout"])) {
				tmp_timeout = data["timeout"];
			}
		}
		//xhrFields: {
		//				withCredentials: true
		//			},
		//			crossDomain: true,
		$aj = $.ajax({
			//			xhr: function () {
			//		        var xhr = new window.XMLHttpRequest();
			//		        xhr.upload.addEventListener("progress", function (evt) {
			//		        	//console.log(evt);
			//		            //if (evt.lengthComputable) {
			//		            //    var percentComplete = evt.loaded / evt.total;
			//		            //}
			//		        }, false);
			//		        xhr.addEventListener("progress", function (evt) {
			//		        	//console.log(evt);
			//		            //if (evt.lengthComputable) {
			//		            //    var percentComplete = evt.loaded / evt.total;
			//		            //}
			//		        }, false);
			//		        return xhr;
			//		    },
			type: (type == "GET" ? "GET" : "POST"),
			url: url,
			//30s
			timeout: tmp_timeout,
			data: (!data || data.length == 0) ? "" : JSON.stringify(data),
			//contentType: (type == "GET" ? "text/plain" : "application/json"),
			dataType: "json",
			xhrFields: {
				withCredentials: true
			},
			crossDomain: true,
			complete: function(XMLHttpRequest, status) {
				if(status == 'timeout') {
					$.showErrorGritter("请求超时。");
					$aj.abort();
				}　　
			},
			success: function(response) {
				//保存SessionId
				sessionStorage["session_id"] = response.session_id;
				$.cookie("session_id", response.session_id);
				//fail
				if(response.code > 0) {
					$.processFailResponse(response);
				}
				if(successcallback)
					successcallback(response);

				//refresh token
				if(type != "GET")
					$.token();
			},
			error: function(XMLHttpRequest, textStatus, errorThrown) {
				if(errorcallback)
					errorcallback(textStatus, errorThrown);
				else {
					$.showErrorGritter("服务器返回错误：" + textStatus, {
						time: 3000
					});
				}
				//refresh token
				if(type != "GET")
					$.token();
			}
		});
	};
	//文件下载
	$.downloadFile = function(url, code, name) {
		if(code && name) {
			url = BASEAPIURL + "/file/download?path=" + encodeURIComponent(code) + "&filename=" + name;
		}
		console.log(url);
		var iframe = document.createElement("iframe");
		iframe.src = url;
		iframe.setAttribute("name", "iframeForDownload");
		iframe.setAttribute("url", url);
		iframe.setAttribute("width", "0");
		iframe.setAttribute("height", "0");
		iframe.setAttribute("frameborder", 0);
		iframe.setAttribute("scrolling", "auto");
		iframe.style.position = "absolute";
		if(iframe.attachEvent) {
			iframe.attachEvent("onload", function() {
				removeCurrDownloadIframe();
			});
		} else {
			iframe.onload = function() {
				removeCurrDownloadIframe();
			};
		}
		$("body").append(iframe);
		var removeCurrDownloadIframe = function() {
			setTimeout(function() {
				$("iframe[name='iframeForDownload']").remove();
			}, 100);
		};
	};
	//打开页面
	$.openURL = function(url) {
		$("#form_open").remove();
		$("body").append("<form id=\"form_open\" target=\"_blank\" method=\"get\"></form>");
		$("#form_open").attr("action", url);
		$("#form_open").submit();
	};
	//加载城市数据
	$.loadCityData = function(successCallback) {
		var cacheCityData = JSON.parse(localStorage["_CITY"] || null);
		if(cacheCityData) {
			if(successCallback)
				successCallback(cacheCityData);
			return;
		}
		var cityClassId = 100;
		//get city data
		$.ajaxGet(OSAPIURL + "/codes?class_id=" + cityClassId, function(response) {
			if(response.code != 0) {
				$.showErrorGritter("获取城市数据失败：" + response.msg, {
					time: 3000
				});
			} else {
				var cityDistricts = {};
				var groupNames = ["A-G", "H-K", "L-S", "T-Z"];
				var groupCity = {};
				for(var i in groupNames) {
					groupCity[groupNames[i]] = [];
				}

				var cityData = response.data.class_lists;
				for(var i in cityData) {
					var city = cityData[i];
					if(city.code_tree_parent_id == cityClassId) {
						try {
							var groupName;
							var fix = city.code_short_name[0].toUpperCase();
							if(["A", "B", "C", "D", "E", "F", "G"].indexOf(fix) >= 0) {
								groupName = "A-G";
							}
							if(["H", "I", "J", "K"].indexOf(fix) >= 0) {
								groupName = "H-K";
							}
							if(["L", "M", "N", "O", "P", "Q", "R", "S"].indexOf(fix) >= 0) {
								groupName = "L-S";
							}
							if(["T", "U", "V", "W", "X", "Y", "Z"].indexOf(fix) >= 0) {
								groupName = "T-Z";
							}
							if(!groupName) {
								continue;
							}
							groupCity[groupName].push({
								code: city.code_tree_id,
								address: city.code_name
							});
						} catch(e) {}
					} else {
						if(!cityDistricts[city.code_tree_parent_id]) {
							cityDistricts[city.code_tree_parent_id] = {};
						}
						cityDistricts[city.code_tree_parent_id][city.code_tree_id] = city.code_name;
					}
				}
				for(var i in groupNames) {
					if(groupCity[groupNames[i]].length == 0) {
						delete groupCity[groupNames[i]];
					}
				}
				cityDistricts[86] = groupCity;
				cityDistricts["DataSource"] = cityData;

				localStorage["_CITY"] = JSON.stringify(cityDistricts);
				window.ChineseDistricts = cityDistricts;

				if(successCallback)
					successCallback(cityDistricts);
			}
		});
	};
	//加载行业列表
	$.loadHangyeData = function(successCallback) {
		var cacheHangyeData = JSON.parse(localStorage["_Hangye"] || null);
		if(cacheHangyeData) {
			//			if(successCallback)
			//				successCallback(cacheHangyeData);
			//			return;
		}
		var classId = 102;
		//get city data
		$.ajaxGet(OSAPIURL + "/codes?class_id=" + classId, function(response) {
			if(response.code != 0) {
				$.showErrorGritter("获取行业数据失败：" + response.msg, {
					time: 3000
				});
			} else {
				var hangyeData = response.data.class_lists;

				localStorage["_Hangye"] = JSON.stringify(hangyeData);

				if(successCallback)
					successCallback(hangyeData);
			}
		});
	};
	//加载企业性质列表
	$.loadQYXZData = function(successCallback) {
		var cacheHangyeData = JSON.parse(localStorage["_QYXZ"] || null);
		if(cacheHangyeData) {
			if(successCallback)
				successCallback(cacheHangyeData);
			return;
		}
		var classId = 103;
		//get city data
		$.ajaxGet(OSAPIURL + "/codes?class_id=" + classId, function(response) {
			if(response.code != 0) {
				$.showErrorGritter("获取行业数据失败：" + response.msg, {
					time: 3000
				});
			} else {
				var hangyeData = response.data.class_lists;

				localStorage["_QYXZ"] = JSON.stringify(hangyeData);

				if(successCallback)
					successCallback(hangyeData);
			}
		});
	};
	//加载城市数据(企业端)
	// $.loadCommonCityData(function(cityData) {
	//	 $('[data-toggle="city-picker"]').citypicker({
	//	     level: 'district',
	//		 dataSource: cityData,
	//	 	 province: "",
	//	 	 city: "",
	//       district: ""
	//	 });
	// });
	$.loadCommonCityData = function(successCallback) {
		var cacheCityData = JSON.parse(localStorage["_BS_CITY"] || null);
		if(cacheCityData) {
			if(successCallback)
				successCallback(cacheCityData);
			return;
		}
		var cityClassId = 100;
		//get city data
		$.ajaxGet(BSAPIURL + "/common/codes/" + cityClassId + "/child", function(response) {
			if(response.code != 0) {
				$.showErrorGritter("获取城市数据失败：" + response.msg, {
					time: 3000
				});
			} else {
				var cityDistricts = {};
				var groupNames = ["A-G", "H-K", "L-S", "T-Z"];
				var groupCity = {};
				for(var i in groupNames) {
					groupCity[groupNames[i]] = [];
				}

				var cityData = response.data;
				for(var i in cityData) {
					var city = cityData[i];
					if(city.code_parent_tree == cityClassId) {
						try {
							var groupName;
							var fix = city.code_short_name[0].toUpperCase();
							if(["A", "B", "C", "D", "E", "F", "G"].indexOf(fix) >= 0) {
								groupName = "A-G";
							}
							if(["H", "I", "J", "K"].indexOf(fix) >= 0) {
								groupName = "H-K";
							}
							if(["L", "M", "N", "O", "P", "Q", "R", "S"].indexOf(fix) >= 0) {
								groupName = "L-S";
							}
							if(["T", "U", "V", "W", "X", "Y", "Z"].indexOf(fix) >= 0) {
								groupName = "T-Z";
							}
							if(!groupName) {
								continue;
							}
							groupCity[groupName].push({
								code: city.code_tree,
								address: city.code_name
							});
						} catch(e) {}
					} else {
						if(!cityDistricts[city.code_parent_tree]) {
							cityDistricts[city.code_parent_tree] = {};
						}
						cityDistricts[city.code_parent_tree][city.code_tree] = city.code_name;
					}
				}
				for(var i in groupNames) {
					if(groupCity[groupNames[i]].length == 0) {
						delete groupCity[groupNames[i]];
					}
				}
				cityDistricts[86] = groupCity;
				cityDistricts["DataSource"] = cityData;

				localStorage["_BS_CITY"] = JSON.stringify(cityDistricts);
				window.ChineseDistricts = cityDistricts;

				if(successCallback)
					successCallback(cityDistricts);
			}
		});
	};
	//加载代码表数据 
	$.loadBasicDatasByClassId = function(codeClassId, successCallback) {
		if(localStorage["_CLASSIDS"] && JSON.parse(localStorage["_CLASSIDS"])[codeClassId]) {
			var classIdsData = JSON.parse(localStorage["_CLASSIDS"])[codeClassId];
			for(var i in classIdsData) {
				if(!Object.prototype.isPrototypeOf(classIdsData[i])) delete classIdsData[i];
			}
			if(successCallback)
				successCallback(changeArray(classIdsData));
			return true;
		}
		var classId = codeClassId;
		$.ajaxGet(BSAPIURL + "/companies/" + COMPANYID + "/class/" + classId, function(response) {
			if(response.code != 0) {
				$.showErrorGritter("获取代码失败：" + response.msg, {
					time: 3000
				});
			} else {
				var zxlxData = response.data.code_list;

				//localStorage["_ZXLX"] = JSON.stringify(zxlxData);

				if(successCallback)
					successCallback(zxlxData);
			}
		});
	};
	//加载资讯类型列表
	$.loadZXLXData = function(successCallback) {
		$.loadBasicDatasByClassId(102102, successCallback);
	};
	//加载部门层级列表
	$.loadDeptLevelsData = function(successCallback) {
		$.loadBasicDatasByClassId(102104, successCallback);
	};
	//加载请假类型列表
	$.loadLeaveTypesData = function(successCallback) {
		$.loadBasicDatasByClassId(102106, successCallback);
	};
	//加载职位级别
	$.loadEmployeePostLevelData = function(successCallback) {
		$.loadBasicDatasByClassId(102130, successCallback);
	};
	//加载工作类型
	$.loadWorkTypeData = function(successCallback) {
		$.loadBasicDatasByClassId(102140, successCallback);
	};
	//处理response code > 0
	$.processFailResponse = function(response, isShowAllError) {
		if(response.code == 100000004) {
			//无权限
			$.showErrorGritter("无权限访问该数据。", {
				time: 3000
			});
		} else if(response.code == 100000003 || response.code == 102010038) {
			//未登录或挤出
			$.showErrorGritter("您的登录已过期，请重新登录。", {
				time: 3000
			});
			setTimeout(function() {
				if(w.self != w.top) {
					//w.parent.openReloginPop();
					w.parent.location = "/login.html";
				} else {
					w.location = "/login.html";
				}
			}, 1000);
		} else if(response.code == 102010044) {
			$.showErrorGritter("您使用的角色已被停用,如有疑问请联系管理员", {
				time: 3000
			});
			setTimeout(function() {
				if(w.self != w.top) {
					//w.parent.openReloginPop();
					w.parent.location = "/login.html";
				} else {
					w.location = "/login.html";
				}
			}, 1000);
		} else if(response.code == 102010040) {
			setTimeout(function() {
				$.showErrorGritter("您的账号被停用，如有疑问请联系企业管理员。", {
					time: 3000
				});
				if(w.self != w.top) {
					w.parent.logout("", true);
					//w.parent.location = "/login.html";
				} else {
					w.location = "/login.html";
				}
			}, 1000);
		} else if(response.code == 102010043) {
			$.showErrorGritter("企业被停用，如有疑问请联系客服。", {
				time: 3000
			});
			setTimeout(function() {
				if(w.self != w.top) {
					w.parent.openReloginPop();
					//w.parent.location = "/login.html";
				} else {
					w.location = "/login.html";
				}
			}, 1000);
		} else if(isShowAllError && response.code > 0) {
			//出错
			$.showErrorGritter("服务器返回失败：" + response.msg, {
				time: 3000
			});
		}
	};
	//get token
	$.token = function(callback) {
		if(!OSTOKENTYPE) {
			OSTOKENTYPE = $.uuid();
		}
		$.ajaxGet(OSAPIBASEURL + "/token?type=" + OSTOKENTYPE, function(response) {
			if(response.code != 0) {
				$.showErrorGritter("获取TOKEN失败：" + response.msg, {
					time: 3000
				});
			} else {
				OSTOKEN = response.data.hash;
				if(callback) callback();
			}
		});
	};
	//选择部门公共方法
	$.showDeptSelectPop = function(option) {
		var isAppendDeptWrap = $(".pnl-dept-select-common").length > 0;
		if(!isAppendDeptWrap) {
			$("body").append("<div class=\"pnl-leader-info pnl-dept-select-common hide\">" +
				"	<form class=\"form-horizontal model-leader-info model-dept-select-common\">" +
				"		<div class=\"wrap wrap-source\">" +
				"			<label class=\"label-sub-title\"></label>" +
				"			<div class=\"box\">" +
				"				<ul class=\"tree tree-dept\">" +
				"				</ul>" +
				"			</div>" +
				"		</div>" +
				"	</form>" +
				"</div>");
		}
		//选择部门
		var modalIdOfDept = $.modal().showOfMini("选择部门", ".pnl-dept-select-common",
			function(modal) {
				var selectDepts = [];
				var selectDeptDoms = treeDom4SelectDept.find("li input:checked");
				if(selectDeptDoms.length == 0) {
					$.showErrorGritter("请选择部门。");
					return false;
				}
				selectDeptDoms.each(function() {
					if($(this).attr("cancel") == 1) {
						return true;
					}
					var tmpDeptData = getEffectiveDeptOfChecked($(this));
					if(tmpDeptData && !checkDeptOrParentDeptIsAppendInArr(selectDepts, tmpDeptData)) {
						selectDepts.push(tmpDeptData);
					}
				});
				//回调
				if(option.okCallback) {
					option.okCallback(isMultiple ? selectDepts : selectDepts[0]);
				}
				modal.modal("hide");
			}
		);
		//model pop id 
		var formContainerOfDept = "#" + modalIdOfDept + " .model-dept-select-common";
		$(formContainerOfDept + " .label-sub-title").text(option.subTitle);
		//单选 or 多选
		var isMultiple = option.multiple;
		var inputType = option.multiple ? "checkbox" : "radio";
		//加载部门树
		var treeDom4SelectDept = $(formContainerOfDept + " .tree-dept");
		treeDom4SelectDept.empty();
		$.ajaxGet(SAASAPIS.BS.company.departments.replace("{id}", $.uuid()), function(response) {
			if(response.code == 0) {
				//success
				var deptList = response.data.rows;
				for(var i in deptList) {
					var deptData = deptList[i];
					deptData.depa_tree_code = deptData.depa_id;
					deptData.parent_depa_tree_code = deptData.depa_parent_id;
				}
				appendDeptTreeNode(deptList, 0, treeDom4SelectDept);
				//加载完成
				//已选
				if(option.selectedDeptIds && option.selectedDeptIds.length > 0) {
					for(var i in option.selectedDeptIds) {
						var deptId = option.selectedDeptIds[i];
						$(formContainerOfDept + " .tree-dept label input[value='" + deptId + "']").attr("checked", "checked");
					}
				}
				if(isMultiple) {
					$(formContainerOfDept + " .tree-dept label input").change(function() {
						var mchecked = this.checked;
						if(mchecked) {
							$(this).parent().parent().find("input:checkbox").each(function() {
								this.checked = true;
							});
						} else {
							$(this).parent().parent().find("input:checkbox").attr("checked", false);
						}
						var pid = $(this).attr("pid");
						if(pid) {
							$("#ck" + pid).each(function() {
								if(this.checked && $(this).parent().parent().find("input[id!=ck" + pid + "]:checked").length > 0) {
									return false;
								}
								initParentDeptChecked(pid, mchecked);
							});
						}
					});
				}
			} else {
				$.showErrorGritter("加载部门失败：" + response.msg);
			}
		});
		//子节点选中时同时选中相应父节点
		var initParentDeptChecked = function(pid, checked) {
			if(pid) {
				$("#ck" + pid).each(function() {
					this.checked = checked;
					initParentDeptChecked($(this).attr("pid"), checked);
				});
			}
		};
		//添加部门树
		var appendDeptTreeNode = function(deptList, parentId, treeDom) {
			for(var i in deptList) {
				var deptData = deptList[i];
				if(deptData.parent_depa_tree_code == parentId) {
					if(deptData.depa_name == "未分配部门")
						continue;
					var childDepts = queryChildDepts(deptList, deptData.depa_tree_code);
					var hasChildDept = childDepts.length > 0;
					var liDom = $("<li></li>");
					liDom.attr("gid", parentId);
					liDom.data("dept", deptData);
					liDom.append("<label> <input type=\"" + inputType + "\" class='form-control-radio' name='ckDeptForSelect' id=\"ck" + deptData.depa_tree_code +
						"\" pid=\"" + parentId + "\" value='" + deptData.depa_tree_code + "' data-dept-name=\"" + deptData.depa_name + "\"> " + deptData.depa_name + " </label>");
					if(childDepts.length > 0) {
						appendChildDeptTreeNode(deptList, childDepts, deptData.depa_tree_code, liDom);
					}
					$(treeDom).append(liDom);
				}
			}
		};
		//查找子集
		var queryChildDepts = function(deptList, parentId) {
			var resDeptList = [];
			for(var i in deptList) {
				var deptData = deptList[i];
				if(deptData.parent_depa_tree_code == parentId) {
					resDeptList.push(deptData);
				}
			}
			return resDeptList;
		};
		//添加部门树子节点
		var appendChildDeptTreeNode = function(deptList, childDepts, parentId, treeDom) {
			var ulDom = $("<ul class='items'></ul>");
			for(var i in childDepts) {
				var deptData = childDepts[i];
				if(deptData) {
					if(deptData.depa_type == 1) {
						continue;
					}
					var mchildDepts = queryChildDepts(deptList, deptData.depa_tree_code);
					var hasChildDept = mchildDepts.length > 0;
					var isZhiWu = deptData.depa_type == 1;
					var liDom = $("<li></li>");
					liDom.attr("gid", parentId);
					liDom.data("dept", deptData);
					liDom.append("<label> <input type=\"" + inputType + "\" class='form-control-radio' name='ckDeptForSelect' id=\"ck" + deptData.depa_tree_code +
						"\" pid=\"" + parentId + "\" value='" + deptData.depa_tree_code + "' data-dept-name=\"" + deptData.depa_name + "\"> " + deptData.depa_name + " </label>");
					$(liDom).find(".btn-dept-delete").remove();
				}
				if(hasChildDept) {
					appendChildDeptTreeNode(deptList, mchildDepts, deptData.depa_tree_code, liDom);
				}
				$(ulDom).append(liDom);
			}
			$(treeDom).append(ulDom);
		};
		//检测是否有重复项
		var checkDeptOrParentDeptIsAppendInArr = function(deptList, deptData) {
			var isAppend = false;
			for(var i in deptList) {
				if(deptList[i].dept_id == deptData.dept_id || deptList[i].dept_id == deptData.parent_dept_id ||
					deptData.dept_id.indexOf(deptList[i].dept_id) == 0) {
					isAppend = true;
					break;
				}
			}
			return isAppend;
		};
		//此方法用于过滤自己 如果某节点的子集全部选中 就直接返回当前节点 不返回子集
		var getEffectiveDeptOfChecked = function(checkboxDom) {
			var childrenAlsoChecked = true;
			$(checkboxDom).parent().parent().find("input").each(function() {
				if(!$(this).is(":checked")) {
					childrenAlsoChecked = false;
					return false;
				}
			});
			if($(checkboxDom).attr("type") == "radio") childrenAlsoChecked = true;
			if(childrenAlsoChecked) {
				//自己取消选择
				$(checkboxDom).parent().parent().find("input").attr("cancel", 1);

				var tmpDeptId = checkboxDom.val();
				var tmpDeptName = checkboxDom.data("dept-name");
				var tmpParentDeptId = checkboxDom.attr("pid");
				return {
					dept_id: tmpDeptId,
					dept_name: tmpDeptName,
					parent_dept_id: tmpParentDeptId
				};
			}
			return null;
		};
	};
	//选择员工公共方法
	$.showEmployeeSelectPop = function(option) {
		var isAppendEmployeeWrap = $(".pnl-employee-select-common").length > 0;
		if(!isAppendEmployeeWrap) {
			$("body").append("<div class=\"pnl-leader-info pnl-employee-select-common hide\">" +
				"	<form class=\"form-horizontal model-leader-info model-employee-select-common\">" +
				"		<div class=\"wrap wrap-source\">" +
				"			<label class=\"label-sub-title\"></label>" +
				"			<div class=\"py\">" +
				"				<input type=\"text\" class=\"search\" placeholder=\"可输入“ZS”或“张三”查找\" style=\"width: 100%;\" />" +
				"				<p class='nav-py'>" +
				"					<a class=\"active\">A</a>" +
				"				</p>" +
				"			</div>" +
				"			<div class=\"box\">" +
				"				<ul class=\"list-emp\">" +
				"				</ul>" +
				"			</div>" +
				"		</div>" +
				"		<div class=\"wrap seg\">" +
				"			<div class=\"box\">" +
				"				<p>" +
				"					<a href=\"javascript:;\" class=\"btn-add\"><i class=\"fa fa-arrow-right\"></i></a>" +
				"				</p>" +
				"				<br>" +
				"			</div>" +
				"		</div>" +
				"		<div class=\"wrap wrap-new\">" +
				"			<label>已选人员：</label>" +
				"			<div class=\"box\">" +
				"				<ul class=\"list-emp\">" +
				"				</ul>" +
				"			</div>" +
				(!option.onlySingle ?
					"			<div class='sel-panel-container'>" +
					"				<a class='delete-all'>移除全部</a>" +
					"			</div>" : "") +
				"		</div>" +
				"	</form>" +
				"</div>");
		}
		option.isIncludeSelf = (option.isIncludeSelf ? option.isIncludeSelf : false);
		option.title = option.title || "选择员工";
		option.onlyOpenedAccount = option.onlyOpenedAccount == undefined ? true : option.onlyOpenedAccount;
		option.onlySingle = option.onlySingle == undefined ? false : option.onlySingle;
		//选择员工
		var modalIdOfEmployee = $.modal({
			height: 490,
			width: 900
		}).show(option.title, ".pnl-employee-select-common",
			function(modal) {
				var selectEmployees = [];
				$(formContainerOfEmployee + " .wrap-new .list-emp input[name=sCkEmployee4Select]").each(function() {
					selectEmployees.push({
						employee_id: $(this).val(),
						employee_name: $(this).data("employee-name")
					});
				});
				if(selectEmployees.length == 0) {
					$.showErrorGritter("请先选择人员后再确认。");
					return false;
				}
				if(option.okCallback) {
					option.okCallback(selectEmployees, modalIdOfEmployee);
				}
				modal.modal("hide");
				removeSelected = null;
			},
			function() {
				removeSelected = null;
			}
		);
		//model pop id
		var formContainerOfEmployee = "#" + modalIdOfEmployee + " .model-employee-select-common";
		if(option.isNotNeedDepaSelect) {
			$(formContainerOfEmployee + " .search-menu").remove();
		}
		$(formContainerOfEmployee + " .label-sub-title").text(option.subTitle);
		//关键字搜索
		//		$(formContainerOfEmployee + " .wrap-source .py .search").keydown(function() {
		//			if(event.keyCode == 13) {
		//				return false;
		//			}
		//		});
		//移除已选人员
		window.removeSelected = function(obj) {
			var thisId = $(obj).parents("li").find("input").val();
			$(formContainerOfEmployee + " .wrap-source input[value='" + thisId + "']").removeProp("checked");
			$(obj).parents("li").remove();
		}
		//加载员工列表
		var filterDimissionStr = option.isFilterDimission ? "&filter_leave=1" : "";
		var url = SAASAPIS.BS.company.employees_simple + "?sidx=employee_name_first_en&sort=asc" + filterDimissionStr + (option.isShowDisabled ? "&not_filter_disabled=1" : "");
		$.ajaxGet(url, function(response) {
			if(response.code == 0) {
				//success
				var employeeList = response.data.rows;
				var employeesGroupByPY = {};
				var pyArr = [];
				for(var i in employeeList) {
					var employeeData = employeeList[i];
					if(option.onlyOpenedAccount && employeeData.employee_has_account == 0) {
						continue;
					}
					if(!option.isShowMe && employeeData.employee_name == $.cookie("_u_name")) {
						continue;
					}
					//拼音首字母
					var firstPY = (employeeData.employee_name_first_en || "#").substring(0, 1).toUpperCase();
					if(!employeesGroupByPY[firstPY]) {
						employeesGroupByPY[firstPY] = [];
					}
					employeesGroupByPY[firstPY].push(employeeData);
					if(pyArr.indexOf(firstPY) == -1)
						pyArr.push(firstPY);
				}
				pyArr = pyArr.sort();
				//load py
				$(formContainerOfEmployee + " .wrap-source .nav-py").empty();
				for(var p in pyArr) {
					if(pyArr[p] == "#") {
						continue;
					}
					$(formContainerOfEmployee + " .wrap-source .nav-py").append("<a>" + pyArr[p] + "</a>");
					if(p == 0) {
						var maxLengthOfACol = parseInt(320 / $(formContainerOfEmployee + " .py a:first-child").outerHeight(true));
						if(pyArr.length >= maxLengthOfACol) $(".wrap-source .nav-py").css("width", "26px");
					}
				}
				$(formContainerOfEmployee + " .wrap-source .nav-py").append("<a>#</a>");
				//click event
				$(formContainerOfEmployee + " .wrap-source .nav-py a").click(function() {
					$(formContainerOfEmployee + " .wrap-source .nav-py a").removeClass("active");
					$(this).addClass("active");
					//initEmployees4SetDeptLeader(employeesGroupByPY[$(this).text()]);
					window.location = "#nav-py-" + $(this).text();
				});
				//关键字搜索
				$(formContainerOfEmployee + " .wrap-source .py .search").keydown(function(event) {
					//event.preventDefault();
					if(event.keyCode == 13) {
						event.preventDefault();
						event.stopPropagation();
						var sKey = $(this).val();
						$.ajaxGet(url + "&key=" + encodeURIComponent(sKey), function(resp) {
							if(response.code == 0) {
								initEmployees4SetDeptLeader(resp.data.rows);
							}
						});
						return false;
					}
				});
				//first load employee
				initEmployees4SetDeptLeader(employeeList);
				//已选人员
				if(option.selectedEmployeeIds && option.selectedEmployeeIds.length > 0) {
					var selectedEmployeeIdsObj = {};
					for(var i in option.selectedEmployeeIds) {
						var empId = option.selectedEmployeeIds[i].emp_id || (option.selectedEmployeeIds[i].employee_id || option.selectedEmployeeIds[i]);
						selectedEmployeeIdsObj[empId] = empId;
					}
					defaultCheckedIds(selectedEmployeeIdsObj);
				}
			} else {
				$.showErrorGritter("加载员工列表失败：" + response.msg);
			}
		});
		//展示员工列表
		var initEmployees4SetDeptLeader = function(employees) {
			//console.log(employees)
			$(formContainerOfEmployee + " .wrap-source .list-emp").empty();
			var selfId = "";
			for(var i in employees) {
				var signStr = "";
				if(option.isSignResign) {
					if(employees[i].employee_status == 7) {
						signStr = "<span class=\"gone-remark\">(离职)</span>";
					}
				}
				var employeeData = employees[i];
				if(!option.isIncludeSelf) {
					if(employeeData.is_self) {
						continue;
					}
				}
				if(option.onlyOpenedAccount && employeeData.employee_has_account == 0) {
					continue;
				}
				//拼音首字母
				var firstPY = (employees[i].employee_name_first_en || "#").substring(0, 1).toUpperCase();
				if($("#nav-py-" + firstPY).length < 1) {
					$(formContainerOfEmployee + " .wrap-source .list-emp").append("<div id='nav-py-" + firstPY + "'>" + firstPY + "</div>");
				}
				if(option.exceptIds && option.exceptIds.indexOf(employeeData.employee_id) >= 0) continue;
				var liDom = $("<li></li>");
				liDom.append("<label><input type=\"checkbox\" class='form-control-radio' first-py='" + firstPY + "' name='ckEmployee4Select' data-employee-name=\"" + employeeData.employee_name + "\" value=\"" + employeeData.employee_id + "\"> <span class='name-css-overhidden css-overhidden'>" +
					employeeData.employee_name + "</span><span class='dept-css-overhidden css-overhidden'>" +
					employeeData.depa_name + "</span><span class='position-css-overhidden css-overhidden'>" + employeeData.employee_post_cn + "</span>" + signStr + "</label>");
				$(formContainerOfEmployee + " .wrap-source .list-emp").append(liDom);
				if(option.rightDefaultShowOwn) {
					if(employeeData.is_self) {
						selfId = employeeData.employee_id
						//$(formContainerOfEmployee+" .wrap-source input[value='"+employeeData.employee_id+"']").trigger("click");
					}
				}
			}
			$(formContainerOfEmployee + " .wrap-new input").each(function() {
				$(formContainerOfEmployee + " .wrap-source input[value='" + $(this).val() + "']").prop("checked", "checked");
			});
			if(option.onlySingle) {
				$(formContainerOfEmployee + " .wrap-source .list-emp input[type='checkbox']").attr("type", "radio");
			}
			//添加选中人员到右边列表
			$(formContainerOfEmployee + " .wrap-source .list-emp input").unbind("change").change(function() {
				if(option.max) {
					var selectLength = $(formContainerOfEmployee + " .wrap-new li").length;
					if(selectLength >= option.max) {
						$.showErrorGritter("人数不能超过" + option.max + "人");
						return false;
					}
				}
				if(!$(this).is(":checked")) {
					$(formContainerOfEmployee + " .wrap-new .list-emp input[value='" + $(this).val() + "']").parent().parent().remove();
					$(this).removeProp("checked");
					return false;
				}
				$(this).prop("checked", "checked");
				var selectEmpDoms = $(formContainerOfEmployee + " .wrap-source .list-emp input:checked");
				if(option.onlySingle) {
					$(formContainerOfEmployee + " .wrap-new .list-emp").empty();
				}
				selectEmpDoms.each(function() {
					var selDom = $(this).parent().parent();
					selDom.append("<img class='btn-remove' onclick='removeSelected(this);' src='../resources/images/filter-close.png'/>");
					//old
					var selEmpId = $(this).val();
					if($(formContainerOfEmployee + " .wrap-new .list-emp input[value='" + selEmpId + "']").length == 0)
						$(formContainerOfEmployee + " .wrap-new .list-emp").append(selDom.clone());
					$(formContainerOfEmployee + " .wrap-new .list-emp input").addClass("hide");
					selDom.find(".btn-remove").remove();
					$(formContainerOfEmployee + " .wrap-new .list-emp input[value='" + selEmpId + "']").attr("name", "sCkEmployee4Select")
					$(this).prop("checked", "checked");
				});
				if($(formContainerOfEmployee + " .wrap-new .list-emp input[type=radio]:checked").length == 0) {
					$(formContainerOfEmployee + " .wrap-new .list-emp input[type=radio]:first").prop("checked", "checked");
				}
			});
			if(option.rightDefaultShowOwn) {
				if(!$(formContainerOfEmployee + " .wrap-source input[value='" + selfId + "']").prop("checked"))
					$(formContainerOfEmployee + " .wrap-source input[value='" + selfId + "']").trigger("click");
			}
		};
		//默认选中
		function defaultCheckedIds(ids) {
			$(formContainerOfEmployee + " input").each(function() {
				if(ids[$(this).val()] && !$(this).prop("checked")) {
					$(this).click();
				}
			});
			//$(formContainerOfEmployee + " .btn-add").click();
		}
		//全选按钮
		$(formContainerOfEmployee + " .select-all").click(function() {
			letAllInputSelect($(formContainerOfEmployee + " .list-emp"));
		});
		//全选按钮
		$(formContainerOfEmployee + " .cancel-all").click(function() {
			letAllInputCancelSelect($(formContainerOfEmployee + " .wrap-source .list-emp"));
		});
		//移除全部
		$(formContainerOfEmployee + " .delete-all").click(function() {
			$(formContainerOfEmployee + " .wrap-new .list-emp").empty();
			$(formContainerOfEmployee + " .wrap-source .list-emp input").removeProp("checked");
		});
	};
	//自定义选择共享对象--------------------------------------------------------------------------------
	//选择员工公共方法
	//end------------------------------------------------------------------------------
	//发起审批公共方法
	$.showApprovalPostPop = function(option) {
		if(window.isShownApprModal) return false;
		console.log(option);
		window.isShownApprModal = true;
		var needApv = true;
		//审批事务
		switch(option.routine) {
			case "leave":
				//请假
				option.routine = "1D6C12B9-2DDA-4906-8995-8A2C96CF5389";
				option.routineName = "请假";
				break;
			case "overtime":
				//加班
				option.routine = "CEFEDD93-684F-F93A-D3AD-FBEECF33C4B8";
				option.routineName = "加班";
				break;
			case "announcementPublish":
				//公告发布
				option.routine = "CEFEDD93-684F-F93A-D3AD-FBEECF33C4B8";
				option.routineName = "公告发布";
				break;
			case "documentShare":
				//文档共享
				option.routine = "AEFEDD93-684F-F93A-D3AD-FBEECF33C4A0";
				option.routineName = "文档共享";
				break;
			case "documentDownload":
				//文档下载
				option.routine = "DEFEDD93-684F-F93A-D3AD-FBEECF33C4B9";
				option.routineName = "文档下载";
				break;
			case "informationPublish":
				//资讯发布
				option.routine = "895E98A2-0841-CB1C-D2B7-6D007318BDD5";
				option.routineName = "资讯发布";
				break;
			case "clientDelete":
				//删除客户
				option.routine = "B7A672F0-744F-82D8-DD61-AB05695D4A45";
				option.routineName = "删除客户";
				break;
			case "clientStatusChange":
				//修改客户状态
				option.routine = "3E7E5A28-D85F-6AF1-2608-2AC1ABDC1779";
				option.routineName = "修改客户状态";
				break;
			case "clientDepaDelete":
				//删除客户部门/科室
				option.routine = "D001F414-14F2-1615-98E5-D1858603C97C";
				option.routineName = "删除客户部门/科室";
				break;
			case "changeDepaStatus":
				//删除客户部门/科室
				option.routine = "8602901A-A232-5C7E-48DF-9C9ADD5E1177";
				option.routineName = "修改客户部门/科室状态";
				break;
			case "clientContactDelete":
				//删除联系人
				option.routine = "96525148-BE75-7EFE-DF04-7E279517D1C0";
				option.routineName = "删除联系人";
				break;
			case "clientContactStatusChange":
				//修改联系人状态
				option.routine = "0CB1AA95-3A96-64FE-457D-AD043571F2E7";
				option.routineName = "修改联系人状态";
				break;
			case "clientShare":
				//共享客户
				option.routine = "4FEC7D19-A34F-1648-8AF5-02595828B67C";
				option.routineName = "共享客户";
				break;
			case "clientSharedCancel":
				//取消共享客户
				option.routine = "B6E817C2-D68C-0DD4-7DEF-4F39377AF811";
				option.routineName = "取消共享客户";
				break;
			case "clientSharedUpdate":
				//修改共享客户
				option.routine = "E872A68A-588D-B539-CBBB-10C5235F3077";
				option.routineName = "修改客户共享";
				break;
			case "clientTransfer":
				//移交客户
				option.routine = "4168D9F2-1426-5453-63BE-CC5CB96D2194";
				option.routineName = "移交客户";
				break;
			case "clientTransferToSea":
				//移入公海
				option.routine = "8a579637-5890-11e6-a82b-408d5c7fdc79";
				option.routineName = "移入公海";
				break;
			case "clientPickUp":
				//抢客户
				option.routine = "e3ade721-5957-11e6-b443-408d5c7fdc79";
				option.routineName = "抢客户";
				break;
			case "cancelLeave":
				//销假申请
				option.routine = "1D6C12B9-2DDA-4906-8995-8A2C96CF5399";
				option.routineName = "销假申请";
				break;
		}
		option.routineName = option.routineName || "";
		console.log(option);
		var isAppendApprovalWrap = $(".pnl-approval-plan-select").length > 0,
			nonPlanUse = false;
		if(!isAppendApprovalWrap) {
			$("body").append("<div class=\"pnl-approval-plan-select hide\">" +
				"	<form class=\"form-horizontal model-approval-plan-select\">" +
				"		<div class=\"form-group form-inline\">" +
				"			你的“" + option.routineName + "”操作需要审批，选择审批流程：" +
				"			<ul class=\"list-plan\">" +
				"			</ul>" +
				"		</div>" +
				"	</form>" +
				"</div>" +
				"<div class=\"pnl-approval-plan-customize hide\">" +
				"	<form class=\"form-horizontal model-approval-plan-customize\">" +
				"		<div class=\"form-group\">" +
				"			<label>审批步骤：<button type=\"button\" class=\"btn btn-default btn-sm btn-step-add\"><i class=\"fa fa-plus\"></i> 添加步骤</button> </label>" +
				"			<ul class=\"list-step\">" +
				"				<li class='tip' style='color:#999; margin:10px 0 0 10px;'>请添加审批步骤</li>" +
				"			</ul>" +
				"		</div>" +
				"	</form>" +
				"</div>");
		}
		//加载流程列表
		var defineParamsStr = "";
		for(var i in option.define_param) {
			defineParamsStr += "&" + i + "=" + option.define_param[i];
		}
		var publicClientStr = "";
		if(option.publicClientId) {
			publicClientStr = "&employee_id=" + option.publicClientId;
		}
		$.ajaxGet(BSAPIURL + "/approvals/" + option.routine + "/plans?is_normal=1" + defineParamsStr + publicClientStr, function(response) {
			window.isShownApprModal = false;
			if(response.code == 0) {
				if(!response.data.need_approval) {
					needApv = false;
					if(option.successCallback) {
						option.successCallback({
							needApv: needApv
						}, false);
					}
					return false;
				}
				var plans = response.data.rows;
				if(plans) {
					nonPlanUse = plans.length < 1 && !response.data.diy_approval;
					$(".model-approval-plan-select .list-plan").empty();
					for(var i in plans) {
						var planData = plans[i];
						var thisPlanIsNormal = true;
						if(planData.steps) {
							if(planData.steps.length == 0)
								thisPlanIsNormal = false;
							for(var n in planData.steps) {
								if(planData.steps[n].approver_data.length < 1) thisPlanIsNormal = false;
							}
							var liDom = $("<li class='added-plan'>" +
								"<label>" +
								"<input " + (!thisPlanIsNormal ? "disabled='disabled'" : "") + " type=\"radio\" value=\"" + planData.plan_id + "\" class=\"form-control-radio\" name=\"rdApvPlan\"/> " +
								planData.plan_name + " </label>" +
								(!thisPlanIsNormal ? "<span class='note-font-type'>(该流程中有不可用步骤,无法使用!)</span>" : "") +
								"</li>");
							$(".model-approval-plan-select .list-plan").append(liDom);
							if(thisPlanIsNormal) onApvPlanDetailGeted(planData.steps, liDom);
						}
					}
					//自定义
					$(".model-approval-plan-select .list-plan").append("<li class='customize-plan'>" +
						"<label><input type=\"radio\" value=\"4\" class=\"form-control-radio\" name=\"rdApvPlan\" " + (response.data.diy_approval ? "" : "disabled='disabled'") + "/> 自定义审批 </label>" +
						"</li>");
					if(nonPlanUse) {
						$.showErrorGritter("当前无可用审批流程!");
					}

				}
				showApvModal();
			} else {
				$.showErrorGritter("添加流程失败：" + response.msg);
			}
		});
		var showApvModal = function() {
			var modalId = $.modal({
				height: 300
			}).show("选择审批流程", ".pnl-approval-plan-select",
				function(modal) {
					var selectPlan = $(formContainer + " .list-plan input[name='rdApvPlan']:checked").val();
					if(!selectPlan) {
						if(nonPlanUse) {
							$.showErrorGritter("当前无可用审批流程!");
							return false;
						}
						$.showErrorGritter("请先选择审批方案。");
						return false;
					}
					if(selectPlan == 4) {
						//自定义审批
						openCustomizeApvPop();
					} else {
						if(option.successCallback) {
							option.successCallback({
								planId: selectPlan,
								needApv: needApv
							}, modal);
						}
						//$.showSuccessGritter("审批已提交，请耐心等待，<br>你也可已在“我的审批”里面查看审批进度。");
					}
					modal.modal("hide");
				}
			);
			//model pop id
			var formContainer = "#" + modalId + " .model-approval-plan-select";
			//已有流程鼠标移上去显示具体流程
			$(document).on("click", formContainer + " .list-plan li", function(e) {
				var me = this;
				$(".added-plan-detail").addClass("hide");
				if(!$(me).hasClass("added-plan")) return;
				$(me).find(".added-plan-detail").removeClass("hide");
			});
		}
		//获得某个审批流程的详细数据回调
		function onApvPlanDetailGeted(data, obj) {
			var apvPlanDetailContainer = $("<div class='added-plan-detail hide'></div>");
			for(var i = 0, len = data.length; i < len; i++) {
				//console.log(data[i].approver_data);
				var empNameArr = [];
				for(var n = 0, lenEmp = data[i].approver_data.length; n < lenEmp; n++) {
					empNameArr.push(data[i].approver_data[n].employee_name);
				}
				var oneStepDom = "<div class='one-step'>" +
					"	<span class='step-num'>" + data[i].step_num + "</span>" +
					//					"	<span class='step-depa css-overhidden' title='" + (data[i].step_specified_department_id_cn || "") + "'>" + (data[i].step_specified_department_id_cn || "") + "</span>" +
					"	<span class='step-emp css-overhidden' title='" + (empNameArr.join(",") || "") + "'>" + (empNameArr.join(",") || "") + "</span>" +
					"</div>";
				apvPlanDetailContainer.append(oneStepDom);
				if(i < len - 1) apvPlanDetailContainer.append("<div class='fa-container'><i class='fa fa-arrow-down'></i><div>");
			}
			$(obj).append(apvPlanDetailContainer);
		}
		//自定义审批
		var openCustomizeApvPop = function() {
			var modalIdOfCus = $.modal({
				shownCallback: function() {
					$(formContainerOfCus + " .btn-step-add").trigger("click");
				}
			}).show("发起自定义审批", ".pnl-approval-plan-customize",
				function(modal) {
					var itemDoms = $(formContainerOfCus + " .list-step .item-step");
					if(itemDoms.length == 0) {
						$.showErrorGritter("请先添加审批步骤。");
						return false;
					}
					var validateFlag = true;
					var diyData = [];
					itemDoms.each(function(i) {
						var stepNum = i + 1;
						var stepData = $(this).data("step");
						if(!stepData) {
							$.showErrorGritter("第 " + stepNum + " 步审批人还未设置，请设置。");
							validateFlag = false;
							return false;
						}
						diyData.push({
							step_num: stepNum,
							employee_ids: stepData.employees.join(",")
						});
					});
					if(!validateFlag) {
						return false;
					}
					if(option.successCallback) {
						if(option.successCallback({
								planId: "diy",
								steps: diyData,
								needApv: needApv
							}, modal)) {
							modal.modal("hide");
						}
					} else
						modal.modal("hide");
				}
			);
			//model pop id
			var formContainerOfCus = "#" + modalIdOfCus + " .model-approval-plan-customize";
			//添加步骤
			$(formContainerOfCus + " .btn-step-add").click(function() {
				$(formContainerOfCus + " .list-step .tip").remove();
				$(formContainerOfCus + " .list-step").append("<li class=\"item-step\">" +
					"	<label class=\"num\">2</label>" +
					"	<div class=\"item\">" +
					"		<label>审批人：</label>" +
					"		<i class=\"icon-close fa fa-times-circle\" title='删除该步骤'></i><i class='icon-edit fa fa-edit' title='编辑条件'></i>" +
					"	</div>" +
					"	<div class=\"item\">" +
					"		<label></label>" +
					"		<span class='label-apv-employee'>请选择审批人</span>" +
					"	</div>" +
					"</li>");
				initCustomizeStepsAndEvents();
				initDrag();
			});
			//初始步骤&相关事件
			var directionDom = "<li class=\"direction\"><i class=\"fa fa-arrow-down\"></i></li>";
			var initCustomizeStepsAndEvents = function() {
				$(formContainerOfCus + " .list-step .direction").remove();
				var stepsDom = $(formContainerOfCus + " .list-step .item-step");
				var stepCount = stepsDom.length;
				stepsDom.each(function(i) {
					$(this).find(".num").text(i + 1);
					if(stepCount - 1 > i)
						$(this).after(directionDom);
				});
				//删除
				stepsDom.find(".icon-close").unbind("click").click(function() {
					var currCloseDom = $(this);
					$.modal().confirm("你将删除此审批步骤，确认删除吗？", function() {
						currCloseDom.parent().parent().remove();

						initCustomizeStepsAndEvents();
						initDrag();
					});
				});
				//编辑
				stepsDom.find(".icon-edit").unbind("click").click(function() {
					var stepDom = $(this).parents(".item-step:first");
					var selectEmployeeDom = stepDom.find(".label-apv-employee");
					var stepData = stepDom.data("step") || {};
					var selectedEmployeeIds = stepData.employees;
					$.showEmployeeSelectPop({
						title: "选择审批人",
						subTitle: "选择审批人员：",
						isIncludeSelf: option.isIncludeSelf,
						isShowMe: option.isIncludeSelf,
						selectedEmployeeIds: selectedEmployeeIds,
						onlyOpenedAccount: true,
						isNotNeedDepaSelect: true,
						exceptIds: option.exceptIds,
						okCallback: function(employeesData) {
							selectEmployeeDom.empty();
							var selectEmployeeNames = "",
								selectEmployeeIds = [];
							for(var i in employeesData) {
								var empData = employeesData[i];
								if(selectEmployeeNames) {
									selectEmployeeNames += "、";
								}
								selectEmployeeNames += empData.employee_name;
								selectEmployeeIds.push(empData.employee_id);
							}
							selectEmployeeDom.html(selectEmployeeNames);
							stepData.employees = selectEmployeeIds;
							stepDom.data("step", stepData);
						}
					});
				});
			};
			var initDrag = function() {
				//拖动
				if($(formContainerOfCus + " .list-step .item-step").length == 0) {
					return false;
				}
				$(formContainerOfCus + " .list-step").sortable("destroy");
				$(formContainerOfCus + " .list-step").sortable({
					items: ".item-step"
				}).unbind("sortupdate").bind("sortupdate", function() {
					initCustomizeStepsAndEvents();
				});
			};
		};
	};
	//get guid
	$.uuid = function() {
		return "xxxxxxxxxxxx4xxxyxxxxxxxxxxxxxxx".replace(/[xy]/g, function(c) {
			var r = Math.random() * 16 | 0,
				v = c == "x" ? r : (r & 0x3 | 0x8);
			return v.toString(16);
		});
	};
	//当前时间
	$.timeNow = function() {
		return new Date();
	};
	//时间转换
	$.convertToDate = function(datestring) {
		if(!datestring) {
			return null;
		}
		if(!isNaN(datestring)) {
			return $.convertToDate4Unix(datestring);
		}
		var resDate = (new Date(datestring.replace(/[上,下,午,A,P,M,a,p,m]/g, "").replace(/[年,月,日]/g, "/")));
		if(resDate == "Invalid Date") {
			var isoExp = /^s*(d{4})-(dd)-(dd)s*$/,
				date = new Date(NaN),
				month,
				parts = isoExp.exec(datestring);

			if(parts) {
				month = +parts[2];
				date.setFullYear(parts[1], month - 1, parts[3]);
				if(month != date.getMonth() + 1) {
					date.setTime(NaN);
				}
			}
			return date;
		}
		return resDate;
	};

	//金额转大写
	$.convertToMoney = function(number) {
		var mnum = parseFloat(number);
		var strOutput = "",
			strTemp = "",
			strInTemp = '';
		var unitArray = new Array("圆万亿", "仟佰拾", "零壹贰叁肆伍陆柒捌玖");
		var mnumArray = mnum.toString().split('.');
		var integralnum = mnumArray[0];
		var integrallen = integralnum.length;
		var decimalnum = (mnum.toString().indexOf('.') >= 0) ? mnumArray[1].substr(0, 2) : '0';
		var decimallen = decimalnum.length;
		var ints = parseInt(integrallen / 4);
		var inty = integrallen % 4;
		if(ints > 3 || (ints == 3 && inty > 0)) return "超出范围";
		if(inty > 0) {
			ints++;
			integralnum = "0000".substr(inty) + integralnum;
			integrallen = integralnum.length;
		}
		var i = 0;
		while(i < integrallen) {
			var strOutTemp = "";
			strTemp = integralnum.substr(i, 4);
			i += 4;
			for(var j = 0; j < 4; j++) {
				strInTemp = parseInt(strTemp.substr(j, 1));
				strOutTemp += unitArray[2].substr(strInTemp, 1);
				if(strInTemp > 0 && j < 3) strOutTemp += unitArray[1].substr(j, 1);
			}
			strOutTemp = strOutTemp.replace(/零+$/, "");
			ints--;
			if(strOutTemp != "") strOutTemp += unitArray[0].substr(ints, 1);
			if(strTemp.substr(3, 1) == '0') strOutTemp += "零";
			strOutput += strOutTemp;
		}
		strOutput = strOutput.replace(/零+/g, "零").replace(/^零/, "").replace(/零$/, "");
		if(strOutput == "圆") strOutput = "";
		if(decimallen == 2) {
			strOutput += (decimalnum.charAt(0) != '0') ? unitArray[2].substr(parseInt(decimalnum.charAt(0)), 1) + "角" : "零";
			if(strOutput == "零") strOutput = "";
			strOutput += unitArray[2].substr(parseInt(decimalnum.charAt(1)), 1) + "分";
		} else {
			if(decimalnum != '0') strOutput += unitArray[2].substr(parseInt(decimalnum), 1) + "角";
			if(strOutput != "") strOutput += "整";
		}
		if(strOutput == "") strOutput = "金额为零";
		return strOutput;
	};
	//数字转中文  仅支持0-9999
	$.transNumberToChinese = function(number) {
		var chineseArr = ["零", "一", "二", "三", "四", "五", "六", "七", "八", "九"],
			chineseText = "";
		if(number > 9999) {
			throw new Error("超出最大范围");
			return false;
		} else if(number < 0) {
			throw new Error("小于最小范围");
			return false;
		} else {
			var qian = parseInt(number / 1000),
				bai = parseInt(number / 100) > 10 ? parseInt(number / 100) % 10 : parseInt(number / 100),
				shi = parseInt(number / 10) > 10 ? parseInt(number / 10) % 10 : parseInt(number / 10);
			if(qian) {
				chineseText = chineseArr[qian] + "千" + chineseArr[bai] + "百" + chineseArr[shi] + "十" + (!chineseArr[number % 10] ? "" : chineseArr[number % 10]);
				return chineseText;
			}
			if(!qian && bai) {
				chineseText = chineseArr[bai] + "百" + chineseArr[shi] + "十" + (!chineseArr[number % 10] ? "" : chineseArr[number % 10]);
				return chineseText;
			}
			if(!qian && !bai && shi) {
				chineseText = chineseArr[shi] + "十" + (!chineseArr[number % 10] ? "" : chineseArr[number % 10]);
				return chineseText;
			} else {
				chineseText = chineseArr[number % 10];
				return chineseText;
			}
		}
	}
	//两个时间相差天数
	$.getDaysOfTimeDifference = function(largerTime, smallerTime, convertToInt) {
		var days = ($.convertToDate(largerTime).getTime() - $.convertToDate(smallerTime).getTime()) /
			(24 * 3600 * 1000);
		return convertToInt ? Math.floor(days) : days;
	};
	//空字段填充
	$.fillObjectEmptyField = function(source, val) {
		val = val || "-";
		if(typeof source == "object") {
			for(var p in source) {
				if(!source[p]) {
					source[p] = val;
				}
			}
		}
	};
	////计算两个时间相差的天数
	$.getTwoDaysDistance = function(beforeDay, afterDay) {
		var distance = ((new Date(changeDate(afterDay.replace(/-/g, "/")))).getDate()) - ((new Date(changeDate(beforeDay.replace(/-/g, "/")))).getDate());
		return distance;
	}
	//复制对象
	$.cloneObject = function(sourceObj) {
		function MClone() {}

		MClone.prototype = sourceObj;
		var o = new MClone();
		for(var a in o) {
			if(typeof o[a] == "object") {
				o[a] = $.cloneObject(o[a]);
			}
		}
		return o;
	};
	//时间戳转换
	$.convertToDate4Unix = function(datestring) {
		if(datestring.length < 10) {
			return null;
		}
		return new Date(datestring * 1000);
	};
	//日期转农历
	$.dateToLunar = function(dateString) {
		var lunarInfo = new Array(
			0x04bd8, 0x04ae0, 0x0a570, 0x054d5, 0x0d260, 0x0d950, 0x16554, 0x056a0, 0x09ad0, 0x055d2,
			0x04ae0, 0x0a5b6, 0x0a4d0, 0x0d250, 0x1d255, 0x0b540, 0x0d6a0, 0x0ada2, 0x095b0, 0x14977,
			0x04970, 0x0a4b0, 0x0b4b5, 0x06a50, 0x06d40, 0x1ab54, 0x02b60, 0x09570, 0x052f2, 0x04970,
			0x06566, 0x0d4a0, 0x0ea50, 0x06e95, 0x05ad0, 0x02b60, 0x186e3, 0x092e0, 0x1c8d7, 0x0c950,
			0x0d4a0, 0x1d8a6, 0x0b550, 0x056a0, 0x1a5b4, 0x025d0, 0x092d0, 0x0d2b2, 0x0a950, 0x0b557,
			0x06ca0, 0x0b550, 0x15355, 0x04da0, 0x0a5d0, 0x14573, 0x052d0, 0x0a9a8, 0x0e950, 0x06aa0,
			0x0aea6, 0x0ab50, 0x04b60, 0x0aae4, 0x0a570, 0x05260, 0x0f263, 0x0d950, 0x05b57, 0x056a0,
			0x096d0, 0x04dd5, 0x04ad0, 0x0a4d0, 0x0d4d4, 0x0d250, 0x0d558, 0x0b540, 0x0b5a0, 0x195a6,
			0x095b0, 0x049b0, 0x0a974, 0x0a4b0, 0x0b27a, 0x06a50, 0x06d40, 0x0af46, 0x0ab60, 0x09570,
			0x04af5, 0x04970, 0x064b0, 0x074a3, 0x0ea50, 0x06b58, 0x055c0, 0x0ab60, 0x096d5, 0x092e0,
			0x0c960, 0x0d954, 0x0d4a0, 0x0da50, 0x07552, 0x056a0, 0x0abb7, 0x025d0, 0x092d0, 0x0cab5,
			0x0a950, 0x0b4a0, 0x0baa4, 0x0ad50, 0x055d9, 0x04ba0, 0x0a5b0, 0x15176, 0x052b0, 0x0a930,
			0x07954, 0x06aa0, 0x0ad50, 0x05b52, 0x04b60, 0x0a6e6, 0x0a4e0, 0x0d260, 0x0ea65, 0x0d530,
			0x05aa0, 0x076a3, 0x096d0, 0x04bd7, 0x04ad0, 0x0a4d0, 0x1d0b6, 0x0d250, 0x0d520, 0x0dd45,
			0x0b5a0, 0x056d0, 0x055b2, 0x049b0, 0x0a577, 0x0a4b0, 0x0aa50, 0x1b255, 0x06d20, 0x0ada0);
		var nStr1 = new Array('日', '一', '二', '三', '四', '五', '六', '七', '八', '九', '十');
		var nStr2 = new Array('初', '十', '二十', '三十', '　');
		/*日期计算*/
		//传回农历   y年的总天数
		function lYearDays(y) {
			var i, sum = 348;
			for(i = 0x8000; i > 0x8; i >>= 1) sum += (lunarInfo[y - 1900] & i) ? 1 : 0;
			return(sum + leapDays(y));
		}

		//传回农历   y年闰月的天数
		function leapDays(y) {
			if(leapMonth(y)) return((lunarInfo[y - 1900] & 0x10000) ? 30 : 29);
			else return(0);
		}

		//传回农历   y年闰哪个月   1-12   ,   没闰传回   0
		function leapMonth(y) {
			return(lunarInfo[y - 1900] & 0xf);
		}

		//传回农历   y年m月的总天数
		function monthDays(y, m) {
			return((lunarInfo[y - 1900] & (0x10000 >> m)) ? 30 : 29);
		}

		//算出农历,   传入日期物件,   传回农历日期物件
		//该物件属性有   .year   .month   .day   .isLeap   .yearCyl   .dayCyl   .monCyl
		function Lunar(objDate) {
			var i, leap = 0,
				temp = 0;
			var baseDate = new Date(1900, 0, 31);
			var offset = (objDate - baseDate) / 86400000;
			this.dayCyl = offset + 40;
			this.monCyl = 14;
			for(i = 1900; i < 2050 && offset > 0; i++) {
				temp = lYearDays(i);
				offset -= temp;
				this.monCyl += 12;
			}
			if(offset < 0) {
				offset += temp;
				i--;
				this.monCyl -= 12;
			}
			this.year = i;
			this.yearCyl = i - 1864;
			leap = leapMonth(i); //闰哪个月
			this.isLeap = false
			for(i = 1; i < 13 && offset > 0; i++) {
				//闰月
				if(leap > 0 && i == (leap + 1) && this.isLeap == false) {
					--i;
					this.isLeap = true;
					temp = leapDays(this.year);
				} else {
					temp = monthDays(this.year, i);
				}
				//解除闰月
				if(this.isLeap == true && i == (leap + 1)) this.isLeap = false;
				offset -= temp;
				if(this.isLeap == false) this.monCyl++;
			}
			if(offset == 0 && leap > 0 && i == leap + 1)
				if(this.isLeap) {
					this.isLeap = false;
				} else {
					this.isLeap = true;
					--i;
					--this.monCyl;
				}
			if(offset < 0) {
				offset += temp;
				--i;
				--this.monCyl;
			}
			this.month = i;
			this.day = offset + 1;
		}

		//中文日期
		function cDay(d) {
			var s;
			switch(d) {
				case 10:
					s = '初十';
					break;
				case 20:
					s = '二十';
					break;
				case 30:
					s = '三十';
					break;
				default:
					s = nStr2[Math.floor(d / 10)];
					s += nStr1[d % 10];
			}
			return(s);
		}

		//中文月份
		function cMonth(m) {
			var s;

			switch(m) {
				case 1:
					s = '正月';
					break;
				case 2:
					s = '二月';
					break;
				case 3:
					s = '三月';
					break;
				case 4:
					s = '四月';
					break;
				case 5:
					s = '五月';
					break;
				case 6:
					s = '六月';
					break;
				case 7:
					s = '七月';
					break;
				case 8:
					s = '八月';
					break;
				case 9:
					s = '九月';
					break;
				case 10:
					s = '十月';
					break;
				case 11:
					s = '十一月';
					break;
				case 12:
					s = '十二月';
					break;
				default:
					break;
			}
			return(s);
		}

		var sourceDate = new Date(dateString.replace(/-/g, "/"));
		var sDObj = new Date(sourceDate.getFullYear(), sourceDate.getMonth(), sourceDate.getDate());
		var lDObj = new Lunar(sDObj); //农历 cMonth(lDObj.month) + cDay(lDObj.day)
		return lDObj.year + "-" + lDObj.month + "-" + lDObj.day;
	};
	//文件大小转中文
	$.converBytesToCN = function(bytes) {
		if(bytes === 0) return '0 B';
		var k = 1000,
			sizes = ['B', 'KB', 'MB', 'GB', 'TB', 'PB', 'EB', 'ZB', 'YB'],
			i = Math.floor(Math.log(bytes) / Math.log(k));
		return(bytes / Math.pow(k, i)).toPrecision(3) + ' ' + sizes[i];
	};
	//字符串 格式化
	$.format = function(source, params) {
		if(arguments.length == 1)
			return function() {
				var args = $.makeArray(arguments);
				args.unshift(source);
				return $.format.apply(this, args);
			};
		if(arguments.length > 2 && params.constructor != Array) {
			params = $.makeArray(arguments).slice(1);
		}
		if(params.constructor != Array) {
			params = [params];
		}
		$.each(params, function(i, n) {
			source = source.replace(new RegExp("\\{" + i + "\\}", "g"), n);
		});
		return source;
	};
	//获取 url 参数值
	$.getQueryString = function(name) {
		var reg = new RegExp("(^|&)" + name + "=([^&]*)(&|$)");
		var r = w.location.search.substr(1).match(reg);
		if(r != null) return unescape(r[2]);
		return null;
	};
	//获取 url 参数对象
	$.getQueryObject = function(url) {
		url = url || w.location.href;
		var search = url.substring(url.lastIndexOf("?") + 1);
		var obj = {};
		var reg = /([^?&=]+)=([^?&=]*)/g;
		search.replace(reg, function(rs, $1, $2) {
			var name = decodeURIComponent($1);
			var val = decodeURIComponent($2);
			val = String(val);
			obj[name] = val;
			return rs;
		});
		return obj;
	};
	//对象转 url 参数
	$.toQueryString = function(obj, full) {
		if(!obj) {
			return "";
		}
		var resQS = "";
		for(p in obj) {
			if(p) {
				resQS += "&" + p + "=" + encodeURIComponent(obj[p]);
			}
		}
		if(!resQS) {
			return "";
		}
		return(full ? "?" : "") + resQS.substring(1);
	};
	//loading
	$.showLoadingPop = function(text) {
		if(!text) {
			text = "正在加载数据，请稍后...";
		}
		if($("#pnlLoadPop").length == 1) {
			$("#pnlLoadPop .tip").text(text);
		} else
			$("body").append("<div id='pnlLoadPop'><div class=\"modal-backdrop fade in \" style=\"opacity:.1;\"></div><div class=\"alert alert-info tip loading-tip \" role=\"alert\">" + text + "</div></div>");

		$("#pnlLoadPop").removeClass("hide");
	};
	$.hideLoadingPop = function() {
		$("#pnlLoadPop").addClass("hide");
	};
	//提示成功（绿色）
	$.showSuccessGritter = function(text, option) {
		var gOption = {
			time: 3000,
			class_name: "gritter-success"
		};
		if(option) {
			gOption = $.extend({}, gOption, option);
		}

		$.showGritter(text, gOption);
	};
	//提示错误（红色）
	$.showErrorGritter = function(text, option) {
		var gOption = {
			time: 3000,
			class_name: "gritter-error"
		};
		if(option) {
			gOption = $.extend({}, gOption, option);
		}

		$.showGritter(text, gOption);
	};
	//提示
	$.showGritter = function(text, option) {
		var gOption = {
			title: "",
			text: text,
			time: 2000,
			position: "top-right",
			class_name: "gritter-success",
			clear: true
		};
		if(option) {
			gOption = $.extend({}, gOption, option);
		}
		//clear
		if(gOption.clear) {
			$.clearGritter();
		}
		$.gritter && $.gritter.add(gOption);
	};
	//清空提示
	$.clearGritter = function() {
		$("#gritter-notice-wrapper").html("");
	};
	//模态框
	var modalIdNo = 0;
	$.modal = function(options) {
		options = options || {};
		//set default
		options.showButtonIcon = options.showButtonIcon == undefined ? true : options.showButtonIcon;
		options.showOKButton = options.showOKButton == undefined ? true : options.showOKButton;
		options.showCancelButton = options.showCancelButton == undefined ? true : options.showCancelButton;
		options.okButtonText = options.okButtonText || "确 定";
		options.cancelButtonText = options.cancelButtonText || "取 消";
		//		options.buttons = options.buttons || [{
		//			name: "确 定",
		//			class: "btn-primary",
		//			icon: "fa-check",
		//			onClick: null,
		//			isCancel: false
		//		}, {
		//			name: "取 消",
		//			icon: "fa-times",
		//			onClick: null,
		//			isCancel: true
		//		}];
		var showFooter = options.showFooter == undefined ? true : options.showFooter;
		modalIdNo++;
		var modalId = "cModal" + modalIdNo;
		var modalDoc = $("<div id=\"" + modalId + "\" class=\"modal fade\" role=\"dialog\"><div class=\"modal-dialog modal-sm\" style=\"margin-top:" + ($(window).height() / 4) + "px;\"></div></div>");
		var modalContentDoc = $("<div class=\"modal-content\"></div>");
		var modalHeaderDoc = $("<div class=\"modal-header\"><button type=\"button\" class=\"close\" data-dismiss=\"modal\" aria-label=\"Close\"><span class='modal-close-icon' aria-hidden=\"true\">关闭</span></button><h4 class=\"modal-title\">系统提示</h4></div>");
		var modalBodyDoc = $("<div class=\"modal-body\"></div>");
		$(modalContentDoc).append(modalHeaderDoc);
		$(modalContentDoc).append(modalBodyDoc);
		$(modalDoc).find(".modal-dialog").append(modalContentDoc);
		//按钮相关
		var okCallbackDelegate, cancelCallbackDelegate;
		var modalFooterDoc = $("<div class=\"modal-footer\"></div>");
		//自定义按钮
		var btnClickEvents = [];
		for(var i in options.buttons) {
			var currBtn = options.buttons[i];
			var currBtnDom = $("<button data-btn-index=\"" + i + "\" type=\"button\" class=\"btn\" style=\"background-color:#ca192b!important;border:0px!important\"></button>");
			currBtn.class = currBtn.class || "btn-default";
			currBtnDom.text(currBtn.name);
			if(currBtn.class) {
				currBtnDom.addClass(currBtn.class).addClass("def-" + currBtn.class);
			}
			if(currBtn.icon) {
				currBtnDom.append("&nbsp;<i class='fa " + currBtn.icon + "'></i>");
				currBtnDom.append(currBtn.name + "&nbsp;");
			}
			if(currBtn.isCancel) {
				currBtnDom.attr("data-dismiss", "modal");
			}
			btnClickEvents.push(currBtn.onClick);
			$(currBtnDom).click(function() {
				var currClickEvent = btnClickEvents[$(this).data("btn-index")];
				currClickEvent && currClickEvent(modalDoc);
			});
			$(modalFooterDoc).append(currBtnDom);
		}
		if(options.showOKButton && options.showOKButton != "false") {
			//var modelBtnOk = $("<button type=\"button\" class=\"btn btn-sm btn-primary\">&nbsp;<i class='fa fa-check'></i>" + options.okButtonText + "&nbsp;</button>");
			var modelBtnOk = $("<a class=\"btn btn-danger def-btn-danger modal-btnOk-container\">" + options.okButtonText + "</a>");
			$(modelBtnOk).click(function() {
				okCallbackDelegate && okCallbackDelegate(modalDoc);
			});
			$(modalFooterDoc).append(modelBtnOk);
		}
		if(options.showCancelButton) {
			//var modelBtnCancel = $("<button type=\"button\" class=\"btn btn-sm btn-default\" data-dismiss=\"modal\">&nbsp;<i class='fa fa-times'></i>" + options.cancelButtonText + "&nbsp;</button>");
			var modelBtnCancel = $("<a class=\"btn btn-primary def-btn-primary modal-btnCancel-container\" data-dismiss=\"modal\">" + options.cancelButtonText + "</a>");
			//var modelBtnCancel = $("<button class=\"btn btn-sm btn-default modal-btnCancel-container\">" + options.cancelButtonText + "</button>");
			$(modelBtnCancel).click(function() {
				cancelCallbackDelegate && cancelCallbackDelegate(modalDoc);
			});
			$(modalFooterDoc).append(modelBtnCancel);
		}
		if(!options.showButtonIcon) {
			$(modalFooterDoc).find("i.fa").remove();
		}
		if(showFooter)
			$(modalDoc).find(".modal-content").append(modalFooterDoc);
		//$("body").append(modalDoc);
		//destroy
		$(modalDoc).on('hidden.bs.modal', function(e) {
			$(this).remove();

			if(options.closeCallback) {
				options.closeCallback.call(this, null);
			}
		});
		$(modalDoc).on('show.bs.modal', function(e) {
			//清除提示框
			$.clearGritter();
		});
		//加载完成
		$(modalDoc).on('shown.bs.modal', function(e) {
			if(options.shownCallback) {
				options.shownCallback.call(this, modalId);
			}
		});
		//关闭完成
		$(modalDoc).on('hidden.bs.modal', function(e) {
			if($("div[id*='cModal']").length == 0) {
				$("body").css("padding-right", "");
				$("body").removeClass("modal-open");
			}
			//$.clearGritter();
		});

		modalDoc.alert = function(text) {
			$(this).find(".modal-body").text(text);
			$(this).modal('show');
			$("body").append(modalDoc);
		};
		modalDoc.confirm = function(text, okCallback, cancelCallback) {
			okCallbackDelegate = function() {
				okCallback(modalDoc);
				modalDoc.modal("hide");
			};
			cancelCallbackDelegate = cancelCallback;

			$(this).find(".modal-body").text(text);
			//remove header
			$(this).find(".modal-header").remove();

			$(this).modal({
				backdrop: "static",
				show: true
			});
			modalDoc.addClass("confirm-modal");
			$("body").append(modalDoc);
		};
		modalDoc.show = function(title, contentContainer, okCallback, cancelCallback) {
			okCallbackDelegate = okCallback;
			cancelCallbackDelegate = cancelCallback;
			$(modalDoc).find(".modal-dialog").removeClass("modal-sm").addClass("modal-normal").attr("style", "");
			if(options.width)
				$(modalDoc).find(".modal-dialog").css("width", options.width + "px");
			$(this).find(".modal-title").text(title);
			$(this).find(".modal-body").append($(contentContainer).html()).css("max-height", options.height ? options.height : ($(window).height() - 180).toString() + "px").css("overflow", "auto")
			if(options.height) $(this).find(".modal-body").css("height", options.height + "px");
			//remove header
			//$(this).find(".modal-header").remove();

			$(this).modal({
				backdrop: "static",
				show: true
			});
			$("body").append(modalDoc);

			inputLimit();

			return modalId;
		};
		modalDoc.showOfMini = function(title, contentContainer, okCallback, cancelCallback) {
			okCallbackDelegate = okCallback;
			cancelCallbackDelegate = cancelCallback;

			$(this).find(".modal-dialog").removeClass("modal-sm").addClass("modal-mini").attr("style", "").css("width", "420px");
			$(this).find(".modal-title").text(title);
			$(this).find(".modal-body").append($(contentContainer).html()).css("max-height", ($(window).height() - 180).toString() + "px").css("overflow", "auto");
			//remove header
			//$(this).find(".modal-header").remove();

			$(this).modal({
				backdrop: "static",
				show: true
			});
			$("body").append(modalDoc);

			inputLimit();

			return modalId;
		};
		modalDoc.showOfLarge = function(title, contentContainer, okCallback, cancelCallback) {
			okCallbackDelegate = okCallback;
			cancelCallbackDelegate = cancelCallback;

			$(this).find(".modal-dialog").removeClass("modal-sm").addClass("modal-large").attr("style", "").css("width", (options.width || 900) + "px");
			$(this).find(".modal-title").text(title);
			$(this).find(".modal-body").append($(contentContainer).html()).css("max-height", ($(window).height() - 180).toString() + "px").css("overflow", "auto");
			//remove header
			//$(this).find(".modal-header").remove();

			$(this).modal({
				backdrop: "static",
				show: true
			});
			$("body").append(modalDoc);

			inputLimit();

			return modalId;
		};
		modalDoc.showOfAuto = function(title, contentContainer, okCallback, cancelCallback) {
			okCallbackDelegate = okCallback;
			cancelCallbackDelegate = cancelCallback;
			$(this).find(".modal-dialog").removeClass("modal-sm").addClass("modal-mini").attr("style", "").css({
				width: "auto",
				margin: "10px"
			});
			$(this).find(".modal-title").text(title);
			$(this).find(".modal-body").append($(contentContainer).html()).css("max-height", ($(window).height() - 65).toString() + "px").css("overflow", "auto");
			//remove header
			//$(this).find(".modal-header").remove();

			$(this).modal({
				backdrop: "static",
				show: true
			});
			$("body").append(modalDoc);

			inputLimit();

			if($("#" + modalId + " ul[role='tablist']").length > 0) {
				$("#" + modalId + " ul[role='tablist'] a[role='tab']").click(function() {
					$("#" + modalId + " div[role='tabpanel']").removeClass("active");
					$("#" + modalId + " div[role='tabpanel']#" + $(this).attr("aria-controls")).addClass("active");
				});
			}

			return modalId;
		};
		modalDoc.open = function(title, path) {
			$(this).find(".modal-dialog").removeClass("modal-sm");
			$(this).find(".modal-title").text(title + " （正在打开...）");
			$(this).find(".modal-body").append("<iframe frameborder=\"0\" width=\"100%\" height=\"500\" scrolling=\"auto\" src=\"" + path + "\"></iframe>");
			$(this).modal('show');
			$("body").append(modalDoc);
			var cModal = $(this);
			$(cModal).find(".modal-body iframe").on("load", function() {
				$(cModal).find(".modal-title").text(title);
			});
		};
		modalDoc.openOfAuto = function(title, path) {
			$(this).find(".modal-dialog").removeClass("modal-sm").attr("style", "").css({
				width: "auto",
				margin: 0
			});
			$(this).find(".modal-title").text(title);
			$(this).find(".modal-body").append("<iframe frameborder=\"0\" width=\"100%\" height=\"100%\" scrolling=\"auto\" src=\"" + path + "\"></iframe>");
			$(this).find(".modal-body").css("max-height", ($(window).height() - 180).toString() + "px").css("overflow", "auto");

			$(this).modal({
				backdrop: "static",
				show: true
			});
			$("body").append(modalDoc);

			return modalId;
		};

		return modalDoc;
	};

	/*
	 * cookie
	 * */
	var pluses = /\+/g;

	function encode(s) {
		return config.raw ? s : encodeURIComponent(s);
	}

	function decode(s) {
		return config.raw ? s : decodeURIComponent(s);
	}

	function stringifyCookieValue(value) {
		return encode(config.json ? JSON.stringify(value) : String(value));
	}

	function parseCookieValue(s) {
		if(s.indexOf('"') === 0) {
			// This is a quoted cookie as according to RFC2068, unescape...
			s = s.slice(1, -1).replace(/\\"/g, '"').replace(/\\\\/g, '\\');
		}

		try {
			// Replace server-side written pluses with spaces.
			// If we can't decode the cookie, ignore it, it's unusable.
			// If we can't parse the cookie, ignore it, it's unusable.
			s = decodeURIComponent(s.replace(pluses, ' '));
			return config.json ? JSON.parse(s) : s;
		} catch(e) {}
	}

	function read(s, converter) {
		var value = config.raw ? s : parseCookieValue(s);
		return $.isFunction(converter) ? converter(value) : value;
	}

	var config = $.cookie = function(key, value, options) {

		// Write

		if(value !== undefined && !$.isFunction(value)) {
			options = $.extend({}, config.defaults, options);

			if(typeof options.expires === 'number') {
				var days = options.expires,
					t = options.expires = new Date();
				t.setTime(+t + days * 864e+5);
			}

			return(document.cookie = [
				encode(key), '=', stringifyCookieValue(value),
				options.expires ? '; expires=' + options.expires.toUTCString() : '', // use expires attribute, max-age is not supported by IE
				options.path ? '; path=' + options.path : '',
				options.domain ? '; domain=' + options.domain : '',
				options.secure ? '; secure' : ''
			].join(''));
		}

		// Read

		var result = key ? undefined : {};

		// To prevent the for loop in the first place assign an empty array
		// in case there are no cookies at all. Also prevents odd result when
		// calling $.cookie().
		var cookies = document.cookie ? document.cookie.split('; ') : [];

		for(var i = 0, l = cookies.length; i < l; i++) {
			var parts = cookies[i].split('=');
			var name = decode(parts.shift());
			var cookie = parts.join('=');

			if(key && key === name) {
				// If second argument (value) is a function it's a converter...
				result = read(cookie, value);
				break;
			}

			// Prevent storing a cookie that we couldn't decode.
			if(!key && (cookie = read(cookie)) !== undefined) {
				result[name] = cookie;
			}
		}

		return result;
	};

	config.defaults = {};

	$.removeCookie = function(key, options) {
		if($.cookie(key) === undefined) {
			return false;
		}

		// Must not alter options, thus extending a fresh object...
		$.cookie(key, '', $.extend({}, options, {
			expires: -1
		}));
		return !$.cookie(key);
	};
	/*
	 * Local store
	 * */
	$.getLocalData = function(key) {
		return $.cookie(key);
	};
	$.setLocalData = function(key, value, options) {
		return $.cookie(key, value, options);
	};
	$.removeLocalData = function(key) {
		return $.removeCookie(key);
	};

	/*
	 * function
	 * */

	//uploader
	$.fn.initUploader = function(options) {
		console.log(options.url);
		var filters = {};
		if(options.url.indexOf("image") >= 0) {
			filters = {
				max_file_size: '5mb',
				mime_types: [{
					title: "Image files",
					extensions: "jpg,gif,png,jpeg,bmp"
				}]
			}
		} else if(options.url.indexOf("document") >= 0) {
			filters = {
				max_file_size: '50mb',
				//				mime_types: [{
				//					title: "Image files",
				//					extensions: "jpg,gif,png,jpeg,bmp"
				//				}, {
				//					title: "Office",
				//					extensions: "doc,docx,ppt,pptx,xlsx,xls,pdf,txt,7z,zip,rar"
				//				}]
			}
		} else if(options.url.indexOf("xls") >= 0 || options.fileType == "xls") {
			filters = {
				max_file_size: '50mb',
				mime_types: [{
					title: "Office",
					extensions: "xlsx,xls"
				}]
			}
		}

		var params = options.params || {};
		params.session_id = $.cookie("session_id");

		var upContainer = options.up_container || options.upContainer;
		var uploader = new plupload.Uploader({
			runtimes: 'html5,flash,silverlight,html4',
			browse_button: $(this).selector.substr(1), // you can pass an id...
			//container: document.getElementById('container'),
			url: options.url + "?session_id=" + $.cookie("session_id") + (options.isDownload ? "&download=1" : ""),
			multi_selection: false,
			file_data_name: options.fileName || "file",
			flash_swf_url: '../resources/upload/Moxie.swf',
			silverlight_xap_url: '../resources/upload/Moxie.xap',
			multipart_params: params,
			filters: filters,
			init: {
				PostInit: function() {},
				FilesAdded: function(up, files) {
					if(files.length == 0) {
						return;
					}
					if(options.FilesAdded) {
						if(!options.FilesAdded(up, files)) {
							return false;
						}
					}

					for(var i in files) {
						var mFile = files[i];
						if(mFile.size == undefined || mFile.size == 0) {
							$.showErrorGritter("文件 " + mFile.name + " 为空，上传失败。");
							uploader.removeFile(mFile);
							continue;
						}
						$(upContainer).append("<div class=\"file\" file-id=\"" + mFile.id + "\"><h6>" + mFile.name + " 上传中<span class='percent'></span>...</h6><span class=\"close\" file-id=\"" + mFile.id + "\">&times;</span></div>");
						$(upContainer).append("<div class=\"progress\" file-id=\"" + mFile.id + "\"><div class=\"progress-bar progress-bar-striped active\" role=\"progressbar\" aria-valuenow=\"0\" aria-valuemin=\"0\" aria-valuemax=\"100\" style=\"width: 0%\"><span class=\"sr-only\"></span></div></div>");
					}
					$(upContainer).find(".close").click(function() {
						var divOfTheFile = $("div[file-id='" + $(this).attr("file-id") + "']");
						divOfTheFile.fadeOut(10, null, function() {
							divOfTheFile.remove();
						});
					});
					uploader.start();

					//plupload.formatSize(file.size)
				},
				FileUploaded: function(up, file, response) {
					$("div[file-id='" + file.id + "'] h6").text("上传完成");
					setTimeout(function() {
						$("div[file-id='" + file.id + "']").remove();
					}, 500);

					if(options.FileUploaded) {
						setTimeout(function() {
							options.FileUploaded(up, file, response);
						}, 600);
					}
				},
				UploadProgress: function(up, file) {
					$("div[file-id='" + file.id + "'] .percent").text("(" + file.percent + "%)");
					$("div[file-id='" + file.id + "'] .progress-bar").css("width", file.percent + "%");

					if(options.UploadProgress) {
						options.UploadProgress(up, file);
					}
				},
				Error: function(up, err) {
					console.log(arguments);
					if(err.code == -600) $.showErrorGritter("文件大小不能超过" + (options.url.indexOf("document") >= 0 ? 50 : 5) + "M,请重新选择文件上传");
					//err.message  err.code
					if(options.Error) {
						options.Error(up, err);
					}
					if(err.code == -200) {
						$.showErrorGritter("文件上传超时!请重新上传");
						$(upContainer).empty();
					}
					if(err.code == -601) {
						$.showErrorGritter("请选择excel格式的文件");
					}
				}
			}
		});
		uploader.init();
	};
	/*
	 * 列表树 (未完成)
	 * */
	$.fn.initListTree = function(options) {

		var treeUlDom = $("<ul class=\"list-group\"></ul>");
		//数据
		var treeData = options.data;
		var nodeIndex = -1;
		var initTreeNode = function(nodes) {
			for(var i in nodes) {
				nodeIndex++;
				var nodeData = nodes[i];
				//dom
				var nodeItemDom = $("<li class=\"list-group-item node-\" data-nodeid=\"0\" data-id=\"0\"></li>");
				var treeExpandDom = $("<span class=\"icon expand-icon fa fa-minus\"></span> ");
				var nodeTextDom = "<span class=\"icon node-icon\"></span>";
				//data
				nodeItemDom.attr("data-nodeid", nodeIndex);
				nodeItemDom.attr("data-id", nodeData.id);
				//缩进
				//nodeItemDom.append("<span class=\"indent\"></span> ");
				//折叠
				nodeItemDom.append(treeExpandDom);
				nodeItemDom.append(nodeTextDom + nodeData.text);
				treeUlDom.append(nodeItemDom);

				if(nodeData.nodes) {
					initTreeNode(nodeData.nodes);
				}
			}
		};
		initTreeNode(treeData);
		$(this).empty();
		var treeDom = "<div class=\"treeview\">" +
			"  <ul class=\"list-group\">" +
			"    <li class=\"list-group-item node-\" data-nodeid=\"0\" data-id=\"0\" style=\"color:undefined;background-color:undefined;\">" +
			"      <span class=\"icon expand-icon fa fa-minus\"></span>" +
			"      <span class=\"icon node-icon\"></span>企业代码</li>" +
			"    <li class=\"list-group-item node-\" data-nodeid=\"1\" data-id=\"102103\" style=\"color:undefined;background-color:undefined;\">" +
			"      <span class=\"indent\"></span>" +
			"      <span class=\"icon fa\"></span>" +
			"      <span class=\"icon node-icon\"></span>资讯类型</li>" +
			"    <li class=\"list-group-item node-\" data-nodeid=\"2\" data-id=\"103\" style=\"color:undefined;background-color:undefined;\">" +
			"      <span class=\"indent\"></span>" +
			"      <span class=\"icon fa\"></span>" +
			"      <span class=\"icon node-icon\"></span>文档类型</li>" +
			"    <li class=\"list-group-item node-\" data-nodeid=\"3\" data-id=\"102\" style=\"color:undefined;background-color:undefined;\">" +
			"      <span class=\"indent\"></span>" +
			"      <span class=\"icon fa\"></span>" +
			"      <span class=\"icon node-icon\"></span>资讯类型</li>" +
			"    <li class=\"list-group-item node-\" data-nodeid=\"4\" data-id=\"102104\" style=\"color:undefined;background-color:undefined;\">" +
			"      <span class=\"indent\"></span>" +
			"      <span class=\"icon fa\"></span>" +
			"      <span class=\"icon node-icon\"></span>部门层级</li>" +
			"    <li class=\"list-group-item node-\" data-nodeid=\"5\" data-id=\"102106\" style=\"color:#FFFFFF;background-color:#428bca;\">" +
			"      <span class=\"indent\"></span>" +
			"      <span class=\"icon fa\"></span>" +
			"      <span class=\"icon node-icon\"></span>请假类型</li>" +
			"  </ul>" +
			"</div>";
		$(this).append(treeUlDom);
	};

	/*
	 * 标签式查询
	 * */
	$.initSearchControls4TagMode = function(options) {
		var defOptions = {
			auto: false,
			url: "",
			grid: "",
			isShow: "",
			container: ".search",
			key_name: "key",
			key_placeholder: "输入关键字查询"
		};
		//关键字 属性名
		options.key_name = options.keyName || options.key_name;
		//关键字 placeholder
		options.key_placeholder = options.keyPlaceholder || options.key_placeholder;
		//是否显示关键字查询
		options.showKeywordSearch = options.showKeywordSearch == undefined ? true : options.showKeywordSearch;
		//表格除去高度
		options.removeHeight4Grid = options.removeHeight4Grid || 0;
		//是否显示筛选模块
		var isShowFiltrate = (options.isShow == undefined ? true : options.isShow);
		options = $.extend({}, defOptions, options);
		//$(options.container).empty();
		//search key
		var searchKeyContainer = $("<div class=\"form-inline first-form-inline\"></div>");
		//keyword
		searchKeyContainer.append("<input class=\"form-control form-control-search\" maxlength='50' type=\"search\" placeholder=\"" + options.key_placeholder + "\" /> ");
		//search button
		searchKeyContainer.append("<button type=\"button\" class=\"btn btn-search\" role-auth=\"os/roles|get\"><img src='../resources/images/search-icon.png' alt='图标' /></button>");
		options.showKeywordSearch && $(options.container).append(searchKeyContainer);
		//crumbs
		if(isShowFiltrate) {
			var crumbContainer = $("<div class=\"form-inline form-inline-new form-crumb\"></div>");
			//tags
			var tagsDom = $("<ol class=\"breadcrumb tags\"></ol>");
			//collapse button
			tagsDom.append("<li class=\"collapse\"><span class=\"btn-collapse\"><span>收起筛选</span> <img class='fa-chevron-up' src='../resources/images/filter-up.png' data-trans-src='../resources/images/filter-down.png' alt='图标' /></span></li>");
			//title
			tagsDom.append("<li class=\"title\">筛选 ></li> ");
			//导出按钮
			if(options.self_define_btn) {
				tagsDom.append("<li class=\"btn-export\"><a class='btn btn-default btn-sm'>" + options.self_define_btn.text + "</a></li> ");
			}
			//clear button
			tagsDom.append("<li class='tag-clear hide'><span class=\"btn-clear\"><img class='clear-trash-icon' src='../resources/images/clear-trash-icon.png' data-trans-src='../resources/images/clear-trash-red-icon.png' /> 清空筛选</span></li>");
			crumbContainer.append(tagsDom);

			//groups
			var groupsDom = $("<div class=\"groups\"></div>");
			//条件列表
			if(options.groups && options.groups.length > 0) {
				for(var i in options.groups) {
					var groupData = options.groups[i];
					var isDateItem = groupData.type == "date";
					var dateMode = groupData.mode;
					groupsDom.append("<hr>");
					var groupDom = $("<ol class=\"breadcrumb group at\" tag='" + groupData.name + "' data-type=\"" + groupData.type + "\"></ol>");
					groupDom.data("group", groupData);
					groupDom.append("<li class=\"title at\">" + groupData.text + "：</li>");
					groupDom.append("<li class=\"items-container at\"></li>");
					var groupItemsContainerDom = groupDom.find(".items-container");
					if(groupData.items && groupData.items.length > 0) {
						for(var j in groupData.items) {
							var groupItemData = groupData.items[j];
							//取消“全部”条件 展示在这里删除
							if(groupItemData.key == "全部" && groupItemData.value == 0) {
								continue;
							}
							if(isDateItem) {
								if(groupItemData.type == "text") {
									groupItemsContainerDom.append("<li class=\"item item-text at\">" + groupItemData.value + "</li>");
								} else {
									if(dateMode == "time") {
										groupItemsContainerDom.append("<li class=\"item at\" data-type=\"" + groupData.type + "\"><label><input type=\"text\" key=\"" + groupItemData.name + "\" value=\"" + (groupItemData.value || "") + "\" placeholder=\"" + groupItemData.placeholder + "\" class=\"date-picker datetimepicker\"/></label></li>");
									} else {
										var tmpDateFmt = "yyyy-mm-dd";
										if(dateMode == "month") {
											tmpDateFmt = "yyyy-mm";
										}
										groupItemsContainerDom.append("<li class=\"item at\" data-type=\"" + groupData.type + "\"><label><input type=\"text\" key=\"" + groupItemData.name + "\" value=\"" + (groupItemData.value || "") + "\" placeholder=\"" + groupItemData.placeholder + "\" class=\"date-picker\" data-date-format=\"" + tmpDateFmt + "\"/></label></li>");
									}
								}
							} else {
								if(groupItemData.notShowCheckbox) {
									if(groupItemData.disabled == "true") {
										groupItemsContainerDom.append("<li class=\"item at\"><label>" + groupItemData.key + "</label></li>");
									} else {
										groupItemsContainerDom.append("<li class=\"item at\"><label>" + groupItemData.key + "</label></li>");
									}
								} else if(groupItemData.icon) {
									groupItemsContainerDom.append("<li class=\"item at\"><label><input type=\"checkbox\" key=\"" + groupItemData.key + "\" value=\"" + groupItemData.value + "\" /> " + "<i class=\"" + groupItemData.icon + "\" style=\"color:red;\"></i>" + groupItemData.key + "</label></li>");
								} else {
									if(groupItemData.disabled == "true") {
										if(groupItemData.isDefaultChecked == true) {
											groupItemsContainerDom.append("<li class=\"item at\"><label><input  disabled=\"disabled\" checked=\"checked\" type=\"checkbox\" key=\"" + groupItemData.key + "\" value=\"" + groupItemData.value + "\" /> " + groupItemData.key + "</label></li>");
										} else {
											groupItemsContainerDom.append("<li class=\"item at\"><label><input disabled=\"disabled\" type=\"checkbox\" key=\"" + groupItemData.key + "\" value=\"" + groupItemData.value + "\" /> " + groupItemData.key + "</label></li>");
										}
									} else {
										if(groupItemData.isDefaultChecked == true) {
											groupItemsContainerDom.append("<li class=\"item at\"><label><input checked=\"checked\" type=\"checkbox\" key=\"" + groupItemData.key + "\" value=\"" + groupItemData.value + "\" /> " + groupItemData.key + "</label></li>");
										} else {
											groupItemsContainerDom.append("<li class=\"item at\"><label><input type=\"checkbox\" key=\"" + groupItemData.key + "\" value=\"" + groupItemData.value + "\" /> " + groupItemData.key + "</label></li>");
										}
									}

								}
							}
						}
					}
					groupsDom.append(groupDom);
				}
			}
			crumbContainer.append(groupsDom);
			$(options.container).append(crumbContainer);
			if($(options.container + ' .datetimepicker').length > 0)
				introduceJsOrCss(["bootstrap-datetimepicker.min.css", "bootstrap-datetimepicker.min.js"], 1, function() {
					//绑定时间插件
					$(options.container + ' .datetimepicker').datetimepicker({
						autoclose: true,
						format: 'hh:ii',
						startView: 1,
						minuteStep: 1,
						maxView: 1,
						showMeridian: true
					});
				});
			$(".btn-clear").mouseover(function() {
				transImgSrc($(this).find(".clear-trash-icon"));
			}).mouseout(function() {
				transImgSrc($(this).find(".clear-trash-icon"));
			});
		}
		//日期条件
		try {
			//日期选择
			$(options.container + " .date-picker[data-date-format='yyyy-mm-dd']").datepicker({
				autoclose: true,
				clearBtn: true,
				todayHighlight: true
			});
			//月份选择
			$(options.container + " .date-picker[data-date-format='yyyy-mm']").datepicker({
				startView: 1,
				maxViewMode: 1,
				minViewMode: 1,
				autoclose: true,
				clearBtn: true,
				todayHighlight: true
			});
		} catch(e) {}
		$(options.container + " .date-picker").change(function() {
			tagChangeCallback();
		});
		$(options.container + " ol").each(function() {
			$(this).find(".items-container")
				.css("width", $(this).outerWidth(true) -
					$(this).find(".title").outerWidth(true) - 80 + "px");
		});
		var selectedTagsData = {};
		//条件选择
		$(options.container + " .group .item :checkbox").change(function() {
			//clear
			$(options.container + " .tags li.tag").remove();
			var selectTags = {};
			$(options.container + " .group .item :checkbox:checked").each(function() {
				var groupData = $(this).parent().parent().parent().parent().data("group");
				if(groupData) {
					if(!selectTags[groupData.text]) {
						selectTags[groupData.text] = {
							items: [],
							name: groupData.name
						};
					}
					selectTags[groupData.text].items.push({
						key: $(this).attr("key"),
						value: $(this).val()
					});
				}
			});
			selectedTagsData = {};
			for(var i in selectTags) {
				var tagData = selectTags[i];
				var tagTitleText = i + "：";
				var tagItemText = "";
				//var tagHtml="<span class='tag-group-name'>"+i+":</span>";
				selectedTagsData[tagData.name] = [];
				for(var j in tagData.items) {
					if(j > 0) {
						tagItemText += "  ";
					}
					//tagHtml+="<span class='tag-group-item'>"+tagData.items[j].key+"</span>";
					tagItemText += tagData.items[j].key;
					selectedTagsData[tagData.name].push(tagData.items[j].value);
				}
				$(options.container + " .tags li.tag-clear").before(" <li class=\"tag\" title=\"" + tagTitleText + tagItemText + "\">" + ((tagTitleText + tagItemText).length > 15 ? ("<span class='tag-group-name'>" + tagTitleText + "</span><span class='tag-item-name'>" + tagItemText.substring(0, 15) + "...") + "</span>" : "<span class='tag-group-name'>" + tagTitleText + "</span><span class='tag-item-name'>" + tagItemText + "</span>") + " <img src='../resources/images/filter-close.png' class=\"fa-close\" tag='" + tagData.name + "'/></li>");
			}
			//clear btn is need dispaly
			displayClearConditionBtn();
			//init close
			initTagCloseEvent();
			//reset grid height
			setGridHeight();
			//change
			tagChangeCallback();
		});
		//收起
		var tmpWindowHeight = /*localStorage["_IFRAMEHEIGHT"] ||*/ $(window).height();
		var setGridHeight = function() {
			//122 = pager height 55 + table header 37 + body padding 10 + content margin-top 10;
			//$(".ui-jqgrid-bdiv").mCustomScrollbar("update");
			if(options.grid) {
				$(options.grid).jqGrid('setGridHeight', (tmpWindowHeight - $(options.container).outerHeight(true) - options.removeHeight4Grid - 148) + "px");
			}
		};
		$(options.container + " .btn-collapse").click(function() {
			transImgSrc($(this).find(">img"));
			$(options.container + " .groups").toggle();
			if($(this).find(">img").hasClass("fa-chevron-up")) {
				$(this).find(">img").removeClass("fa-chevron-up").addClass("fa-chevron-down");
				$(this).find("span").text("显示筛选");
			} else {
				$(this).find(">img").removeClass("fa-chevron-down").addClass("fa-chevron-up");
				$(this).find("span").text("收起筛选");
			}
			//set height
			setGridHeight();
		});
		//清除条件
		$(options.container + " .btn-clear").click(function() {
			//remove tag
			$(options.container + " .tags li.tag").remove();
			//clear checked
			$(options.container + " .group .item :checkbox").removeAttr("checked");
			//clear btn is need dispaly
			displayClearConditionBtn();
			//reload
			tagChangeCallback();
		});
		//点击按钮查询
		$(options.container + " .btn-search").click(function() {
			tagChangeCallback();
		});
		//enter键查询
		$(options.container + " .form-control-search").keydown(function(e) {
			if(e.keyCode == 13) tagChangeCallback();
		});
		//删除条件
		var initTagCloseEvent = function() {
			$(options.container + " .tags .tag .fa-close").click(function() {
				//remove tag
				$(this).parent().remove();
				$(options.container + " .group[tag='" + $(this).attr("tag") + "'] :checkbox").removeAttr("checked");
				//clear btn is need dispaly
				displayClearConditionBtn();
				//reset grid height
				setGridHeight();
				//reload
				tagChangeCallback();
			});
		};
		//控制清除条件按钮
		var displayClearConditionBtn = function() {
			if($(options.container + " .group .item :checkbox:checked").length == 0) {
				$(options.container + " .tag-clear").addClass("hide");
			} else {
				$(options.container + " .tag-clear").removeClass("hide");
			}
		};
		//导出按钮
		$(".tags .btn-export").click(function() {
			tagChangeCallback(1);
		});
		//重新加载数据
		var tagChangeCallback = function(isExport) {
			var selectTags = {};
			//复选
			$(options.container + " .group .item :checkbox:checked").each(function() {
				var groupData = $(this).parent().parent().parent().parent().data("group");
				if(groupData) {
					if(!selectTags[groupData.name]) {
						selectTags[groupData.name] = [];
					}
					selectTags[groupData.name].push($(this).val());
				}
			});
			//日期
			$(options.container + " .group .item[data-type='date'] input.date-picker").each(function() {
				var keyName = $(this).attr("key");
				var dateValue = $(this).val();
				if(keyName && dateValue) {
					if(!selectTags[keyName]) {
						selectTags[keyName] = "";
					}
					selectTags[keyName] = dateValue;
				}
			});
			//keyword
			if(options.showKeywordSearch)
				selectTags[options.key_name] = $(options.container + " .form-control-search").val();
			//alert(JSON.stringify(selectTags));
			if(options.beforeReloadGrid) {
				options.beforeReloadGrid(selectTags);
			}
			if(isExport) {
				selectTags.is_export = isExport;
				var urlHasQues = options.url.indexOf("?") >= 0;
				//alert(options.url + (urlHasQues ? "&" : "") + $.toQueryString(selectTags, !urlHasQues))
				$.downloadFile(options.url + (urlHasQues ? "&" : "") + $.toQueryString(selectTags, !urlHasQues));
				return "";
			}
			if(options.auto) {
				var urlHasQues = options.url.indexOf("?") >= 0;
				$(options.grid).jqGrid('setGridParam', {
					page: 1,
					url: options.url + (urlHasQues ? "&" : "") + $.toQueryString(selectTags, !urlHasQues)
				}).trigger("reloadGrid", {});
			}
			if(options.onChange) {
				options.onChange(selectTags);
			}
		};

		//reset grid height
		setGridHeight();
		$(options.container + " .group .item :checkbox:checked").trigger("change");
	};

	/*
	 * 添加页面备注信息
	 * */
	if(w.self != w.top) {
		var moduleId = $.getQueryObject().mid;
		if(moduleId) {
			var descDatas = JSON.parse(localStorage["_PAGEDESC"] || "{}");
			if(descDatas) {
				var descData = descDatas[moduleId];
				if(descData) {
					descData.icon && $(".page-container>.remark>.fa").removeClass("fa-list-ol").addClass(descData.icon);
					descData.desc && $(".page-container>.remark>span").text(descData.desc);
				}
			}
		}
	}

	/*
	 * 录入限制
	 * */
	inputLimit();

	/*
	 * 初始可选择数据文本框 <input type="text" data-datasource="选项1,选项2,选项3,选项4" />
	 * */
	initTextboxHasDataSource();
}(jQuery, window, document));

/*
 * Function extend
 * */
// 对Date的扩展，将 Date 转化为指定格式的String
// 月(M)、日(d)、小时(h)、分(m)、秒(s)、季度(q) 可以用 1-2 个占位符， 
// 年(y)可以用 1-4 个占位符，毫秒(S)只能用 1 个占位符(是 1-3 位的数字) 
// 例子： 
// (new Date()).Format("yyyy-MM-dd hh:mm:ss.S") ==> 2006-07-02 08:09:04.423 
// (new Date()).Format("yyyy-M-d h:m:s.S")      ==> 2006-7-2 8:9:4.18 
Date.prototype.Format = function(fmt) {
	if(!this) {
		return '';
	}

	var o = {
		"M+": this.getMonth() + 1, //月份 
		"d+": this.getDate(), //日 
		"h+": this.getHours(), //小时 
		"m+": this.getMinutes(), //分 
		"s+": this.getSeconds(), //秒 
		"q+": Math.floor((this.getMonth() + 3) / 3), //季度 
		"w": "日一二三四五六".charAt(this.getDay()), //星期
		"S": this.getMilliseconds() //毫秒 
	};
	if(/(y+)/.test(fmt)) fmt = fmt.replace(RegExp.$1, (this.getFullYear() + "").substr(4 - RegExp.$1.length));
	for(var k in o)
		if(new RegExp("(" + k + ")").test(fmt)) fmt = fmt.replace(RegExp.$1, (RegExp.$1.length == 1) ? (o[k]) : (("00" + o[k]).substr(("" + o[k]).length)));
	return fmt;
};
//Format共存 Format 方法名不标准
Date.prototype.format = function(fmt) {
	if(!this) {
		return '';
	}
	var o = {
		"M+": this.getMonth() + 1, //月份 
		"d+": this.getDate(), //日 
		"h+": this.getHours(), //小时 
		"m+": this.getMinutes(), //分 
		"s+": this.getSeconds(), //秒 
		"q+": Math.floor((this.getMonth() + 3) / 3), //季度 
		"w": "日一二三四五六".charAt(this.getDay()), //星期
		"S": this.getMilliseconds() //毫秒 
	};
	if(/(y+)/.test(fmt)) fmt = fmt.replace(RegExp.$1, (this.getFullYear() + "").substr(4 - RegExp.$1.length));
	for(var k in o)
		if(new RegExp("(" + k + ")").test(fmt)) fmt = fmt.replace(RegExp.$1, (RegExp.$1.length == 1) ? (o[k]) : (("00" + o[k]).substr(("" + o[k]).length)));
	return fmt;
};
//获取时间戳
Date.prototype.getTimestamp = function() {
	return Math.round(this.getTime() / 1000);
};
Date.prototype.addDay = function(value) {
	return new Date(this.setDate(this.getDate() + value));
}
Date.prototype.addMonth = function(value) {
	return new Date(this.setMonth(this.getMonth() + value));
}
Date.prototype.addHour = function(value) {
	return new Date(this.setHours(this.getHours() + value));
}

//IE8 Array indexOf 
if(!Array.prototype.indexOf) {
	Array.prototype.indexOf = function(elt) {
		var len = this.length >>> 0;
		var from = Number(arguments[1]) || 0;
		from = (from < 0) ? Math.ceil(from) : Math.floor(from);
		if(from < 0)
			from += len;
		for(; from < len; from++) {
			if(from in this &&
				this[from] === elt)
				return from;
		}
		return -1;
	};
}
/*
 *  方法:Array.remove(val)
 *  功能:根据元素值删除数组元素.
 *  参数:元素值
 *  返回:在原数组上修改数组
 Array.prototype.indexOf = function (val) {
 for (var i = 0; i < this.length; i++) {
 if (this[i] == val) {
 return i;
 }
 }
 return -1;
 };
 Array.prototype.remove = function (val) {
 var index = this.indexOf(val);
 if (index > -1) {
 this.splice(index, 1);
 }
 };
 */

function removeArray(source, val) {
	var index = -1;
	for(var i = 0; i < source.length; i++) {
		if(source[i] == val) {
			index = i;
			break;
		}
	}
	if(index >= 0) {
		source.splice(index, 1);
	}
}

function getIndexOfArray(source, fieldName, val) {
	var index = -1;
	for(var i = 0; i < source.length; i++) {
		var model = source[i];
		if(model[fieldName] == val) {
			index = i;
			break;
		}
	}
	return index;
}

function removeArrayByField(source, fieldName, val) {
	var index = getIndexOfArray(source, fieldName, val);
	if(index >= 0) {
		source.splice(index, 1);
	}
}

//url 参数
function GetQueryString(name) {
	var reg = new RegExp("(^|&)" + name + "=([^&]*)(&|$)");
	var r = window.location.search.substr(1).match(reg);
	if(r != null) return unescape(r[2]);
	return null;
}

//默认图片设置
var defImgPath = "/Resources/Images/def.jpg";

function SetDefImg(obj) {
	$(obj).attr("src", defImgPath);
}

//自定义Ajax提交
var currAjaxIsPosting = false;

function CustomAjax(url, data, successcallback, btn) {
	if(currAjaxIsPosting) {
		return;
	}
	var oldBtnValue = $(btn).val();

	$(btn).val("提交中...");

	currAjaxIsPosting = true;
	$.ajax({
		type: 'POST',
		url: url,
		data: data,
		success: function(response) {
			currAjaxIsPosting = false;
			$(btn).val(oldBtnValue);
			if(successcallback)
				successcallback(response);
		},
		error: function(XMLHttpRequest, textStatus, errorThrown) {
			$(btn).val(oldBtnValue);
			currAjaxIsPosting = false;
			alert("错误代码：" + textStatus);
		}
	});
}

//由classid获得企业代码
function getClassByClassIds(ids) {
	var classIds = JSON.parse(localStorage["_CLASSIDS"]);
	for(var i in ids) {
		var tmpData = {};
		for(var n in classIds[ids[i].class_id]) {
			if(typeof(classIds[ids[i].class_id][n]) != "object") {
				continue;
			} else {
				tmpData[n] = classIds[ids[i].class_id][n];
			}
		}
		ids[i].callback(tmpData);
	}
}

/*
 * 录入限制
 * */
function inputLimit() {
	$("input[data-type]").keyup(function() {
		//光标
		var pos = getTxtCursorPosition($(this)[0]);

		var cObj = this;
		//type
		var typeVal = $(cObj).attr("data-type");
		var typeValArr = typeVal.split("|");
		var type = typeValArr[0];
		var isInt = type == "int";
		var isFloat = type == "float";
		if(!isInt && !isFloat) {
			return false;
		}
		//		var maxVal = typeValArr[1],
		//			minVal = typeValArr[2],
		var pointLength = parseInt(typeValArr[1]);
		if(!pointLength || isNaN(pointLength)) {
			pointLength = 2;
		}
		//value
		var oval = $(cObj).attr("oval");
		var cval = $(cObj).val().replace(/e/g, "").replace(/\s/g, "");
		if(isInt)
			cval = cval.replace(".", "");
		if(!oval && isNaN(cval)) {
			$(cObj).val("");
			//光标
			setTxtCursorPosition($(this)[0], pos - 1);
			return false;
		}
		if(oval && !cval) {
			$(cObj).val("");
			$(cObj).attr("oval", "");
			//光标
			setTxtCursorPosition($(this)[0], pos - 1);
			return false;
		}
		if(oval && (!cval || isNaN(cval))) {
			$(cObj).val(oval);
			//光标
			setTxtCursorPosition($(this)[0], pos - 1);
			return false;
		}
		//fix
		if(isFloat) {
			cval = (cval).replace(/^(.*\..{2}).*$/, "$1");
		}
		$(cObj).val(cval);
		$(cObj).attr("oval", cval);
		//光标
		setTxtCursorPosition($(this)[0], pos);
		//for IE bug
		$(this).trigger("change");
	});
	$("input[data-type]").each(function() {
		$(this).attr("oval", $(this).val());
	});
}

function getTxtCursorPosition(dom) {
	var oTxt1 = dom;
	var cursurPosition = -1;
	if(oTxt1.selectionStart) { //非IE浏览器
		cursurPosition = oTxt1.selectionStart;
	} else { //IE
		var range = document.selection.createRange();
		range.moveStart("character", -oTxt1.value.length);
		cursurPosition = range.text.length;
	}
	return cursurPosition;
}

function setTxtCursorPosition(dom, i) {
	var oTxt1 = dom;
	var cursurPosition = -1;
	if(oTxt1.selectionStart) { //非IE浏览器
		oTxt1.selectionStart = i;
		oTxt1.selectionEnd = i;
	} else { //IE
		var range = oTxt1.createTextRange();
		range.move("character", i);
		range.select();
	}
}

//Grid Pager icons replace
function updatePagerIcons(table, pager, count) {
	table = "#gbox_" + table.substring(1);
	$(table + " " + pager + "_left td[dir='ltr']:first .s-count").remove();
	$(table + " " + pager + "_left td[dir='ltr']:first").append("<span class='s-count'>，" + count + " 条</span>");
	if($(table).attr("icon-ok") != "1") {
		var replacement = {
			'ui-icon-seek-first': 'fa fa-angle-double-left bigger-140',
			'ui-icon-seek-prev': 'fa fa-angle-left bigger-140',
			'ui-icon-seek-next': 'fa fa-angle-right bigger-140',
			'ui-icon-seek-end': 'fa fa-angle-double-right bigger-140'
		};
		$(table + ' .ui-pg-table:not(.navtable) > tbody > tr > .ui-pg-button > .ui-icon').each(function() {
			var icon = $(this);
			var $class = $.trim(icon.attr('class').replace('ui-icon', ''));
			if($class in replacement) icon.attr('class', 'ui-icon ' + replacement[$class]);
		});
		//$(table + " " + pager + "_left").insertAfter($(table + " " + pager + "_center")).width(5);
		$(table + " " + pager + "_center").width(5);
		$(table + " " + pager + "_left select.ui-pg-selbox:first").addClass("hide");
		$(table).attr("icon-ok", "1");
	}
	//$(pager+"_left").empty();

}
//添加表格底部左侧菜单
function bindGridFooterLeftButtons(table, pager, footerBtnContainer) {
	var tableSelector = table.substring(1);
	table = "#gbox_" + tableSelector;
	if($(table).attr("f-btn-ok") != "1") {
		footerBtnContainer = footerBtnContainer || "#grid-footer-container";
		var gridfootercontainer = $(footerBtnContainer);
		if(gridfootercontainer) {
			$(gridfootercontainer).find("[show-on]").hide();
			$(table + " " + pager + "_right").append("<span class='lblSelectRowCount'><span>").append($(gridfootercontainer).html());
			$(gridfootercontainer).html("");
			$(table).attr("f-btn-ok", "1");
		}
	}
}

//表单输入验证
function inputValidation(container) {
	container = container || $("body");
	//tiptemplate = tiptemplate || "请录入{0}。";
	var inputRes = true;
	$(container).find("[nulltip]").each(function() {
		var resSet = setErrorLabelAfterInput4Validation(this);
		inputRes = inputRes ? resSet : false;
		$(this).unbind("blur").blur(function() {
			setErrorLabelAfterInput4Validation(this);
		});
	});
	return inputRes;
}
//表单输入验证
function inputValidateForGritter(container, positionclass) {
	container = container || "body";
	var inputRes = true;
	$(container + " [nulltip]," + container + " [valitype]").each(function() {
		var cValue = $(this).val();
		//ie
		if($(this).attr("placeholder") == cValue)
			cValue = null;
		if(!cValue) {
			var nulltip = $(this).attr("nulltip");
			if(!nulltip)
				return true;

			$.clearGritter();
			$.showErrorGritter("{N} 不能为空，请输入。".replace(/{N}/g, nulltip), {
				time: 3000,
				position: positionclass
			});
			$(this).focus();

			inputRes = false;
			return false;
		} else {
			var nulltip = $(this).attr("nulltip");
			var valitype = $(this).attr("valitype");
			var tipTxt = "";
			if(valitype == "mobile") {
				inputRes = mobileValidate(cValue);
				tipTxt = "手机号码格式有误，请检查，<br>（如：13883000000）";
			} else if(valitype == "email") {
				inputRes = emailValidate(cValue);
				tipTxt = "邮箱格式有误，请检查，<br>（如：name@baidu.com）";
			} else if(valitype == "password") {
				var rangeArr = $(this).attr("valirange").split('-');
				if(cValue.length > parseInt(rangeArr[1]) || cValue.length < parseInt(rangeArr[0])) {
					inputRes = false;
				}
				tipTxt = $(this).attr("valitip");
			} else if(valitype == "url") {
				inputRes = urlValidate(cValue);
				tipTxt = "网络地址有误，请检查，<br>（如：http://t.cn）";
			} else if(valitype == "tel") {
				inputRes = telValidate(cValue);
				tipTxt = nulltip + "号码有误，请检查，<br>（如：023-8666666、98988888）";
			}
			if(!inputRes) {
				$.clearGritter();
				$.showErrorGritter(tipTxt, {
					time: 3000,
					position: positionclass
				});
				$(this).focus();
				return false;
			}
		}
	});
	return inputRes;
}
//手机号码验证
function mobileValidate(mobile) {
	return /^(((13[0-9]{1})|(17[0-9]{1})|(15[0-9]{1})|(17[0-9]{1})|(18[0-9]{1}))+\d{8})$/.test(mobile);
}
//号码验证
function telValidate(tel) {
	return /^\d{3,4}-?\d{7,8}$/.test(tel) || /^[0-9]{7,8}$/.test(tel);
}
//邮箱验证
function emailValidate(email) {
	return /^(\w-*\.*)+@(\w-?)+(\.\w{2,})+$/.test(email);
}
//网址
function urlValidate(url) {
	var reg = new RegExp();
	reg.compile("^[A-Za-z]+://[A-Za-z0-9-_]+\\.[A-Za-z0-9-_%&\?\/.=]+$");
	return reg.test(url);
}

function setErrorLabelAfterInput4Validation(obj) {
	var cValue = $(obj).val();
	var cTip = $(obj).attr("nulltip");
	var hasError = $(obj).parent().hasClass("has-error");
	if(!cValue) {
		if(!hasError) {
			$(obj).parent().addClass("has-error");
			$(obj).after("<span class=\"label-error\">请录入" + cTip + "</span>");
			//$.modal().alert(tiptemplate.replace("{0}", cTip));
		}

		//inputRes = false;
		return false;
	} else {
		if(hasError) {
			$(obj).parent().removeClass("has-error");
			$(obj).parent().find(".label-error").remove();
		}
	}

	return true;
}

//初始带数据文本框 <input type="text" data-datasource="选项1,选项2,选项3,选项4" />
function initTextboxHasDataSource(changeCallback) {
	//文本框带数据
	//clear
	$(".list-datasource-options").remove();
	$("input[data-datasource]").unbind("focus").unbind("blur").unbind("keypress");
	$("input[data-datasource]").focus(function() {
		var inputDom = $(this);
		if(inputDom.next(".list-datasource-options").length == 0) {
			var dataSource = inputDom.attr("data-datasource");
			if(!dataSource) {
				return false;
			}
			var dataSourceArr = dataSource.split(',');
			var dataSourceDom = $("<ul class=\"list-datasource-options\"></ul>");
			dataSourceDom.css("min-width", inputDom.outerWidth() + "px").css("left", (inputDom[0].offsetLeft) + "px");
			for(var i in dataSourceArr) {
				dataSourceDom.append("<li>" + dataSourceArr[i] + "</li>");
			}
			inputDom.after(dataSourceDom);
			//选中
			inputDom.next(".list-datasource-options").children("li").mousedown(function() {
				var selectVal = $(this).text();
				inputDom.val(selectVal);
				inputDom.trigger("change")
				changeCallback && changeCallback(selectVal);
			});
		}
		inputDom.next(".list-datasource-options").show();
	}).blur(function() {
		$(this).next(".list-datasource-options").hide();
	}).keypress(function() {
		$(this).next(".list-datasource-options").hide();
	});
}
/* Function end */
/*
 * Controller
 * */
function Model(value) {
	this._value = typeof value === 'undefined' ? '' : value;
	this._listeners = [];
}
Model.prototype.set = function(value) {
	var self = this;
	self._value = value;
	//setTimeout(function() {
	self._listeners.forEach(function(listener) {
		listener.call(self, value);
	});
	//});
};
Model.prototype.watch = function(listener) {
	this._listeners.push(listener);
};
Model.prototype.bind = function(node) {
	this.watch(function(value) {
		var bindName = node.getAttribute("bind");
		//新增多级对象 data.user.name
		if(bindName.indexOf(".") > 0) {
			var bindNameArr = bindName.split(".");
			for(var i = 1; i < bindNameArr.length; i++) {
				if(!value) {
					break;
				}
				value = value[bindNameArr[i]];
			}
		}
		//设置值到页面     
		var tagName = node.tagName;
		if(tagName == "INPUT" || tagName == "SELECT") {
			var typeName = node.getAttribute("type");
			if(typeName == "checkbox") {
				node.checked = value;
			} else if(typeName == "radio") {
				var radioes = document.getElementsByName(node.name);
				for(var i = 0; i < radioes.length; i++) {
					radioes[i].checked = (radioes[i].value == value);
				}
			} else {
				node.value = value;
			}
		} else {
			node.innerHTML = value;
		}
	});

	//listen change event
	var mPrototype = this;
	if(node) {
		mPrototype._value = node.value;
		node.onchange = function() {
			var typeName = this.getAttribute("type");
			var currNodeIsCheckbox = typeName == "checkbox";
			var bindName = this.getAttribute("bind");
			var newValue = currNodeIsCheckbox ? this.checked : this.value;

			//新增多级对象 data.user.name
			if(bindName.indexOf(".") > 0) {
				mPrototype._value = mPrototype._value || {};
				var oldValue = mPrototype._value;
				var bindNameArr = bindName.split(".");
				if(bindNameArr.length == 2) {
					oldValue[bindNameArr[1]] = newValue;
				} else if(bindNameArr.length == 3) {
					oldValue[bindNameArr[1]][bindNameArr[2]] = newValue;
				}
			} else {
				mPrototype._value = newValue;
			}
		}
		//		node.addEventListener("change", function() {
		//			var typeName = this.getAttribute("type");
		//			if (typeName == "checkbox") {
		//				mPrototype._value = this.checked;
		//			} else
		//				mPrototype._value = this.value;
		//				
		//				alert(this.value);
		//		});
	}
};
//判断对象是否为空
function isEmptyObject(obj) {
	for(var key in obj) {
		return false;
	}
	return true;
}
//数组去重复
function unique(ary) {
	if((ary instanceof Array) && ary.length != 0) {
		var a = [ary[0]];
		for(var i = 0; i < ary.length; i++) {
			if(a.indexOf(ary[i]) == -1)
				a.push(ary[i]);
		}
		return a;
	}
}

function Controller(container, callback) {
	var models = {};
	var views = Array.prototype.slice.call(document.querySelectorAll((container || '') + ' [bind]'), 0);
	views.forEach(function(view) {
		var modelName = view.getAttribute('bind');
		//新增多级对象 data.user.name
		if(modelName.indexOf(".") > 0) {
			var modelNameArr = modelName.split(".");
			var modelObj = models[modelNameArr[0]];
			if(!modelObj) {
				models[modelNameArr[0]] = new Model();
				modelObj = models[modelNameArr[0]];
			}
			modelObj.bind(view);
		} else {
			(models[modelName] = models[modelName] || new Model()).bind(view);
		}
	});
	if(callback)
		callback.call(this, models);

	//return JSON object
	this.getJSON = function() {
		var resJson = {};
		for(var p in models) {
			if(p.indexOf("__") == 0) {
				continue;
			}
			if(typeof(models[p]) == "object") {
				resJson[p] = models[p]._value;
			}
		}
		return resJson;
	};

	//set value
	this.set = function(model, callback) {
		for(p in model) {
			if(!p || p == "") {
				continue;
			}
			if(!models[p]) {
				models[p] = models[p] || new Model();
			}
			models[p].set(model[p], callback);
		}
		if(callback) callback();
		return models;
	};
	//return models;
}
/* Controller end */

/* 
 * 右键菜单
 */

var context = context || (function() {

	var options = {
		fadeSpeed: 100,
		filter: function($obj) {
			// Modify $obj, Do not return
		},
		above: 'auto',
		preventDoubleContext: true,
		compress: false
	};

	function initialize(opts) {

		options = $.extend({}, options, opts);

		$(document).on('click', 'html', function() {
			$('.dropdown-context').fadeOut(options.fadeSpeed, function() {
				$('.dropdown-context').css({
					display: ''
				}).find('.drop-left').removeClass('drop-left');
			});
		});
		if(options.preventDoubleContext) {
			$(document).on('contextmenu', '.dropdown-context', function(e) {
				e.preventDefault();
			});
		}
		$(document).on('mouseenter', '.dropdown-submenu', function() {
			var $sub = $(this).find('.dropdown-context-sub:first'),
				subWidth = $sub.width(),
				subLeft = $sub.offset().left,
				collision = (subWidth + subLeft) > window.innerWidth;
			if(collision) {
				$sub.addClass('drop-left');
			}
		});

	}

	function updateOptions(opts) {
		options = $.extend({}, options, opts);
	}

	function buildMenu(data, id, subMenu) {
		var subClass = (subMenu) ? ' dropdown-context-sub' : '',
			compressed = options.compress ? ' compressed-context' : '',
			$menu = $('<ul class="dropdown-menu dropdown-context' + subClass + compressed + '" id="dropdown-' + id + '"></ul>');
		var i = 0,
			linkTarget = '';
		for(i; i < data.length; i++) {
			if(typeof data[i].divider !== 'undefined') {
				$menu.append('<li class="divider"></li>');
			} else if(typeof data[i].header !== 'undefined') {
				$menu.append('<li class="nav-header">' + data[i].header + '</li>');
			} else {
				if(typeof data[i].href == 'undefined') {
					data[i].href = 'javascript:;';
				}
				if(typeof data[i].target !== 'undefined') {
					linkTarget = ' target="' + data[i].target + '"';
				}
				if(typeof data[i].subMenu !== 'undefined') {
					$sub = ('<li class="dropdown-submenu"><a tabindex="-1" href="' + data[i].href + '">' + data[i].text + '</a></li>');
				} else {
					$sub = $('<li><a tabindex="-1" href="' + data[i].href + '"' + linkTarget + '>' + data[i].text + '</a></li>');
				}
				if(typeof data[i].action !== 'undefined') {
					var actiond = new Date(),
						actionID = 'event-' + actiond.getTime() * Math.floor(Math.random() * 100000),
						eventAction = data[i].action;
					$sub.find('a').attr('id', actionID);
					$('#' + actionID).addClass('context-event');
					$(document).on('click', '#' + actionID, eventAction);
				}
				$menu.append($sub);
				if(typeof data[i].subMenu != 'undefined') {
					var subMenuData = buildMenu(data[i].subMenu, id, true);
					$menu.find('li:last').append(subMenuData);
				}
			}
			if(typeof options.filter == 'function') {
				options.filter($menu.find('li:last'));
			}
		}
		return $menu;
	}

	function addContext(selector, data) {

		var d = new Date(),
			id = d.getTime(),
			$menu = buildMenu(data, id);

		$('body').append($menu);

		$(document).on('contextmenu', selector, function(e) {
			e.preventDefault();
			e.stopPropagation();

			$('.dropdown-context:not(.dropdown-context-sub)').hide();

			$dd = $('#dropdown-' + id);
			if(typeof options.above == 'boolean' && options.above) {
				$dd.addClass('dropdown-context-up').css({
					top: e.pageY - 20 - $('#dropdown-' + id).height(),
					left: e.pageX - 13
				}).fadeIn(options.fadeSpeed);
			} else if(typeof options.above == 'string' && options.above == 'auto') {
				$dd.removeClass('dropdown-context-up');
				var autoH = $dd.height() + 12;
				if((e.pageY + autoH) > $('html').height()) {
					$dd.addClass('dropdown-context-up').css({
						top: e.pageY - 20 - autoH,
						left: e.pageX - 13
					}).fadeIn(options.fadeSpeed);
				} else {
					$dd.css({
						top: e.pageY + 10,
						left: e.pageX - 13
					}).fadeIn(options.fadeSpeed);
				}
			}
		});
	}

	function destroyContext(selector) {
		$(document).off('contextmenu', selector).off('click', '.context-event');
	}

	return {
		init: initialize,
		settings: updateOptions,
		attach: addContext,
		destroy: destroyContext
	};
})();
//初始右键菜单
setTimeout(function() {
	//禁用右键菜单
	if(context.disable) {
		return false;
	}
	try {
		//内页启用右键菜单
		if(self != top) {
			//初始右键菜单
			context.init({
				preventDoubleContext: false
			});
			context.settings({
				compress: true
			});

			var contextMenus = [{
				header: '功能菜单'
			}, {
				divider: true
			}, {
				text: '刷新页面',
				action: function(e) {
					e.preventDefault();
					location.reload();
				}
			}, {
				text: '关闭页面',
				action: function(e) {
					e.preventDefault();
					if(!context.cannotClose) {
						parent.closeCurrActiveTab();
						if(context.onPageClose) {
							context.onPageClose();
						}
					}
				}
			}];
			if(DEBUG) {
				contextMenus.push({
					text: '禁用菜单',
					action: function(e) {
						e.preventDefault();
						context.destroy('html');
					}
				});
			}

			context.attach('html', contextMenus);
		}
	} catch(e) {}
}, 500);
/* 
 * 右键菜单 end
 */

/* 
 * IE placeholder 扩展
 */
//try {
//	if(!('placeholder' in document.createElement('input'))) {
//		//		$('input[placeholder],textarea[placeholder]').each(function() {
//		//			var that = $(this),
//		//				text = that.attr('placeholder');
//		//			if (that.val() === "") {
//		//				that.val(text).addClass('placeholder');
//		//			}
//		//			that.focus(function() {
//		//				if (that.val() === text) {
//		//					that.val("").removeClass('placeholder');
//		//				}
//		//			}).blur(function() {
//		//				if (that.val() === "") {
//		//					that.val(text).addClass('placeholder');
//		//				}
//		//			}).closest('form').submit(function() {
//		//				if (that.val() === text) {
//		//					that.val('');
//		//				}
//		//			});
//		//		});
//	}
//} catch(e) {
//
//}
//时间戳转日期
function changeDate(dateStr, isChange) {
	var date = "";
	isChange == "" ? false : isChange;
	var newTime = $.timeNow().Format("yyyy-MM-dd");
	if(isNaN(dateStr)) {
		//		date = Date.parse(dateStr);
		//		date = date / 1000;
		date = new Date(dateStr.replace(/-/g, "/")).Format("yyyy-MM-dd hh:mm:ss");
	} else {
		var d = new Date(dateStr * 1000); //根据时间戳生成的时间对象
		var year = d.getFullYear();
		var month = (d.getMonth() + 1) > 9 ? (d.getMonth() + 1) : "0" + (d.getMonth() + 1);
		var _date = d.getDate() > 9 ? d.getDate() : "0" + d.getDate();
		var min = d.getMinutes() > 9 ? d.getMinutes() : "0" + d.getMinutes();
		var sec = d.getSeconds() > 9 ? d.getSeconds() : "0" + d.getSeconds();
		date = year + "-" + month + "-" + _date + " " + (d.getHours() > 9 ? d.getHours() : "0" + d.getHours()) + ":" + min + ":" + sec;
	}
	return date;

}

function deteChangeTimestamp(dateStr) {
	var dates = Date.parse(dateStr);
	dates = dates / 1000;
	return dates;
}
//转换img src
function transImgSrc(obj, useDefault) {
	var src1 = $(obj).attr("src"),
		src2 = $(obj).attr("data-trans-src"),
		srcDefault = $(obj).attr("data-src-default");
	if(useDefault) {
		$(obj).each(function() {
			var thisSrc1 = $(this).attr("src"),
				thisSrcDefault = $(this).attr("data-src-default");
			$(this).attr("src", thisSrcDefault);
			if(thisSrc1 !== thisSrcDefault) {
				$(this).attr("data-trans-src", thisSrc1);
			}
		})
		return;
	}
	$(obj).attr("src", src2).attr("data-trans-src", src1);
}
//相差天数(isTime:是否显示时分秒,isSecond:是否显示秒);
function isTodayOrYesterday(time, isTime, isSecond) {
	var nowDate = $.timeNow().Format("yyyy-MM-dd");
	var times = time.substring(0, 10);
	var dates = time.substring(10, time.length);
	var tim = new Date(times.replace(/-/g, "/"));
	var yearStr = tim.getFullYear();
	var monthStr = tim.getMonth() + 1;
	var dateStr = tim.getDate();
	if(monthStr <= 9) monthStr = "0" + monthStr;
	if(dateStr <= 9) dateStr = "0" + dateStr;
	time = yearStr + "-" + monthStr + "-" + dateStr;
	//tim = tim.substring()
	var returnStr = time;
	if(daysBetween(nowDate, times) == 0) { //今天
		if(isSecond) { //显示秒
			returnStr = "今天 " + dates;
		} else { //不显示秒
			returnStr = "今天 " + dates.substring(0, 6);
		}
	} else if(daysBetween(nowDate, times) == 1) { //昨天
		if(isTime) { //显示时间
			if(isSecond) { //显示秒
				returnStr = "昨天 " + dates;
			} else { //不显示秒
				returnStr = "昨天 " + dates.substring(0, 6);
			}
		} else { //不显示时间
			returnStr = "昨天 ";
		}
	} else if(daysBetween(nowDate, times) == 999) { //非本年

	} else { //其他(显示月日)
		if(isTime) {
			if(isSecond) { //显示秒
				returnStr = time + dates;
			} else { //不显示秒
				returnStr = time + dates.substring(0, 6);
			}

		} else {
			returnStr = time.substring(5, time.length);
		}

	}
	return returnStr;
}

function daysBetween(DateOne, DateTwo, notNeedAbs) {
	var OneMonth = DateOne.substring(5, DateOne.lastIndexOf('-'));
	var OneDay = DateOne.substring(DateOne.length, DateOne.lastIndexOf('-') + 1);
	var OneYear = DateOne.substring(0, DateOne.indexOf('-'));
	var TwoMonth = DateTwo.substring(5, DateTwo.lastIndexOf('-'));
	var TwoDay = DateTwo.substring(DateTwo.length, DateTwo.lastIndexOf('-') + 1);
	var TwoYear = DateTwo.substring(0, DateTwo.indexOf('-'));

	var cha = ((Date.parse(OneMonth + '/' + OneDay + '/' + OneYear) - Date.parse(TwoMonth + '/' + TwoDay + '/' + TwoYear)) / 86400000);
	if(notNeedAbs) return cha;
	if(OneYear != TwoYear) {
		return 999;
	}
	return Math.abs(cha);
}
//存cookie(名字,值,过期时间)
function setCookie(name, value, iDay) {
	console.log(name + ":" + value);
	var oDate = new Date();

	oDate.setDate(oDate.getDate() + iDay);

	document.cookie = name + '=' + encodeURIComponent(value) + ';expires=' + oDate;
}
//取cookie(名字)
function getCookie(name) {
	var arr = document.cookie.split('; ');
	var i = 0;
	for(i = 0; i < arr.length; i++) {
		//arr2->['username', 'abc']
		var arr2 = arr[i].split('=');

		if(arr2[0] == name) {
			var getC = decodeURIComponent(arr2[1]);
			return getC;
		}
	}

	return '';
}

//加载通用的页面头部/尾部
$(".common-header").load("common-header.html", function() {
	var url = window.location.href;
	var className = url.replace("http://www.saas.com/", "").replace(".html", "").replace("#", "");
	$(".common-header li." + className + " a").addClass("active");
});
$(".common-footer").load("common-fotter.html");
//光标插入
function inimage(container, text) {
	var obj = container;
	var range, node;
	if(!obj.hasfocus) {
		return false;
		obj.focus();
	}
	if(window.getSelection && window.getSelection().getRangeAt) {
		range = window.getSelection().getRangeAt(0);
		range.collapse(false);
		node = range.createContextualFragment(text);
		var c = node.lastChild;
		range.insertNode(node);
		if(c) {
			range.setEndAfter(c);
			range.setStartAfter(c)
		}
		var j = window.getSelection();
		j.removeAllRanges();
		j.addRange(range);

	} else if(document.selection && document.selection.createRange) {
		document.selection.createRange().pasteHTML(text);
	}
}
//在线阅读
function onlineRead(fileName, path, container) {
	console.log(arguments)
	$.showLoadingPop("正在加载...");
	if((fileName || container) && path) {
		path = encodeURIComponent(path);
		if(!container) {
			if($("body .online-preview-page").length == 0) {
				$("body").append("<div class=\"online-preview-page hide\"><iframe width = \"100%\" style=\"border:0;\"></iframe></div>");
			}
			var modalId = $.modal({
				showOKButton: false,
				cancelButtonText: "关闭"
			}).showOfAuto(fileName + "在线预览", ".online-preview-page", function() {});
			$("#" + modalId + " iframe").attr("src", OSAPIBASEURL + "/file/view?path=" + path);
			$("#" + modalId + " iframe").ready(function() {
				$.hideLoadingPop();
			});
		} else {
			if(container.children("iframe").length == 0) {
				container.append("<iframe width = \"100%\" name='online-read' style=\"border:0;\" src=\"" + OSAPIBASEURL + "/file/view?path=" + path + "\"></iframe>");
			} else {
				container.children("iframe").attr("src", OSAPIBASEURL + "/file/view?path=" + path);
			}
			container.children("iframe").ready(function() {
				$.hideLoadingPop();
			});
		}
	} else {
		$.hideLoadingPop();
		$.showErrorGritter("文件预览失败!");
	}
}
//获取当前时间是这一年的第几周
$.getCurrTimeWeekNumInAllYear = function() {
	var time, week, checkDate = new Date(new Date());
	checkDate.setDate(checkDate.getDate() + 4 - (checkDate.getDay() || 7));
	time = checkDate.getTime();
	checkDate.setMonth(0);
	checkDate.setDate(1);
	week = Math.floor(Math.round((time - checkDate) / 86400000) / 7) + 1;
	return week;
}
//获取选中行数据
function getSelectedDatas(grid) {
	var selectedIds = $(grid).getSelectRowIdsForjqGrid("id");
	//console.log(selectedIds)
	var selectedDatas = [];
	for(var i in selectedIds) {
		selectedDatas.push($(grid).getRowData4JqGrid("id", selectedIds[i]));
	}
	return selectedDatas;
}
//将某个container里面的所有input选中
function letAllInputSelect(container) {
	$(container).find("input").each(function() {
		if(!$(this).prop("checked")) $(this).click();
	});
}
//将某个container里面的所有input取消选中
function letAllInputCancelSelect(container) {
	$(container).find("input").each(function() {
		if($(this).prop("checked")) $(this).click();
	});
}
//本地拼音检索//需导入pinyin.js
function pinyinSearch(keyWord, names) {
	if(!isInclude("pinyin.js")) {
		var a = document.createElement("script");
		a.src = "../resources/js/customize/pinyin.js";
		$("body").append(a);
	}
	//console.log("关键字：" + keyWord + "，姓名：" + name);
	keyWord = keyWord.toLocaleLowerCase();
	//console.log("转换过后的搜索关键字：" + keyWord)
	if(!(names instanceof Array)) {
		names = names.split(" ");
	}
	var returntext = false;
	for(var i = 0; i < names.length; i++) {
		var name = names[i].toString();
		var allStr = pinyin.getFullChars(name).toLocaleLowerCase(); //全拼
		//console.log("姓名全拼：" + allStr);
		var shortStr = pinyin.getCamelChars(name).toLocaleLowerCase(); //首拼
		//console.log("姓名首拼：" + shortStr);
		if(name.indexOf(keyWord) >= 0 || allStr.indexOf(keyWord) >= 0 || shortStr.indexOf(keyWord) >= 0) {
			//console.log("检索结果：正确---"+name);
			returntext = true;
		}
	}
	//console.log("检索结果：错误");
	return returntext;
}

//判断是否已导入某个js或css
function isInclude(name) {
	var js = /js$/i.test(name);
	var es = document.getElementsByTagName(js ? 'script' : 'link');
	for(var i = 0; i < es.length; i++)
		if(es[i][js ? 'src' : 'href'].indexOf(name) != -1) return true;
	return false;
}
//导入js或者css(name:文件名,hierarchy:层级,1:js子下面,2:js孙下面)
function introduceJsOrCss(nameList, hierarchy, callBack) {
	if(nameList) {
		if((typeof nameList) != "object")
			nameList = nameList.split(",");
		for(var i in nameList) {
			var name = nameList[i];
			var dom = {};
			var js = /js$/i.test(name);
			var es = document.getElementsByTagName(js ? 'script' : 'link');
			var isIntroduce = false;
			for(var i = 0; i < es.length; i++) {
				if(es[i][js ? 'src' : 'href'].indexOf(name) != -1) {
					isIntroduce = true;
					dom = es[i][js ? 'src' : 'href'];
					break;
				}
			}
			console.log("是否已加载" + name + ":" + isIntroduce);
			var type = js ? 'js' : 'css';
			if(!isIntroduce) {
				var str = {};
				if(type == "js") {
					var hierarchyStr = (hierarchy == 1 ? "" : "customize/");
					$.getScript("../resources/js/" + hierarchyStr + name, function() {
						callBack && callBack();
					});
					//					str = document.createElement("script");
					//					str.type = "text/javascript";
					//					str.src = "../resources/js/" + hierarchyStr + name;
					//					str.setAttribute("loadstatus", "false");
					//					document.getElementsByTagName("body")[0].appendChild(str);
					//					str.onload = str.onreadystatechange = function() {
					//						str.setAttribute("loadstatus", "true");
					//						// !this.readyState 为不支持onreadystatechange的情况，或者OP下创建CSS的情况
					//						// this.readyState === "loaded" 为IE/OP下创建JS的时候
					//						// this.readyState === "complete" 为IE下创建CSS的时候
					//						if(!this.readyState || this.readyState === "loaded" || this.readyState === "complete") {
					//							(typeof callBack) == "function" ? callBack(): "";
					//							str.onload = str.onreadystatechange = null; //防止IE内存泄漏
					//						}
					//					}
				} else {
					str = document.createElement("link");
					str.href = "../resources/css/" + name;
					str.rel = "stylesheet";
					document.getElementsByTagName("head")[0].appendChild(str);
				}
			} else {
				if(type == "js")
					(typeof callBack) == "function" ? callBack() : "";
			}
		}
	}

	function executeCallback() {

	}
}
//展开收起
$.zoom = function(option) {
	var containerDom = (option.container instanceof jQuery ? option.container : $(option.container)); //要展开收起的对象
	var handleDom = option.handle ? (option.handle instanceof jQuery ? option.handle : $(option.handle)) : false; //展开收起的按钮
	var height = option.height ? option.height : 100; //最新高度,不设置则默认100(实际上api上自己计算高度)
	var oneState = option.firstState != "" ? option.firstState : 0; //0:关闭,1:打开(默认收起)
	var btnShowText = option.showText ? arryChange(option.showText) : ["收起", "展开"];
	//判断是否导入jquery.dotdotdot.min.js
	//	if(!isInclude("jquery.dotdotdot.min.js")) {
	//		var a = document.createElement("script");
	//		a.src = "../resources/js/customize/jquery.dotdotdot.min.js";
	//		$("body").append(a);
	//	}
	introduceJsOrCss("jquery.dotdotdot.min.js", 2, function() {
		zoomHandle(oneState == 0 ? 1 : 0); //初始状态
	});

	function writeText(txt) {
		if(handleDom)
			if(handleDom.is("input")) {
				handleDom.val(txt);
			} else {
				handleDom.text(txt);
			}
	}

	function arryChange(obj) {
		if(obj instanceof Array) {
			return obj;
		} else {
			return obj.split(/,|，/g);
		}
	}

	function zoomHandle(state) {
		if(state == 1) { //展开→收起
			$(containerDom).dotdotdot({
				'height': height
			});
		} else { //收起→展开
			$(containerDom).trigger('destroy');
		}
		handleDom ? (handleDom.data("zoomstate", (state == 0 ? 1 : 0))) : "";
		if(option.changeCallback)
			option.changeCallback(state);
		writeText(btnShowText[state]);
	}
	if(handleDom)
		handleDom.unbind("click").click(function() {
			zoomHandle($(this).data("zoomstate"));
		});
}
//MTa提醒
function sendMtaMessage(data, modalId) {
	console.log(data);
	$.ajaxPost(BSAPIURL + "/mta", data, function(response) {
		console.log(response);
		if(response.code == 0) {
			$("#" + modalId).modal("hide");
			$.showSuccessGritter('提醒成功！');
		} else {
			$.showErrorGritter("提醒阅读失败:" + response.msg);
		}
	});
}
//对象转数组
function changeArray(obj) {
	if(obj) {
		var arr = [];
		for(var item in obj) {
			arr.push(obj[item]);
		}
		return arr;
	}
}

//分页------------------------------------------------------
$.initPagination = function(info) {
	var $div = $(this);

	var pager = {
		$first: null, //首页按钮
		$prev: null, //上一页按钮
		$nav: null, //导航区按钮
		$next: null, //下一页按钮
		$last: null, //末页按钮
		$goNum: null, //翻页文本输入框
		$go: null, //翻页按钮
		$recordCount: null, //总行数
		$pageIndex: null, //当前页号
		$pageCount: null, //总页数
		$pageSize: null, //页码数
		Init: function() { //初始化控件 缓存
			$div.find("[name]").each(function() {
				var name = $(this).attr("name");
				if(name && name.length) {
					pager["$" + name] = $(this);
				}
			});
			pager.SetPageUI();
		},
		//创建导航
		CreateNavi: function() {
			//页号导航
			if(!pager.$nav) return;

			var n1 = "<a class=\"navi {active}\">{text}</a>";
			var navi = pager.$nav;
			navi.empty();
			var i;
			var temp = "";
			var s1;
			var s2;

			var naviCount2 = (info.naviCount % 2) == 1 ? info.naviCount / 2 | 0 : info.naviCount / 2;

			if((info.thisPageIndex - naviCount2) < 1) {
				s1 = 1;
				s2 = info.naviCount;
			} else if((info.thisPageIndex + naviCount2) >= info.pageCount) {
				s1 = info.pageCount - info.naviCount + 1;
				s2 = info.pageCount;
				if(s1 < 1) s1 = 1;
			} else {
				s1 = info.thisPageIndex - naviCount2;
				s2 = info.thisPageIndex + naviCount2;
				if(s2 > info.pageCount) s2 = info.pageCount;
			}
			if(s2 > info.pageCount) s2 = info.pageCount;

			if(s1 >= 2) {
				temp = n1.replace("{active}", "").replace("{text}", 1);
				navi.append(temp);
			}
			if(s1 >= 3) {
				temp = n1.replace("{active}", "").replace("{text}", "…");
				navi.append(temp);
			}

			for(i = s1; i <= s2; i++) { //当前页
				temp = i == info.thisPageIndex ? n1.replace("{active}", "active").replace("{text}", i) : n1.replace("{active}", "").replace("{text}", i); // n1.replace("{active}","active").replace("{text}", i );//== info.thisPageIndex ? "<font style=\"color:#999\">" + i + "</font>" : i);
				navi.append(temp);
			}

			if(s2 <= info.pageCount - 2) {
				temp = n1.replace("{active}", "").replace("{text}", "…");
				navi.append(temp);
			}
			if(s2 <= info.pageCount - 1) {
				temp = n1.replace("{active}", "").replace("{text}", info.pageCount);
				navi.append(temp);
			}

			//注册事件
			var naviA = navi.find("a");
			naviA.each(function(j) {
				$(this).on('click', function() {
					info.beforePageIndex = info.thisPageIndex;
					if(this.innerHTML == "…") {
						var a1 = naviA[j - 1];
						if(a1.innerHTML == "1") {
							//前面的，取后面的作为页号
							a1 = naviA[j + 1];
							info.thisPageIndex = $(a1).text() * 1 - 1;
						} else {
							//后面的，取前面的作为页号
							a1 = naviA[j - 1];
							info.thisPageIndex = $(a1).text() * 1 + 1;
						}

					} else {
						info.thisPageIndex = $(this).text();
					}
					//页码未变更则不触发事件
					if(info.beforePageIndex == info.thisPageIndex) return;
					pager.PageChanged();
				});
			});
		},
		//设置UI
		SetPageUI: function() {
			if(info.pageCount == -1) {
				//计算总页数
				info.pageCount = info.recordCount % info.pageSize === 0 ? info.recordCount / info.pageSize : parseInt(info.recordCount / info.pageSize) + 1;
			}

			pager.$recordCount && pager.$recordCount.html(info.recordCount);
			pager.$pageIndex && pager.$pageIndex.html(info.thisPageIndex);
			pager.$pageCount && pager.$pageCount.html(info.pageCount);
			pager.$pageSize && pager.$pageSize.html(info.pageSize);

			pager.$goNum && pager.$goNum.val(info.thisPageIndex);

			$div.find("span").css("cursor", "pointer");

			switch(parseInt(info.thisPageIndex)) {
				case 1:
					//第一页
					pager.$first && pager.$first.css("cursor", "default");
					pager.$prev && pager.$prev.css("cursor", "default");

					pager.$next && pager.$next.show().css("cursor", "pointer");
					pager.$last && pager.$last.show().css("cursor", "pointer");
					break;
				case info.pageCount:
					//最后一页
					pager.$first && pager.$first.show().css("cursor", "pointer");
					pager.$prev && pager.$prev.show().css("cursor", "pointer");

					pager.$next && pager.$next.css("cursor", "default");
					pager.$last && pager.$last.css("cursor", "default");
					break;
				default:
					//不是第一页、最后一页
					pager.$first && pager.$first.show().css("cursor", "pointer");
					pager.$prev && pager.$prev.show().css("cursor", "pointer");

					pager.$next && pager.$next.show().css("cursor", "pointer");
					pager.$last && pager.$last.show().css("cursor", "pointer");
					break;
			}
		},
		//设置缺省设置
		SetDefaultInfo: function(pSet) {
			var defaultSetting = {
				recordCount: -1, //总记录数
				pageSize: 10, //一页记录数
				pageCount: -1, //总页数，不用设置，根据上两个条件自动计算
				thisPageIndex: 1, //当前页号
				beforePageIndex: 1, //上一次的页号
				//lastPageIndex: 0,     //最后一页的页号，自动计算

				naviCount: info.naviCount || 7, //页号导航的数量
				isUseRecordCount: true, //是否使用缓存的总记录数

				//分页控件模板的路径和文件名
				templetPath: "pager",
			};
			return $.extend(defaultSetting, pSet);
		},
		//注册翻页的事件，不包括页号导航
		RegPagerEvent: function() {
			pager.$first && pager.$first.on('click', function() {
				if(info.thisPageIndex != 1) {
					addEvent("a");
				}
			});

			pager.$prev && pager.$prev.on('click', function() {
				if(info.thisPageIndex != 1) {
					addEvent("-");
				}
			});

			pager.$next && pager.$next.on('click', function() {
				if(info.thisPageIndex != info.pageCount) {
					addEvent("+");
				}
			});

			pager.$last && pager.$last.on('click', function() {
				if(info.thisPageIndex != info.pageCount) {
					addEvent("z");
				}
			});

			pager.$go && pager.$go.on('click', function() {
				addEvent("go");
			});

			var addEvent = function(kind) {
				info.beforePageIndex = info.thisPageIndex;
				switch(kind) {
					case "a":
						info.thisPageIndex = 1;
						break; //首页 
					case "z":
						info.thisPageIndex = info.pageCount;
						break; //末页 
					case "+":
						info.thisPageIndex = info.thisPageIndex * 1 + 1;
						break; //下页 
					case "-":
						info.thisPageIndex = info.thisPageIndex * 1 - 1;
						break; //上页 
					case "go":
						info.thisPageIndex = pager.$goNum.val();
						break; //go 
				}
				pager.PageChanged();
			};
		},
		//页面变更事件
		PageChanged: function(pIndex) {
			if(pIndex) info.thisPageIndex = pIndex;

			//如果页码错误 则中断
			if(isNaN(info.thisPageIndex)) {
				alert("页码不正确");
				return;
			}

			info.thisPageIndex = parseInt(info.thisPageIndex);

			//判断范围
			if(info.thisPageIndex > info.pageCount) info.thisPageIndex = info.pageCount;
			if(info.thisPageIndex < 1) info.thisPageIndex = 1;

			info.onPageChange && info.onPageChange.call(info, info.thisPageIndex);

			pager.SetPageUI(); //重新设置UI
			pager.CreateNavi();

			//克隆
			//var tmpdiv = info.pageTurnDivIDs.split(",");
			//var pageHtml = $("#" + tmpdiv[0]).clone(true);
			//for (var i = 1; i < tmpdiv.length; i++) {
			//    $("#" + tmpdiv[i]).html(pageHtml);
			//}
		}
	};

	//设置默认值
	info = pager.SetDefaultInfo(info);
	//如果模板没有自定义 则自动填充
	var html = $div.html();
	if(!/\w+/.test(html)) {
		html =
			'<span style="cursor: pointer;">共<span name="recordCount" style="color: Red;">102</span>条记录</span>'
			//    +'<span style="cursor: pointer;">第<span name="pageIndex" style="color: Red;">1</span>/<span name="pageCount" style="color: Red;">11</span>页</span>'
			//    +'<span style="cursor: pointer;"> 每页<span name="pageSize" style="color: Red;">10</span>条记录</span>   '
			//    +'	<span name="first" class="disabled" style="cursor: default;">首页</span>'
			+
			'	<span name="prev" class="disabled" style="cursor: default;">上一页  </span>' +
			'	<span name="nav" style="cursor: pointer;">' +
			'		<a class="navi"><span style="color: #999">1</span></a>' +
			'	</span>' +
			'	<span name="next" class="" style="cursor: pointer;">下一页  </span>'
		//    +'	<span name="last" class="" style="cursor: pointer;">末页    </span>'
		//    +'	<input name="goNum" class="cssTxt" type="text" size="1"><span name="go" style="cursor: pointer;">   GO</span>';
		$div.html(html);
	}
	//增加样式
	if(!$div.hasClass("pager")) $div.addClass("pager");
	//初始化 缓存控件
	pager.Init();
	//注册事件（仅限上一页、下一页、首页、末页，不包括页号导航）
	pager.RegPagerEvent();
	//创建导航 并增加导航事件
	pager.CreateNavi();
	this.pager = pager;

	return this;
}

$.fn.pagination = function(pagerInfo) {
	this.each(function() {
		$.initPagination.call(this, pagerInfo);
	});
}

$.fn.PageChanged = function(pageIndex) {
	this[0].pager && this[0].pager.PageChanged.call(this, pageIndex);
};
//	$(pager+"_left").pagination({
//	    recordCount: count,       //总记录数
//	    pageSize: option.rowN,           //一页记录数
//	    onPageChange: function (pageIndex) {
//	    	console.log(option)
//	        document.title = pageIndex;
//	        $(option.grid).trigger("reloadGrid",{page:pageIndex})
//	    }
//	});
//分页end---------------------------------------------------
//扩展选时分秒的插件
$.initTimePicker = function(option) {
	/*
	 format: hh:mm:ss
	 hours: 0-23
	 minutes: 0-59
	 seconds: 0-59
	 container: 容器
	 showEnd: 是否显示结束时间选择
	 clickCallback: 点击事件触发的回调
	 */
	option.format = option.format || "hh:mm:ss";
	option.hours = option.hours || "0-23";
	option.minutes = option.minutes || "0-59";
	option.seconds = option.seconds || "0-59";
	if(!option.container || $(option.container).length < 1) {
		throw new Error("请传入容器或者传入的容器不存在");
		return false;
	}
	//console.log(option);
	$(option.container).removeAttr("bind").addClass("time-picker");
	$(option.container).each(function() {
		//$(this).addClass("time-picker").attr("bind","select_time");
		var formatArr = option.format.split(":");
		for(var i in formatArr) {
			if(formatArr[i] == "hh") addSelect($(this), "hours", i < formatArr.length - 1);
			if(formatArr[i] == "mm") addSelect($(this), "minutes", i < formatArr.length - 1);
			if(formatArr[i] == "ss") addSelect($(this), "seconds", i < formatArr.length - 1);
		}
		$(this).find(".time-picker-select").change(function() {
			var selectedTime = "";
			$(this).find(".time-picker-select").each(function(index) {
				selectedTime += $(this).find("option:selected").val() + (index < $(this).find(".time-picker-select").length - 1 ? ":" : "");
			});
			$(this).attr("value", selectedTime);
			//var contoller=new Controller($(this));
			//console.log(contoller.getJSON());
		});
		console.log($(this).find(".time-picker-select:first-child"))
		$(this).find(".time-picker-select:first-child").trigger("change");
	});
	//添加各种select
	function addSelect(obj, type, needDivide) {
		var $selectDom = $("<select class='" + type + "-picker time-picker-select'></select>");
		var numStart = parseInt(option[type].split("-")[0]);
		var numEnd = parseInt(option[type].split("-")[1]);
		for(var i = numStart; i <= numEnd; i++) {
			var tempI = i < 10 ? "0" + i : i;
			$selectDom.append("<option value='" + tempI + "'>" + tempI + "</option>");
		}
		//console.log($selectDom);
		//console.log($(obj).html())
		$(obj).append($selectDom);
		if(needDivide) $(obj).append("<span class='time-picker-divide'>:</span>");
	}
}
//选择部门或者选择员工时,获取默认选择的数组
function getDefualtCheckedIdsArr(itemSelect, idAttr) {
	var idsArr = [];
	$(itemSelect).each(function() {
		idsArr.push($(this).attr(idAttr));
	});
	return idsArr;
}

//加载虚线表示层级的部门树
var loadDashedDeptTree = function(option) {
	/*
	 参数说明: 
	 container:树的容器
	 showIcon: 是否显示折叠收起
	 url: 请求数据地址
	 loadComplete: 加载完成的回调
	 onlyShowDept: 是否只显示部门
	 showRespPerson: 是否显示负责人
	 showDeptChildCount: 是否显示子部门数量
	 childDepaKey: 子部门字段名
	 depaIdKey: 部门ID字段名
	 parentDepaIdKey: 父部门ID字段名
	 showEmps: 是否显示员工
	 showBtns: 是否显示按钮
	 */
	console.log("开始加载")
	$(option.container).empty();
	$(option.container).addClass("dashed-dept-tree");
	$(".model-changedept-info .tree").empty();
	var childDepaKey = option.childDepaKey ? option.childDepaKey : "depas";
	var depaIdKey = option.depaIdKey ? option.depaIdKey : "depa_tree_code";
	var showCountKey = option.showCountKey ? option.showCountKey : "depa_count";
	$.ajaxGet(option.url, function(response) {
		if(response.code == 0) {
			$.hideLoadingPop();
			//success
			var deptList = response.data;
			if(deptList.length < 1) return;
			for(var i in deptList) {
				var deptData = deptList[i];
				deptData.depa_tree_code = deptData.depa_id;
				deptData.parent_depa_tree_code = deptData.depa_parent_id;
				var treeDom = $(option.container);
				var liDom = $("<li class='first-line'></li>");
				var childDeptCount = option.showDeptChildCount ? " (" + deptData[showCountKey] + ") " : "";
				var responsePersonName = option.showRespPerson ? (deptData.master_leader_name ? "," + deptData.master_leader_name : "") : "";
				var isCmp = !deptData.parent_depa_tree_code ? true : false;
				isCmp && liDom.addClass("company-li");
				liDom.data("dept", deptData);
				if(deptList[i][childDepaKey] && deptList[i][childDepaKey].length > 0 || (option.showEmps && deptList[i].employees && deptList[i].employees.length > 0))
					liDom.append("<p>" +
						(isCmp ? "<img src='../resources/images/cmp-icon.png'>" : "<img src='../resources/images/minus-o-icon.png' data-trans-src='../resources/images/plus-o-icon.png' class=\"icon-collapse\"/>") +
						"<label code='" +
						deptData.depa_tree_code + "' data-istop='true' title='" + deptData.depa_name + childDeptCount +
						responsePersonName + "'>" +
						"<span class='css-overflow-hidden depa-name'>" + deptData.depa_name + "</span>" + "<span class='child-dept-count'>" + childDeptCount + "</span>" + "<span class='css-overflow-hidden' style='max-width: 75px;'>" +
						responsePersonName + "</span></label></p>");
				else
					liDom.append("<label title='" + deptData.depa_name + childDeptCount + responsePersonName + "' code='" + deptData.depa_tree_code + "' data-istop='true'>" +
						"<i class='tree-zhan-wei'></i>" + "<span class='css-overflow-hidden depa-name'>" + deptData.depa_name + "</span>" + "<span class='child-dept-count'>" + childDeptCount + "</span>" +
						" <span class='css-overflow-hidden' style='max-width: 75px;'>" + responsePersonName + "</span></label>");
				if(deptList[i][childDepaKey] && deptList[i][childDepaKey].length > 0 || (option.showEmps && deptList[i].employees && deptList[i].employees.length > 0)) {
					liDom.append("<ul class='left-line'></ul>");
				}
				if(option.showEmps && deptList[i].employees && deptList[i].employees.length > 0) {
					appendEmps(deptList[i].employees, liDom.find(">ul"));
				}
				treeDom.append(liDom);
				$(liDom).find("label").append("&nbsp;&nbsp;<span class=\"btns\"><a class='' href=\"javascript:;\" onclick=\"openSetDeptLeader(this);\">设置负责人</a>" +
					"</span>");
				appendDashedChildDeptTree(deptList[i][childDepaKey], deptData.depa_tree_code, liDom.find(">ul"), false);
			}
			deptsJSON = deptList;
			//加载子部门
			function appendDashedChildDeptTree(deptList, parentId, treeDom, istopst) {
				console.log(deptList)
				for(var i in deptList) {
					var deptData = deptList[i];
					deptData.depa_tree_code = deptData.depa_id;
					deptData.parent_depa_tree_code = deptData.depa_parent_id;
					var existingNum = $(treeDom).children("li").length;
					var childDeptCount = option.showDeptChildCount ? " (" + deptData[showCountKey] + ") " : "";
					var responsePersonName = option.showRespPerson ? (deptData.master_leader_name ? "," + deptData.master_leader_name : "") : "";
					if(deptData.parent_depa_tree_code == parentId) {
						var liDom = $("<li></li>");
						if(istopst) { //最外层
							liDom.addClass("left-line")
						} else {
							if(deptData[childDepaKey] && deptData[childDepaKey].length > 0 && deptData.depa_type == 0) liDom.addClass("right-line").addClass("top-line");
							else liDom.addClass("top-line");
						}
						liDom.data("dept", deptData);
						//var tmpLeader = deptData.master_leader_name ? deptData.master_leader_name : "";
						//						if(tmpLeader) {
						//							tmpLeader = "，" + tmpLeader;
						//						}
						if(deptData.depa_type == 0) {
							if(deptData[childDepaKey] && deptData[childDepaKey].length > 0 || (option.showEmps && deptList[i].employees && deptList[i].employees.length > 0)) {
								liDom.append("<p><img src='../resources/images/minus-o-icon.png' data-trans-src='../resources/images/plus-o-icon.png' class=\"icon-collapse\"/>" +
									"<label code='" + deptData.depa_tree_code + "' data-istop='true' title='" + deptData.depa_name + childDeptCount + responsePersonName + "'>" + "<span class='css-overflow-hidden depa-name'>" + deptData.depa_name + "</span>" +
									"<span class='child-dept-count'>" + childDeptCount + "</span>" + " <span class='css-overflow-hidden'>" + responsePersonName + "</span></label></p>");
							} else {
								liDom.append("<label title='" + deptData.depa_name + childDeptCount + responsePersonName + "' code='" + deptData.depa_tree_code + "' data-istop='true'>" + "<i class='tree-zhan-wei'></i>" + "<span class='css-overflow-hidden depa-name'>" + deptData.depa_name + "</span>" +
									"<span class='child-dept-count'>" + childDeptCount + "</span>" + " <span class='css-overflow-hidden'>" + responsePersonName + "</span></label>");
							}
							if(deptData.depa_name.indexOf("未分配部门") < 0) {
								var deparCount = 0;
								if(deptData[childDepaKey])
									for(var t in deptData[childDepaKey]) {
										if(deptData[childDepaKey][t].depa_type == 0)
											deparCount++;
									}
								$(liDom).find("label").append("&nbsp;&nbsp;<span class=\"btns\"><a class='' href=\"javascript:;\" onclick=\"openSetDeptLeader(this);\">设置负责人</a><a href=\"javascript:;\" class='btn-dept-delete' onclick=\"amendDeparName(this);\">修改名称</a></span>");
							}
							if(deptData[childDepaKey] && deptData[childDepaKey].length > 0 || (option.showEmps && deptList[i].employees && deptList[i].employees.length > 0)) liDom.append("<ul class='left-line'></ul>");
							if(option.showEmps && deptList[i].employees && deptList[i].employees.length > 0) {
								appendEmps(deptData.employees, liDom.find(">ul"));
							}
							$(treeDom).append(liDom);
							if(deptData[childDepaKey] && deptData[childDepaKey].length > 0) {
								appendDashedChildDeptTree(deptData[childDepaKey], deptData.depa_tree_code, liDom.find(">ul"), false);
							}
						} else if(deptData.depa_type == 1 && !option.onlyShowDept) {

							var str = "";
							if(deptData.employee_count == 0) {
								str = "<a href=\"javascript:;\" class='btn-dept-delete' onclick=\"openDeletePostPop(this);\">删除</a>";
							}
							liDom.append("<label code='" + deptData.depa_tree_code + "' data-istop='true'>" + "<i class='tree-zhan-wei'></i>" + deptData.depa_name + "<span class='child-dept-count'>" + childDeptCount + "</span>" + " <span class='css-overflow-hidden'>" + responsePersonName + "</span></label>");
							liDom.find("label").append("&nbsp;&nbsp;<span class=\"btns\">" + str + "</span>");
							if(deptData[childDepaKey] && deptData[childDepaKey].length > 0) liDom.append("<ul class='left-line'></ul>");
							if(option.showEmps && deptList[i].employees && deptList[i].employees.length > 0) {
								appendEmps(deptData.employees, liDom.find(">ul"));
							}
							$(treeDom).append(liDom);
							if(deptData[childDepaKey] && deptData[childDepaKey].length > 0) {
								appendDashedChildDeptTree(deptData[childDepaKey], deptData.depa_tree_code, liDom.find(">ul"), false);
							}
						}
					}
				}
			}
			//加载员工
			function appendEmps(emps, container) {
				for(var i in emps) {
					var signStr = "";
					if(option.isSignResign) {
						if(emps[i].employee_status == 7) {
							signStr = " (已离职)";
						}
					}
					var $li = $("<li class='top-line'>" +
						"<label class='employee-label' code='" + emps[i].employee_id + "'>" +
						"<i class='tree-zhan-wei'></i>" +
						"<span class='css-overhidden'>" + emps[i].employee_name + signStr + "</span>" +
						"</label>" +
						"</li>");
					container.append($li);
				}
			}
			$(option.container).css({
				"float": "left",
				"white-space": "nowrap",
				overflow: "visible",
			});
			//删除无子部门li的展开收起图标
			$(option.container).find("li").each(function() {
				if($(this).find(">ul li").length < 1) {
					$(this).find(">p img").before("<i class='tree-zhan-wei'></i>");
					$(this).find(">p img").remove();
				}
			});
			//是否显示按钮
			if(!option.showBtns) {
				$(option.container).find("li label .btns").remove();
			}
			//展开收起
			$(option.container).find("li .icon-collapse").click(function(e) {
				transImgSrc($(this));
				$(this).parent().parent().find(">ul").toggleClass("hide");
			});
			//点击事件
			$(option.container).find("label").click(function() {
				$(option.container).find("label").removeClass("active");
				$(this).addClass("active");
			});
			if(option.loadComplete) option.loadComplete(deptList);
			console.log("加载完成")
		} else {
			$.showErrorGritter("加载部门失败:" + response.msg);
		}
	});
}
//打印
function print(dom) {
	console.log(dom)
	if(dom) {
		dom.find("table td").addClass("tab-border");
		introduceJsOrCss("jquery.print.js", 1, function() {
			dom.print();
			setTimeout(function() {
				dom.find("table td").removeClass("tab-border");
			}, 1000);
		});
	}
}
//全局变量
window.businessGroupCode = {
	"client": 1, //客户单位讨论群
	"announcement": 2, //公告讨论群
	"plan": 3, //计划谈论群
	"publics": 4, //公海讨论群
	"depar": 5, //客户部门科室讨论群
	"linkman": 6 //客户联系人讨论群
}
window.businessInformCode = {
	"approveing": 1, //待审批
	"approveed": 2, //审批完成
	"announcement": 3, //公告发布
	"recess": 4, //放假通知
	"attendanceRule": 5, //考勤规则变更通知
	"weekPlanChangeInform": 6, //周计划变更通知
	"weekPlanNotifier": 7, //周计划知会通知
	"visitInform": 8, //拜访特批审批结果通知
	"visitApv": 9, //拜访特批审批
	"weekPlanApv": 10, //周计划审批
	"weekPlanApvInform": 11, //周计划审批结果通知
	"weekPlanAssist": 12, //周计划协助
	"workPlanOverTime": 13, //工作计划超时
	"workSummaryOverTime": 14, //工作总结超时
	"publicApvInform": 15, //公海审批结果通知
	"workSummaryDetail": 16, //工作总结/计划汇总通知
	"newEmail": 20, //新邮件
	"MTa": 30, //MTa
	"noLogin": 53 //未登录提醒
}
window.MtaCode = {
	"im": 1, //消息提醒
	"approve": 2, //审批提醒
	"announcement": 3, //公告提醒
	"information": 4, //资讯提醒
	"documenttion": 5 //文档提醒
}
window.groupCode = {
	"commonGroup": 1, //普通群
	"deparGroup": 2, //部门群
	"businessGroup": 3 //讨论群
}

window.APV_ROUTINE_IDS = {
	crm: {
		"E872A68A-588D-B539-CBBB-10C5235F3077": "[CRM]修改共享",
		"e3ade721-5957-11e6-b443-408d5c7fdc79": "[CRM]公海资源申请",
		"B7A672F0-744F-82D8-DD61-AB05695D4A45": "[CRM]删除客户单位",
		"D001F414-14F2-1615-98E5-D1858603C97C": "[CRM]删除科室/部门",
		"96525148-BE75-7EFE-DF04-7E279517D1C0": "[CRM]删除联系人",
		"B6E817C2-D68C-0DD4-7DEF-4F39377AF811": "[CRM]取消客户共享",
		"4FEC7D19-A34F-1648-8AF5-02595828B67C": "[CRM]客户共享",
		"4168D9F2-1426-5453-63BE-CC5CB96D2194": "[CRM]客户移交",
		"3E7E5A28-D85F-6AF1-2608-2AC1ABDC1779": "[CRM]更改客户状态",
		"8602901A-A232-5C7E-48DF-9C9ADD5E1177": "[CRM]更改科室状态",
		"0CB1AA95-3A96-64FE-457D-AD043571F2E7": "[CRM]更改联系人状态",
		"8a579637-5890-11e6-a82b-408d5c7fdc79": "[CRM]移入公海"
	},
	adc: {
		"F11EF9EA-923A-2CA1-BE1B-43897B764DF9": "加班",
		"1D6C12B9-2DDA-4906-8995-8A2C96CF5389": "请假",
		"1D6C12B9-2DDA-4906-8995-8A2C96CF5399": "申请销假"
	},
	doc: {
		"DEFEDD93-684F-F93A-D3AD-FBEECF33C4B9": "文档下载",
		"AEFEDD93-684F-F93A-D3AD-FBEECF33C4A0": "文档共享"
	},
	anmt: {
		"CEFEDD93-684F-F93A-D3AD-FBEECF33C4B8": "发布公告"
	},
	info: {
		"895E98A2-0841-CB1C-D2B7-6D007318BDD5": "资讯发布"
	}
}